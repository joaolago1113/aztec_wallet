{"noir_version":"0.33.0+8ac81b15cd2a3b57493bfbfe444086deac8f3dc8","name":"EcdsaKCustomAccount","functions":[{"name":"hmac_sha256","is_unconstrained":false,"custom_attributes":[],"abi":{"parameters":[{"name":"key","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"data","type":{"kind":"array","length":8,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2b9W9bSxCFr5NCysyU5kH72I7txH6YR23KzBRyyszMzMzMzMzc/led0drqyWp+646qlXqlI3+aSjn+0sSx7+6GAnO9p2xKc4iSnX7kK8eahYRZljDLFmbVhFl1YVZDmNUUZjnCrJYwqy3M6gizusKsnjCrL8waCLOGwqyRMGsszJoIs6bCrJkway7MWgizlsKslTBrLczaCLO2wqydMGsvzDoIs1xh1lGY5Qmzr4TZ18LsG2H2rTDrBLOsoOrvB19F6cfwJ13RAv56xeo98XL+et2snpCST3f1HuPTw+rJUvLpqd5jfHpZPdlKPr3Ve4xPH6unmpJPX/Ue49PP6qmu5NNfvcf4DLB6aij5DFTvMT6DrJ6aSj6D1XuMzxCrJ0fJZ6h6j/EZZvXUUvIZrt5jfEZYPbWVfEaq9xifUVZPHSWf0eo9xmeM1VNXyadEvcf4lFo99ZR8ytR7jE+51VNfyadCvcf4pKyeBko+leo9xmes1dNQyWeceo/xGW/1NFLymaDeY3wmWj2NlXwmqfcYn8lWTxMlnynqPcZnqtXTVMlnmnqP8Zlu9TRT8pmh3mN8Zlo9zZV8Zqn3GJ/ZVk8LJZ856j3GZ67V01LJZ556j/GZb/W0UvJZoN5jfBZaPa2VfBap9xifxVZPGyWfJeo9xmep1dNWyWeZeo/xWW71tFPyWaHeY3xWWj3tlXxWqfcYn9VWTwclnzXqPcZnbVD1Clkd0XBBLJYqzE9FopHScH6yLBEPx+JlBYlIIhJPxCvyE9FoKhFLFCbLkoXhZCQWTUUq48loZbplncPvS+a+dzE81+Lg4xpWd+CewL2B+wL3Bx4IPBh4KPBw4JHAo4FLgMuAK4ArgccBTwCeBDwFeBrwDOBZwHOA5wEvAF4EvAR4GfAK4FXAa4DXfeHPyrnAHYHzgHHdGNeLcZ0Y14cz68LrKRsoGwOzl2IzZQtlK2UbZTtlB2UnZRdlN2UPZS9lH2U/5QDlIOUQ5TDlCOUo5RjlOOUE5STlFOU05QzlLOVcUPVy/bp0PnD3Opp5XSqB59oNvp89gHsB9wHuBzwAeBDwEOBhwCOARwGPAS4FLgdOAY8FHg88EXgy8FTg6cAzgWcDzwWeD7wQeDHwUuDlwCuBVwOvBT7/hT8rrwfeALwReBPwZuAtwFuBtwFvB94BvBN4F/Bu4D3Ae4H3Ae8HPgB8EPgQ8GHgI8BHgY8BHwc+AXwS+BTwaeAzwGeBz6X5AuUi5RLlMuUK5SrlGuU65QblJuUW5TblDuUu5R7lPuUB5SHlEeUx5QnlKeUZ5TnlBeUl5RXlNeUN5S3lXWD23eGVlX4sSj+GP+2KdA7c/Q244O55hTWdv3PofNET5+8dOl/yxPkHh86XPXH+0aHzFU+cf3LofNUT558dOl/zxPkXh87XPXEOO3S+4YlzxKHzTU+c8x063/LEOerQ+bYnzjGHznc8cY47dL7riXOBQ+d7njgXOnS+74lzwqHzA0+ckw6dH3ri/KtD50eeOP/m0PmxJ86/O3R+4onzHw6dn3ri/KdD52eeOP/l0Pm5J85FDp1feOL8t0Pnl544/+PQ+ZUnzv86dH7tifN/Dp3feOL8v0Pnt544d3Ho/M4T564Ond87dM7sx+GrM/iH0t+D7PS/85lzPqedOdvMZ2j53Cmf1eTzjXwmkM/R8dkzPq/FZ5z4XBCfpeHzJ3xmg8858NkA3k/Pe9B53zbvdeb9wbynlveh8t7N3MDsz8oLzH4s3ofF+69431UneI658Lx53ZfXQXldkNfJeN2I11F4XYH/Y/m+M9+H5fuSfJ+O71vxfRy+r8Gf8/lzL38O5M9F/DmB3zfz+8jM+yr+u8t/h/h1mV+n+PeWf467BsL1AfkCT0lZRwAA","debug_symbols":"nddLjoJAFIXhvdTYQSHcR7mVTsegoiEhaAA76RD33tgvTWDiP6tbN6fO5JvUGA7V7nra1u3x3IfN2xia874c6nM7TWMo4vddfynb+9gPZTeEjVimq1C1h/sxt9sqHOumChv12/sqFNlyRh8Zn2XWoCcHPQXoEdCjoMdAj4Oe9HqPAAcCHAhwIMCBAAcCHAhwIMCBAAcCHChwoMCBAgcKHChwoMCBAgcKHChwoMCBAQcGHBhwYMCBAQcGHBhwYMCBAQcGHDhw4MCBAwcOHDhw4MCBAwcOHDhw4MBBAg4ScJCAgwQcJOAgAQcJOEjAQQIOEnCQRQAhixlpWpOmnDQtYtD4H9KYZBYSElrkoLllf6EixlnIXg1Nw66rm6Y+bZ9/e9P1R9nV5a6pfsfjtd0/bYfPy89meuIL","brillig_names":[]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"bytes_le_to_field","is_unconstrained":false,"custom_attributes":[],"abi":{"parameters":[{"name":"bytes","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WZ6U7bUBCFaxwg7Pu+BFpaWlrae7zE138qXoWA/f6PQEYxyJiTxMuQ5UqRoy/S0cwcy5kZO18G53//Y7LvTv/jZlc57QJzCFsgzCWsRdgiYUuELRPWJmyFsFXC1ghbJ2yDsE3CtgjbJmyHsF3C9gjbJ+yAsEPCjgg7JuyEsFPCzgg7J+yCsEvCOhnLn1Z2fciuvukGQRJ5CXw8Gi/u2dAEYa9rYRHa8Nmzvp/YwEZxL45MjMBPkIaxn5rB0dBKUjkGjpJWPywsKOZ4ndMyDc9neJEMAoXbXMvLckarqVbwVj8sKnrxdXa9MLk4sdREy3uXM5bra5lC/dBW9OLbDHrRTT/EiZV6WpbkjNU6WpbWD2uKXtzMlhfRkDixXlUrGpozNqppeSPqh01FL77PihfRyDixVV7raUzO2C6rFY2tH3YUvfgxfS9MiTixW0bLlMoZe+O1wpL1w76iF7fT9CIoHScORmoFaYWccThKK6pUPxwpevFzOl7YinHieIhWnFbOGSdcy9SoH04Vvfg1aS9MrThx9lELNXPGeVHruXb9cKHoxd3kvPAbxInLnJaXNsoZHb2cca3oxe8JeWGaHSjOpFCcqXCj6MWfOfFCsfeGYu+IW0Uv7ufEC8UeA4r/kbhT9OLvnHih+CyF4rMA94pe/PskL1xlL64UtRTvP2jWz8ndw1e5Wr6+23Kz32U3LLvS13dRsquTHZvsxmRXJDse2c3IrkJ2DLIbkFlZZlyZTWVWkxlLZiOZFaTHl95celXpMaU3lF6pU4ihGNfbeQHNc1EbwRsAAA==","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":[]},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(noinitcheck)","aztec(view)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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vdXs/TAAWc31DwOQVWXgKAAFqzrCYQCyKjocBqDzKBQhpO0UQgnpE0A/h3qeZPjTUG/Pw1yHKucZqmyRFOTmXPzHYXdJbFbHpCWWRpLTbhUL50ksJztSc7YYXVitvxTLW44sfsu5P31F4+F5NTM+FuGD5szvgM5+doS9D5qzuNM5W3NGdjZni+bs6njOfnpkvBfNmdLpnK056zmdszXnXcdz9tOPG3gRk87e7WMFF2kHBzYc+PQMTi82M70dHWgze9vRgTYzsh0daDPL2s+B0WbmtKMDbWZDOzrQZoazowNtZi07OlBw4PccaDMTmXOEs48205ZZ3raZ48zyts2EaJa3z5M9VdlO/1zq/Y6adJ4052akbqn3Iz1PPuIuGv02VGntY4tp2zUS043V7+4DSefJSyY7cnR+Uv06Q/p6Y8/lzj/NEV3mDF47h+W6lF+KuzMn6TIn6zKn6DKnqjInL7rMcbrM8brMCbrMEV3m6JqVs65ZOeualbOuWTnrmpWLrlm56JqVi65ZueialYuuWbnompWLrlm56JqVi65ZueialauuWbnqmpWrrlm56pqVq65ZueqalauuWbnqmpWrrlm5qpqVw6JqVg6Lqlk5LKpm5bCompXDompWDouqWTksqmblsKialcOialYOi65Z2emalZ2uWdnpmpWdrlnZ6ZqVna5Z2emalZ2uWdnpmpWdrlnZ65qVva5Z2eualb2uWdnrmpW9rlnZ65qVva5Z2eualb2uWTnompWDrlk56JqVg65ZOeialYOuWTnompWDrlk56JqVg65ZWXTNyqJrVhZds7LompVF16wsumZl0TUri65ZWXTNyqJrVo66ZuWoa1aOumblqGtWjrpm5ahrVo66ZuWoa1aOumblqGtWTrpm5aRrVk66ZuWka1ZOumZlXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2xd09fYFXb19QVdvX9DV2ye6evtEV2+f6OrtE129fbKompVFV2+f6OrtE129faKrt0909faJrt4+0dXbJ7p6+0RXb5/o6u0TXb19oqu3T3T19omu3j7R1dsnunr7RFdvn+jq7RNdvX2iq7dPdPX2ia7ePtHV2ye6evtEV2+f6OrtE129faKrt0909faJrt4+0dXbJ7p6+0RXb5/o6u0TXb19oqu3T3T19omu3j7R1dsnunr7RFdvn+jq7RNdvX2iq7dPdPX2ia7ePtHV2ye6evtEV2+f6OrtE129faKrt0909faJrt4+0dXbJ7p6+0RXb5/o6u0TXb19oqu3T3T19omu3j7R1dsnunr7RFdvn+jq7RNdvX2iq7dPdPX2ia7ePtHV2ye6evtEV2+f6OrtE129faKrt0909faJrt4+0dXbJ7p6+0RXb5/o6u0TXb19oqu3T3T19omu3j7R1dsnunr7RFdvn+jq7RNdvX2iq7dPdPX2ia7ePtHV2xd19fZFXb19UVdvX9TV2xcXVbNy1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1RV29f1NXbF3X19kVdvX1JV29f0tXbl3T19iVdvX1pUTUrJ129fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdPX2JV29fUlXb1/S1duXdfX2ZV29fVlXb1/W1duXF1WzctbV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19WVdvX9bV25d19fZlXb19RVdvX9HV21d09fYVXb19ZVE1KxddvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3T19hVdvX1FV29f0dXbV3X19lVdvX1VV29f1dXbVxdV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","brillig_names":["get_note_internal","decompose_hint","get_note_internal","get_key_validation_request","notify_nullified_note","notify_created_note","get_auth_witness","get_public_data_witness","lt_32_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","unsafe_rand","emit_encrypted_note_log","pack_returns","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hotp_secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_contract_instance_internal","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","notify_created_note","get_key_validation_request","unsafe_rand","emit_encrypted_note_log","notify_created_note","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]},{"name":"generate_hotp_code","is_unconstrained":false,"custom_attributes":[],"abi":{"parameters":[{"name":"key","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"tZvdTttAEEbfxddc7M7P7ppXqaoqtIAiRQHxU6lCvHtDS9yItWXl0LnDSQ7j2ZzPu7I3L8OP66vn22/b/c3d43D55WXY3X3fPG3v9oejl0H1z2uP95v92+Hj0+bhabg0l3wxXO9/vP1p9nox3Gx318Nlaa9fLwY1wDhgCmAqYBpgxvMZS4DJC0yaGJePjABGAWOAAR4Y8MCABwY8sPH8MfAEGOCBAw8cXA8cXA8ceODAA69gDBpggAcFeFDy+WNQBDDAgwI8KA7GoAAGeFCABwXMCxXMCxV4UIEHFcwLFcwLFXhQgQcVzAsVzAsVeNCABw3MCw3MCw140IAHDXjQgAcNXA8auB60BQ/GdmSKjKfMRfdhr7m8f9ir1g8FxvQfCpR/BVpXIEd3INEdaHQHFt2BR3dQojuo0R206A6ik5xTdJRzyuE9SHgPGt6Dhffg4T2U8B5qeA8tvIfwTOfwTOfwTOfwTOfwTOfwTOfwTOfwTOfwTOfwTOfwTEt4piU80xKeaQnPtIRnWsIzLeGZlvBMS3imJTzTGp5pDc+0hmdawzOt4ZnW8ExreKY1PNManmkNz7SFZ9rCM23hmbbwTFt4pi080xaeaQvPtIVn2sIz7eGZ9vBMe3im/fOZLmmqUNLoXQULr/D5TBetx0dnxVLqKpTwCjW8wnymi+tUofZDOwJoYbfCCpQJNJ+PmqZRq9Ipv7Bh4RRS6yAjkBOoEKguQGWCbOygRqB5I2rxCWrtI7Swb2EFymun15J0kBBICTRvRMvT99Qsd5ATqKyenndG1EqgeSNanZ5bt1E7aATQwg6Gk9MbUzcQLRNo3ohRxgmy7sKysIlhBTICOYEKgSqBZo3wVO24qEith0YAzW9PWIMygYRASqBZI/xwt/AIHW4BdJATqBCoEqgRaDwfkgSMkJQJJARSAhmBnECFDHklUCMQMWL+GekalAlEjMjEiEyMyMSI+aeCa1AlEDEiEyOEGCHEiPnnYGuQEogYIcQIIUYIMUIagcA6QpQYocQIJUYoMUKNQE4gYoQSI5QYocQII+sII+sII0YYMcKIEUaMMLKOMLKOMGKEESOcGOHECCfrCCfrCF8woskRku6moLgTqBCoEqgRaARQSQTKBBICKYGIEeVsIw4HVw/b3W57++30B8OHl39uHrabq931++HN8/77ybtPv+7/vnP4F78B","brillig_names":["directive_integer_quotient","directive_invert"]},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"app_payload","type":{"kind":"struct","path":"authwit::entrypoint::app::AppPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]},"visibility":"private"},{"name":"fee_payload","type":{"kind":"struct","path":"authwit::entrypoint::fee::FeePayload","fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_note_internal","get_key_validation_request","notify_nullified_note","notify_created_note","get_auth_witness","get_public_data_witness","lt_32_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","unsafe_rand","emit_encrypted_note_log","enqueue_public_function_call_internal","call_private_function_internal","debug_log_format","notify_set_min_revertible_side_effect_counter","directive_invert","directive_integer_quotient"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"EcdsaKCustomAccount::entrypoint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EcdsaKCustomAccount::entrypoint_parameters","fields":[{"name":"app_payload","type":{"kind":"struct","path":"authwit::entrypoint::app::AppPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]}},{"name":"fee_payload","type":{"kind":"struct","path":"authwit::entrypoint::fee::FeePayload","fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}]}},{"name":"cancellable","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"EcdsaKCustomAccount::verify_private_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EcdsaKCustomAccount::verify_private_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"EcdsaKCustomAccount::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EcdsaKCustomAccount::constructor_parameters","fields":[{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"hotp_secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b2f36494"},{"kind":"string","value":"HotpSecretNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}]}],"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"pending_shields","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]},{"kind":"struct","fields":[{"name":"public_key","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"hotp_secret","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}}]}]}},"file_map":{"2":{"source":"use crate::cmp::Ord;\nuse crate::convert::From;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = unsafe {\n            // Safety: These indices are asserted to be the sorted element indices via `find_index`\n            let sorted_index: [u32; N] = self.get_sorting_index(ordering);\n\n            for i in 0..N {\n                let pos = find_index(sorted_index, i);\n                assert(sorted_index[pos] == i);\n            }\n\n            sorted_index\n        };\n\n        // Sort the array using the indexes\n        let mut result = self;\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Convert a sequence of bytes as-is into a string.\n    /// This function performs no UTF-8 validation or similar.\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<let N: u32>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array.nr"},"5":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiller can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"22":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n","path":"std/embedded_curve_ops.nr"},"23":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"24":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"27":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"32":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"55":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"65":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            \n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7-i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7-i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n","path":"std/uint128.nr"},"67":{"source":"use dep::aztec::prelude::{AztecAddress, PrivateContext, NoteHeader, NoteInterface};\nuse dep::aztec::{\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app\n};\n\nglobal HOTP_SECRET_NOTE_LEN: Field = 3; \n// Fields: 1 for Hotp_secret + 1 for npk_m_hash\nglobal HOTP_SECRET_NOTE_BYTES_LEN: Field = 3 * 32 + 64; \n// 32 bytes for Hotp_secret + 32 bytes for npk_m_hash\n\n#[aztec(note)]\nstruct HotpSecretNote {\n    value: Field,\n    counter: u64,\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<HOTP_SECRET_NOTE_LEN, HOTP_SECRET_NOTE_BYTES_LEN> for HotpSecretNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl HotpSecretNote {\n    pub fn new(value: Field, counter: u64, npk_m_hash: Field) -> Self {\n\n        HotpSecretNote {\n            value,  \n            counter,\n            npk_m_hash, \n            header: NoteHeader::empty() \n        }\n    }\n}\n","path":"/home/john-play/Documents/joaolago1113/aztec/aztec-wallet-ui-starter/aztec_wallet/src/contracts/src/hotp_note.nr"},"68":{"source":"mod hotp_note;\n\ncontract EcdsaKCustomAccount {\n\n    use crate::hotp_note::HotpSecretNote;\n\n    use dep::aztec::prelude::{PrivateContext, PrivateImmutable, PrivateMutable};\n    use dep::aztec::{\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note_with_keys,\n        keys::getters::get_current_public_keys\n    };\n\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness\n    };\n\n    use dep::ecdsa_public_key_note::EcdsaPublicKeyNote;\n\n    #[aztec(storage)]\n    struct Storage {\n        public_key: PrivateImmutable<EcdsaPublicKeyNote>,\n        hotp_secret: PrivateMutable<HotpSecretNote>,\n    }\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(signing_pub_key_x: [u8; 32], signing_pub_key_y: [u8; 32], hotp_secret: [u8; 32]) {\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(&mut context, this);\n        // Not emitting outgoing for msg_sender here to not have to register keys for the contract through which we\n        // deploy this (typically MultiCallEntrypoint). I think it's ok here as I feel the outgoing here is not that\n        // important.\n\n        let hotp_secret: Field = bytes_le_to_field(hotp_secret);\n\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this_keys.npk_m.hash());\n        storage.public_key.initialize(&mut pub_key_note).emit(encode_and_encrypt_note_with_keys(&mut context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n\n        let mut hotp_note = HotpSecretNote::new(hotp_secret, 0, this_keys.npk_m.hash());\n        storage.hotp_secret.initialize(&mut hotp_note).emit(encode_and_encrypt_note_with_keys(&mut context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update account_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload, cancellable);\n    }\n\n    #[aztec(private)]\n    #[aztec(noinitcheck)]\n    #[aztec(view)]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // Load public key from storage\n        let storage = Storage::init(context);\n        let public_key = storage.public_key.get_note();\n        let mut hotp_secret = storage.hotp_secret.get_note().note;\n\n        // Load auth witness\n        let witness: [Field; 64] = unsafe {\n            get_auth_witness(outer_hash)\n        };\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify payload signature using Ethereum's signing scheme\n        // Note that noir expects the hash of the message/challenge as input to the ECDSA verification.\n        let outer_hash_bytes: [u8; 32] = outer_hash.to_be_bytes();\n        let hashed_message: [u8; 32] = std::hash::sha256(outer_hash_bytes);\n        let verification = std::ecdsa_secp256k1::verify_signature(public_key.x, public_key.y, signature, hashed_message);\n\n        assert(verification == true, \"Invalid ECDSA signature\");\n\n        // Extract HOTP code from the witness\n        let hotp_code = (witness[64] as u32) | ((witness[65] as u32) << 8) | ((witness[66] as u32) << 16) | ((witness[67] as u32) << 24);\n\n        let hotp_secret_bytes: [u8; 32] = hotp_secret.value.to_be_bytes();\n\n        let valid_code = generate_hotp_code(hotp_secret_bytes, hotp_secret.counter);\n        // Verify HOTP code\n        assert(hotp_code == valid_code, \"Invalid HOTP code\");\n\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(context, this);\n\n        hotp_secret.counter += 1;\n        storage.hotp_secret.replace(&mut hotp_secret).emit(encode_and_encrypt_note_with_keys( context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n\n        true\n    }\n\n    fn generate_hotp_code(key: [u8; 32], counter: u64) -> pub u32 {\n\n        let mut counter_bytes: [u8; 8] = [0; 8];\n\n        for i in 0..8 {\n            counter_bytes[i] = ((counter >> (56 - i * 8)) & 0xff) as u8;\n        }\n\n        let hmac_result = hmac_sha256(key, counter_bytes);\n        let offset = (hmac_result[31] & 0x0f) as u32;\n        let binary = ((hmac_result[offset] & 0x7f) as u32) << 24\n            | (hmac_result[offset + 1] as u32) << 16\n            | (hmac_result[offset + 2] as u32) << 8\n            | (hmac_result[offset + 3] as u32);\n\n        let mut result = binary % 1000000; \n        let mut field_value: Field = 0;\n        let mut base: Field = 1;\n\n        for _ in 0..6 {\n            field_value += (result % 10) as Field * base;\n            result = result / 10;\n            base *= 10; \n        }\n\n        field_value as u32\n    }\n\n\n    fn hmac_sha256(key: [u8; 32], data: [u8; 8]) -> pub [u8; 32] {\n\n        let mut key_copy: [u8; 64] = [0; 64];\n\n        for i in 0..32 {\n            key_copy[i] = key[i];\n        }\n\n        // Inner and outer padding constants for HMAC\n        let ipad: [u8; 64] = [0x36; 64];\n        let opad: [u8; 64] = [0x5c; 64];\n\n        // XOR key with ipad and opad\n        let mut i_key_pad: [u8; 64] = [0; 64];\n        let mut o_key_pad: [u8; 64] = [0; 64];\n\n        for i in 0..64 {\n            i_key_pad[i] = key_copy[i] ^ ipad[i];\n            o_key_pad[i] = key_copy[i] ^ opad[i];\n        }\n\n        // Perform inner hash (SHA-256)\n        let mut inner_data: [u8; 72] = [0; 72];\n        for i in 0..64 {\n            inner_data[i] = i_key_pad[i];\n        }\n        for i in 0..8 {\n            inner_data[i + 64] = data[i];\n        }\n        let inner_hash = std::hash::sha256(inner_data);\n\n        // Perform outer hash (SHA-256)\n        let mut outer_data: [u8; 96] = [0; 96];\n        for i in 0..64 {\n            outer_data[i] = o_key_pad[i];\n        }\n        for i in 0..32 {\n            outer_data[i + 64] = inner_hash[i];\n        }\n        let final_hash = std::hash::sha256(outer_data);\n\n        final_hash\n    }\n\n    fn bytes_le_to_field(bytes: [u8; 32]) -> pub Field {\n        let mut field_value: Field = 0;\n        let mut base: Field = 1;\n\n        for i in 0..32 {\n            field_value += bytes[i] as Field * base;\n            base *= 256;\n        }\n\n        field_value\n    }\n}","path":"/home/john-play/Documents/joaolago1113/aztec/aztec-wallet-ui-starter/aztec_wallet/src/contracts/src/main.nr"},"69":{"source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n * \n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\nunconstrained pub fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr"},"72":{"source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: Field = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.push(self.is_fee_payer as Field);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr"},"73":{"source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr"},"76":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash};\n\nstruct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n        if cancellable {\n            let tx_nullifier = poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\n            self.context.push_nullifier(tx_nullifier);\n        }\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/account.nr"},"77":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::poseidon2_hash_with_separator\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `keccak256(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        comptime {\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\")\n    },\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field\n) {\n    let result: Field = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"consume((Field),Field)\")\n    },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field\n) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\")\n    },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_reject_all(bool)\")\n    },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/auth.nr"},"82":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"83":{"source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"84":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let NB: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"86":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"87":{"source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr"},"89":{"source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"92":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"93":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"94":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"95":{"source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"99":{"source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"100":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"102":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"107":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr"},"108":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"118":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field\n}\n// docs:end:struct\n\nmod test;\n\nimpl<T, Context> Storage<T> for PrivateMutable<T, Context> {}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note, N, M> PrivateMutable<Note, &mut PrivateContext> where Note: NoteInterface<N, M> {\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note) -> NoteEmission<Note> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) -> NoteEmission<Note> {\n        let (prev_note, note_hash_for_read_request): (Note, Field) = get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(self.context, prev_note, note_hash_for_read_request);\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace(self, note: &mut Note) -> NoteEmission<Note> {\n        let is_initialized = unsafe {\n            check_nullifier_exists(self.compute_initialization_nullifier())\n        };\n\n        // check_nullifier_exists() is an unconstrained function - we can constrain a true value by providing an\n        // inclusion proof of the nullifier, but cannot constrain a false value since a non-inclusion proof would only\n        // be valid if done in public.\n        // Ultimately, this is not an issue ginen that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able to produce\n        //    an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious oracle\n        // (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce a proof.\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note(self) -> NoteEmission<Note> {\n        let mut (note, note_hash_for_read_request) = get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, &mut note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note, N, M> PrivateMutable<Note, UnconstrainedContext> where Note: NoteInterface<N, M> {\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr"},"125":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"127":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    point::Point, traits::Hash, hash::{sha256_to_field, poseidon2_hash_with_separator}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        poseidon2_hash_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x1cce4dbf69f14c44865919991ee1057922e34d7310ba237d71759aa422621ca9);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"128":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"136":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"137":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"139":{"source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N, M> {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32, let M: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"141":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"148":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"152":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::{raw_storage_read, storage_read}\n};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"162":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"165":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr"},"166":{"source":"use crate::keys::public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH};\nuse dep::protocol_types::traits::{Serialize, Deserialize};\n\n// This struct represents how public keys are stored in the key registry. We store not just the keys themselves but also\n// their hash, so that when reading in private we can perform a historical read for the hash and then show that it\n// corresponds to a preimage obtained from an unconstrained hint. We do store the keys keys regardless as they might be\n// needed during public execution, and since we need to broadcast and produce hints in some standardized way.\n// While it might seem odd to create a struct for what is effectively some data and a pure function called on it, state\n// variables rely on serializable structs in order to persist data to storage, so we must use this abstraction.\nstruct StoredKeys {\n    public_keys: PublicKeys,\n    hash: Field,\n}\n\nimpl StoredKeys {\n    // Instances of StoredKeys are expected to only be created by calling this function so that we guarantee that the\n    // hash field does indeed correspond to the hash of the keys. Ideally we'd forbid direct access to the struct, but \n    // Noir doesn't yet support private members.\n    fn new(public_keys: PublicKeys) -> Self {\n        Self { public_keys, hash: public_keys.hash().inner }\n    }\n}\n\n// Our serialization is the concatenation of the public keys serialization plush the hash, so we need one extra field.\nglobal STORED_KEYS_LENGTH: u32 =  PUBLIC_KEYS_LENGTH + 1;\n\nimpl Serialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn serialize(self) -> [Field; STORED_KEYS_LENGTH] {\n        // The code below is equivalent to:\n        // [ ...self.public_keys.serialize(), self.hash ]\n\n        let mut array = [0; STORED_KEYS_LENGTH];\n\n        let serialized_keys = self.public_keys.serialize();\n        for i in 0..serialized_keys.len() {\n            array[i] = serialized_keys[i];\n        }\n\n        array[PUBLIC_KEYS_LENGTH] = self.hash;\n\n        array\n    }\n}\n\nimpl Deserialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn deserialize(array: [Field; STORED_KEYS_LENGTH]) -> Self {\n        // The code below is equivalent to:\n        // Self { public_keys: PublicKeys::deserialize(array[0 : PUBLIC_KEYS_LENGTH]), hash: array[PUBLIC_KEYS_LENGTH] }\n\n        let mut serialized_keys = [0; PUBLIC_KEYS_LENGTH];\n        for i in 0..serialized_keys.len() {\n            serialized_keys[i] = array[i];\n        }\n\n        let hash = array[PUBLIC_KEYS_LENGTH];\n\n        Self { public_keys: PublicKeys::deserialize(serialized_keys), hash }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/stored_keys.nr"},"167":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\nuse crate::keys::constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\nstruct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\ntrait ToPoint {\n    fn to_point(self) -> Point;\n}\n\nstruct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nstruct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : NpkM { inner: Point::empty() },\n            ivpk_m : IvpkM { inner: Point::empty() },\n            ovpk_m : OvpkM { inner: Point::empty() },\n            tpk_m : TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m.inner == other.npk_m.inner ) &\n        ( self.ivpk_m.inner == other.ivpk_m.inner ) &\n        ( self.ovpk_m.inner == other.ovpk_m.inner ) &\n        ( self.tpk_m.inner == other.tpk_m.inner )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x:serialized[0], y:serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x:serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x:serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x:serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"170":{"source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}\n},\n    state_vars::{\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter,\n    public_mutable::PublicMutable, map::Map\n}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"181":{"source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\nstruct EncryptedLogIncomingBody<let M: u32> {\n    plaintext: [u8; M]\n}\n\nimpl<let M: u32> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, let N: u32>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, let MR: u32>(\n        event: T,\n        randomness: Field\n    ) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_hiding_point(_self: Self) -> Point {\n            crate::generators::Ga1\n        }\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_nullifier(_self: Self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n            1\n        }\n\n        fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        // 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        // the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        // implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        // 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime { EventSelector::from_signature(\"TestEvent(Field,Field,Field)\") }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 185, 29, 14, 152, 216, 130, 219, 151, 80, 185, 43, 223, 167, 8, 89, 189, 88, 188, 101, 137, 255, 136, 84, 252, 79, 18, 52, 3, 110, 54, 54, 206, 244, 209, 246, 226, 207, 247, 143, 253, 211, 75, 160, 224, 172, 41, 45, 7, 208, 137, 90, 56, 59, 4, 234, 48, 53, 23, 130, 230, 49, 249, 142, 243, 170, 72, 183, 242, 49, 124, 46, 52, 198, 75, 55, 102, 56, 89, 254, 67, 59, 157, 249, 120, 184, 67, 154, 16, 148, 227, 93, 37, 120, 199, 93, 166, 80, 127, 173, 52, 80, 135, 87, 1, 168, 164, 51, 48, 126, 120, 47, 102, 211, 227, 234, 170, 208, 99, 111, 198, 170, 226, 156, 244, 241, 174, 206, 30\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr"},"182":{"source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash_with_separator\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr"},"183":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let NB: u32, let MB: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        for i in 0..encrypted_note_log_from_typescript.len() {\n            assert_eq(log[i], encrypted_note_log_from_typescript[i]);\n        }\n        assert_eq(encrypted_note_log_from_typescript.len(), log.len());\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"184":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"186":{"source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_current_public_keys, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL\n};\n\nunconstrained fn compute_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    )\n}\n\nfn compute<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    inner_compute: fn(AztecAddress, Field, Field, OvpkM, IvpkM, AztecAddress, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute_unconstrained);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"190":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"203":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"204":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"222":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"223":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"224":{"source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"227":{"source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"228":{"source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"231":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"235":{"source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"237":{"source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"238":{"source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"241":{"source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"267":{"source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"319":{"source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"326":{"source":"use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext};\n\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n// ECDSA_PUBLIC_KEY_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN: Field = 5 * 32 + 64;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    // We store the npk_m_hash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<ECDSA_PUBLIC_KEY_NOTE_LEN, ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN> for EcdsaPublicKeyNote {\n    // Cannot use the automatic serialization since x and y don't fit. Serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = npk_m_hash\n    fn serialize_content(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n\n        [x, last_x, y, last_y, self.npk_m_hash]\n    }\n\n    // Cannot use the automatic deserialization for the aforementioned reasons\n    fn deserialize_content(serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n        let mut x: [u8; 32] = [0; 32];\n        let mut y: [u8; 32] = [0; 32];\n\n        let part_x:[u8; 32] = serialized_note[0].to_be_bytes();\n        for i in 0..31 {\n            x[i] = part_x[i + 1];\n        }\n        x[31] = serialized_note[1].to_be_bytes::<32>()[31];\n\n        let part_y:[u8; 32] = serialized_note[2].to_be_bytes();\n        for i in 0..31 {\n            y[i] = part_y[i + 1];\n        }\n        y[31] = serialized_note[3].to_be_bytes::<32>()[31];\n\n        EcdsaPublicKeyNote { x, y, npk_m_hash: serialized_note[4], header: NoteHeader::empty() }\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], npk_m_hash: Field) -> Self {\n        EcdsaPublicKeyNote { x, y, npk_m_hash, header: NoteHeader::empty() }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-contracts/contracts/ecdsa_public_key_note/src/lib.nr"},"328":{"source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_nullify},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        self.compute_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr"},"329":{"source":"use dep::aztec::{\n    generators::{Ga1 as G_amt, Ga2 as G_npk, Ga3 as G_rnd, G_slot},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{\n    constants::GENERATOR_INDEX__NOTE_NULLIFIER, point::{Point, POINT_LENGTH}, scalar::Scalar,\n    hash::poseidon2_hash_with_separator, traits::Serialize\n},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\nuse dep::std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:TokenNote\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n\n    // docs:start:compute_note_hiding_point\n    fn compute_note_hiding_point(self) -> Point {\n        // We use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        let amount_scalar = from_field_unsafe(self.amount.to_integer());\n        let npk_m_hash_scalar = from_field_unsafe(self.npk_m_hash);\n        let randomness_scalar = from_field_unsafe(self.randomness);\n        let slot_scalar = from_field_unsafe(self.header.storage_slot);\n        // We compute the note hiding point as:\n        //     `G_amt * amount + G_npk * npk_m_hash + G_rnd * randomness + G_slot * slot`\n        // instead of using pedersen or poseidon2 because it allows us to privately add and subtract from amount\n        // in public by leveraging homomorphism.\n        multi_scalar_mul(\n            [G_amt, G_npk, G_rnd, G_slot],\n            [amount_scalar, npk_m_hash_scalar, randomness_scalar, slot_scalar]\n        )\n    }\n    // docs:end:compute_note_hiding_point\n}\n\nimpl TokenNote {\n    // TODO: Merge this func with `compute_note_hiding_point`. I (benesjan) didn't do it in the initial PR to not have\n    // to modify macros and all the related funcs in it.\n    fn to_note_hiding_point(self) -> TokenNoteHidingPoint {\n        TokenNoteHidingPoint::new(self.compute_note_hiding_point())\n    }\n}\n\nstruct TokenNoteHidingPoint {\n  inner: Point\n}\n\nimpl TokenNoteHidingPoint {\n    fn new(point: Point) -> Self {\n        Self { inner: point }\n    }\n\n    fn add_amount(&mut self, amount: U128) {\n        self.inner = multi_scalar_mul([G_amt], [from_field_unsafe(amount.to_integer())]) + self.inner;\n    }\n\n    fn add_npk_m_hash(&mut self, npk_m_hash: Field) {\n        self.inner = multi_scalar_mul([G_npk], [from_field_unsafe(npk_m_hash)]) + self.inner;\n    }\n\n    fn add_randomness(&mut self, randomness: Field) {\n        self.inner = multi_scalar_mul([G_rnd], [from_field_unsafe(randomness)]) + self.inner;\n    }\n\n    fn add_slot(&mut self, slot: Field) {\n        self.inner = multi_scalar_mul([G_slot], [from_field_unsafe(slot)]) + self.inner;\n    }\n\n    fn finalize(self) -> Field {\n        self.inner.x\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TokenNoteHidingPoint {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) &\n        (self.npk_m_hash == other.npk_m_hash) &\n        (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr"}}}