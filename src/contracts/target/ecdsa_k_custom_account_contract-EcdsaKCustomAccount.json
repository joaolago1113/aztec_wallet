{"transpiled":true,"noir_version":"0.33.0+8ac81b15cd2a3b57493bfbfe444086deac8f3dc8","name":"EcdsaKCustomAccount","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"7P3RsuvK0p0Hvsu51gWqkCgU/CodHQ65LTsUoZA6LPWVwu/ecy0ugpwLBGpunyIzs/K7cfy2cbgqv7Ena4wBsPA///W//6f/7f/3f/6v//m//h//7b//63/5f/3Pf/2X//b/+Y//4z//t//69f/2P//v//Cv/+3/+s//5b/85//zf33+//yv6df/Y55+X//f/7//8b/++n/97//jP/5f/+Nf/8syrf/hX//pv/7vX//Xunz97/+P//xf/tO//pdS/+//93/415z+6f9ikVf/i7Xe/xe1bH//L5Z//L+or/4XadqWP/+TlOr89/9m++f/m5Jf/m8k7f8b2dLf/5v5/8H/prz836wi9//NKn8zKOv/g/9N/ef/m/pSz7SkdP/flLo+/2/+w+Hi8nX1n4tL2h6Q01xeXP1F6o5K0vq4Osvv5Sy2llNsLWe1tZxqazmbqeVsk63lJFvLybaWM9tajq1v5c3Wt/Jm61t5s/WtvNn6Vt5sfSunydbXcpo+/c2zrLu7rw83mPN8W86n/7bKNN0vnspxOaut5VRby9lMLSf1+NOan5YjjeV8Za39kx8fPOfttpxkazn508uZ8+OTvy3neG0u+b72XBZ5kvbVOmQu93XIXPNj0curi8t8v/b5++b27ZdmoByhCFCOUBagHKEUoByhrONAkancB5Ukz1B+T1rDTLoNNKns//HKcx97mzRPI02a90mXepg0hZn049av3peTp+ngRPNsazny4eV85ZX7ciQdl7PYWs57t/jf/8T6/n+ivv+f2N7+T8zT+/+J9P5/Ir//n5jf/0/I+/+J5f3/xPv/uuf3/3XP7//rnt//1y3v/+uW9/91y/v/uuX9f93y/r9uef9ft7z/r1ve/9ct7//rlvf/dS8d/rrzo/7OaWnYusZ9nyUZW082tp7Z2HrE2HoWY+spxtazGltPh2/ROdf7euanluEkVk7r3mCk6XuwfLH6peyrX+r0d4OxbMZXv1ytvkwfX/1eZn+tXlqrn/anR2V6+uy8vrh43XVan6vv+eV/kXVv1NP1pfO03kuIefpeqf/j/9JLgvYHaWdof5D2DO0P0hZof5D2Au3nS38zKTGZPO7Fl3xgssLkwKTC5MBkg8nfTNagSWS7B+nnX8fdmQTNC5dMgrr6SyZBvfclEwnJZNk/dknlwCSmj71mEtPHXjOJ6WMvmdSY/mSZ7z+RX+Yjk5j7TpH778RKmQ5MYu4710yM7ztJ0qP92Z6Z/F698R0izcvV6o1/l6e07qt/uj91X73x9qCxeuM5/3r128d3vDTXffVr1koVOh3zlqD9QdoZ2h+kPUP7g7QF2h+kvUD7b7+/lZhMru5vbCtMDkwqTA5MNpj8xSRPQZPIxf2NPAXNC5dMgrr6SyZBvfclEwnJ5Or+Rp5i+thrJjF97DWTmD72kkmK6U+u7g3mFHPfuboPlnscXzYcE+P7zuW9wZyM7xCX9wZzMv5dfnl/Kifj7UFj9cZz/vXq88d3vLyfgpazTFqpQqVjzjlB+4O0M7Q/SHuG9gdpC7Q/SHuB9t9+P5eYTK7ub+QVJgcmFSYHJhtM/mYyB00iV/c35qB54ZJJUFd/ySSo975kIiGZXN7fmGP62GsmMX3sNZOYPvaSicT0J5f3BiXmvnN5H6zHub7DMTG+71zfGxTjO8T1vUEx/l1+fX9KjLcHjdUbz/nXq18+v+OV/c7mnJLSN5lSx7wkaH+Qdob2B2nP0P4gbYH2B2kv0P7b7y8lJpOr+xvLCpMDkwqTA5MNJn8zKUGTyNX9jRI0L1wyCerqL5kE9d6XTCQkk8v7GyWmj71mEtPHXjOJ6WMvmawx/cnlvcE15r5zeR/s82dZO2BifN+5vje4Gt8hru8Nrsa/y6/vT63G24PG6o3n/OvVf/4U7ZL3E1HXtXVnc3781c7paSE531afXK8+u1797Hr14nr1i+vVF9erX12vvrpe/eZ59ZvrvXZzvddurvfazfVe+/nzj7uu3vVeu7neazfXe+3meq/dPO+18+R5r50nz3vtPHnea+fJ8147T5732nnyvNfOk+e9dp4877Xz5HmvnSfXe21yvdcm13ttcr3XJtd77edPj+26etd7bXK91ybXe21yvdcm13ttdr3XZtd7bXa912bXe+3nz8nsunrXe212vddm13ttdr3XZtd77ex6r51d77Wz6712dr3Xfv7Eva6rd73Xzq732tn1Xju73mtn13utuN5rxfVeK8b32rw/wf4VYtNh9cb32sbqe+y12/3iIrI0Vp+26X5kStrWx9W/13a8ekrz/fe3X//3On27/vcAi/cBivcBVu8DVO8DbM4H6HJCoOoAyfsA2fsAs/cBvO/Ei/edeDG/E6/lMcC3H0u/vL4s+6eXp/Pm5pvzW8xv212nNb/Hd53WvCHoOW0x7x66TmveanSd1rwv6TqteRPTdVoJNa15e9R12lBeqoTyUiWUlyqhvNQaykutobzUGspLraG8VJcT4fxMG8pLraG81BrKS62hvNQaykvVUF6qhvJSNZSXqqG8VJez+fxMG8pL1VBeqobyUjWUu9hCuYstlLvYQrmLLZS76HIaoZ9pQ7mLLZS72Kzvt/npga8s+dv1XwPIZP1rNm+PAeZJ/q3rfw9s/Zu2+8DWv2y7D2z9+7b7wNa/crsPbD3TdR/YekXefWDz+2rngZP1KNt9YOtptvvA0ZxWGsxprXJ/Rd9XhMh/JQHpchKhn2kH81iNaQczWHW5/x461bU8T/tqKdt9KXmaygHNYFasJ5rBTFtPNIPZu45o8mBGsCeawSxjTzSDmcueaAazoT3RCGjO0AxmcHuiCexrar5/dM3yN5g58v70dafp8dmH/2bmyPtTA03k/amBJvL+1EATeX9qoInc1jTQRG5rGmgitzUNNJHbmjTtn51k+xuNRG5rGmgiu+EGmshuuIEmshtuoBHQnKGJ7IYbaCK74QaayG64gSaMG/497WAG97q/NX/ScN9pB7OhjWkHc5aNaQczi41pJdS0g1m6xrSDubTGtIMZr8a0g3mpxrShvJT5c5f7TtvBS8l6f9K2LFIa0+ZpvS8/59R+JL1xvL30OEpZd4DZ+wDifYDF+wDF+wCr9wGq9wE25wP0OOJXdwDvO/HqfSdeze/EHc+5kB5n6zqa1vwe33Va84ag67Tm3UPXac1bja7TmvclPaet5k1M12nNO56u05q3R12nDeWlepyt62jaUF6qhvJSNZSXqqG8VA3lpbZQXmoL5aW2UF5qC+Wlepwk7GjaUF5qC+WltlBeagvlpbZIXmqZInmpZYrkpZYpkpdapkheapkk1LSR3MUyRXIXyxTJXSxTKHeRQrmLFMpdpFDuIoVyF8n6ftt4U86SrH/Ndj6/fcnWv2m7D2z9y7b7wNa/b7sPbP0rt/vAEm1g6xV594HN76u9B7YeZbsPbD3Ndh84mtOaB3Nal29TWebBbFZj2sE8VmPawQxWv2PTlx6HGY+KZjDT1hPNYPauJ5rBjGBPNINZxp5oBjOXHdHIYDa0J5rBPGtPNIMZ3J5oAvuaqzflLBJ5f7o8bH+RyPvTNZol8v7UQBN5f2qgibw/NdBEbmsaaAQ0Z2gitzUNNJHbmssT5ZclclvTQBPZDTfQRHbD12hKZDfcQBPZDTfQRHbDDTSR3XADjYDmDE0YN/x72sEM7nV/a/6k4b7TDmZDG9MO5iyvpzV/4HHfaQfzf41pB7N0jWkHc2mNaSXUtIN5qca0obyU+XOXu0775vNbf/8T8/v/CXn/P7G8/58o7/8n1vf/E/X9/8T29n+ixzmLZbr/LLkUkca3QPpa0eOjn59X315c/eUclz9Xf21GzXdxTY+vjJSn9vfRdv/GSFNqrES+ioU/V8tSH59dlhvHBMcfclwuOebAHEt6cJQWx2lfiUxLfeyO64uL1/2/3fXbsQGvPjfV+8fO6frSeVrvW+48PX+uvPzch+7p6TSCr4t/6z6je0jdBd1D6r6ge0jdC7qH1H1Fd5u6/1anoo6uOvsipOSDOhvqmFWnTJEbFPvqRO5l7KtD26Oszr5k2dJBHToZy+oI6hhWh37Dsjq0ELrqLI8BUzmoQ1dgWR26Asvq0BUYVieRd5TVme9PwyzzUR08m646DxxfHA/q4Nksq4Nn+6E6SfZCLK3bszq/OeKufspxXq444oN+yjGtO8en5/H+cMzc3ejDkfsQfTgGdtBprjvHtbWSsZ4fKTnwvYjQugu6h9Q9cBYPrXvglB9a98D9gW3df6sTuJWwoc7VU1Q5cNdhX505cIPiQJ3AvYwDdWh7lNW5eopqppOxrI6gjmF16Dcsq0MLoavO5VNUM12BZXXoCiyrQ1dgWB0h7yirc/V8qODZdNW5fAJR8GyW1cGz/VCd6+dDBXf1U46Xz4cKPuinHC+fx1u4u9GHI/ch+nAM7KDzvu6cZdLq1XSeH1kC34sIrbuge0jdA2fx0LoHTvmhdQ/cH9jW/bc6gVsJG+pcPUW1BO467KtTAjcoDtQJ3Ms4UIe2R1mdq6eoCp2MZXUEdQyrQ79hWR1aCF11Lp+iKnQFltWhK7CsDl2BYXVW8o6yOlfPh654Nl11Lp9AXPFsltXBs/1QnevnQ1fc1U85Xj4fuuKDfsrx8nm8yt2NPhy5D9GHY2QHXfbnbOeUtHo1nedHauR7EZF1F3QPqXvkLB5Z98gpP7LukfsD07r/VidyK2FCnaunqGrkrsO8OlvkBsW+OpF7Gfvq0PYoq3P1FNVGJ2NZHUEdw+rQb1hWhxZCV53Lp6g2ugLL6tAVWFaHrsCuOutE3lFW5+L50HXCs+mqc/UE4jrh2Syrg2f7oTqXz4euE+7qpxyvng9dJ3zQTzlePY+3Ju5u9OHIfYg+HAM76JLvQ+Z1bT1nOz/2mTk9Icn5xjFwt9+Vo8CxC8fA2asrx8ApqSvHwHmmK8fAeaYrx8B5pifHHDjPdOUYOM905Uie6cORPNOHo8CxC0fyTB+O5Jk+HMkzfTiSZ/pwJM904TiTZ/pwJM/04Uie6cORPNOHo8CxC0fyTB+O5Jk+HMkzfTiSZ/pwJM904SjkmT4cyTN9OJJn+nAkz/ThKHDswpE804cjeaYPR/JMH47kmT4cyTNdOC7kmT4cyTN9OJJn+nAkz/ThKHDswpE804cjeaYPR/JMH47kmT4cyTNdOBbyTB+O5Jk+HMkzfTiSZ/pwFDh24Uie6cORPNOHI3mmD0fyzA855v0cpDk/v7HnD0fyTBeO61B5Js87xyz529W/hx0qdLSGHSoZtIYdyi7lej+lN825tK7epvtb6tK2Pj779x/7i6+a9CA5pXX6dv1vlEM5Jl2UQ5kmXZRD+SZdlENZJ1WUdSz3pIpyLG+minIs56eKcqhaWBelgLIXStJON5SknW4oSTs/RrmWB8pv7x15eX1Z9k8vT6+Wn28V3lgvL3fEnRylwn2sF4474k5C0+FOnNPhTvbT4S5wV+FOqtThTgTV4U5e1eFOXtXhTl7V4F4n8qoOd/KqDnfyqg538qoOd4G7Cnfyqg538qoOd/KqDnfyqg538qoK90Re1eFOXtXhTl7V4U5e1eEucFfhTl7V4U5e1eFOXtXhTl5V4Z7JTTrcyU063MlNOtzJTTrcBe4q3MlNOtzJTTrcyU0q3Gf8+0+5P53GNT0fx/Xnp8B1rLe3vxfl4+i/aZ7k37r+N3oBvRZ6jIoaeryKGnrsihp6ml419DycpIVe8Olq6Kna1dDTtquhJ82qoRfQvwf9Kvta1pL/7sKEKKvDnRyrw50Q+ybuddnnrGt55v5qKdt9KXmaykEk4q4DkQjG9kVaiNAORCJsOxCJWO5AJAK8A5EEkeyLRC/gQCRKBAcikZMMiFTz/aNrlr8lKng7C39HU54fn334Oyp4OwciCSLZFwlv50AkvJ0Dkbib5EAk7iY5EImUZF+klbtJFkRK0/7ZSbaDSNxNciASjYMDkWgcHIgkiGRfJBoHByLRODgQicbBgUg0Dg5EonH4uEi/uFdKhDdxv34OodIL6HAn6utwJ73rcBe4q3AnY+twJzbrcCcJ63An3OpwJ6+qcN/Iqzrcyas63AXu7+He7fcKG1bfgERbXfaPno4aYZPsa4Slsq7RNmG/7GuEVbOvEbch7GvELQv7GgkamdeIfGRfI26bGNDo+gc/28Q9Fgci0TQ4EImqwb5Iia7BgUiUDQ5Eom1wIBJ1gwORBJHsi0Th4EAkGgcTIsnjs5f5IBKNgwORaBwciETjYF+kTOPgQCQaBwci0ThYs+AvRKJxsJ+TsiCSfZFoHByIROPgQCQaBwci0Tg4EInGwb5IM42DA5FoHByIROPgQCQaBwciCSLZF4nGwYFINA4ORKJxcCASjYN9kYQw60AkwqwDkQizDkQizDoQCQv+Y5HKvvApP2H/df1vlBjlbiixs91QcpurF8oF/94NJS67G0q8cDeUONZuKAWUvVByK6MbStJON5SknW4oSTvdUJJ2eqEspJ0fo1weFVsupXV9eXx6SU9X53oDTzZSAk+SUgJP7lICL4DXAU+mUwJPAlQCT15UAk+6VAJPFtUBv5JclcCTXJXAk1yVwJNclcAL4HXAk1yVwJNclcCTXJXAk1yVwJNc3wQ+p30teX6e8zf3SnDV4U5u1eFObNXhTmp9F3cpO/eyHbhj4d/EXeqOUOrxv3ccvA53DPzbDPy+lvLrir+4499VuG/4dx3u+Hcd7vh3He74dx3uAncV7txz0uFOXtXhTl7V4U5e1eFOXtXgnqaJwPou8I/LyzofwZNYlcATWZXAk1mVwAvgdcCTWpXAE1uVwJNblcATXHXAJwLUm8DP2365pG9PFrxayn5x/vr2P6pE2vKgEtHMg0rkOA8qCSo5UImE6EEl4qQHlcieHlQiqHpQifuxDlTK5CUDKtV8f3VTzXLUCIdn4S/p8h1Yv/45VHKgEg7Pg0o4PA8q4fAcqDRzd8mDStxd8qASacmDStxdsqBSmvb3ESfZjioJKjlQie7Bg0p0Dx5UonvwoBLdgweV6B4cqCR0Dx5UonvwoBLdw5tUklx3leT4+2ahTlACL4DXAU/oVwJPjlcCTzRXAk/aVgJPgNYBv5CJ3wX+6hzpL/DEXCXwJFcl8CRXJfACeB3wJFcl8CRXJfAkVyXwJFcd8IUA9SbwjXOKCgFKCTwBSgk8AUoJvABeBzwBSgk8AUoJPAFKCTwBSgk8t/50wK8kVyXwJFcl8CRXJfAkVyXwAngd8CRXJfAkVyXwJFcl8CTXHuBvLAmj3VhW8mU/lkTGfiwFlu/ZqPodMluxzwY02uqyf/T0QiSMhwORcDT2RdqwSg5EwoM5EImK34FI3A5wIJIgkn2RyEkOROKWhAGRWuc0b9y/8KASnYMHlSgd7Kv0tVehkgOVqB08qETv4EEligcPKgkqOVCJ6sGDSnQPJlSS/TTtaZmPKtE9eFCJ7sGDSnQPDlRKdA8eVKJ78KAS3YM1J/5KJboHB3kpCSo5UInuwYNKdA8eVKJ78KAS3YMHlegeHKiU6R48qET34EElugcPKtE9eFBJUMmBSnQPHlSie/CgEt2DB5XoHhyoNJNqPahEqvWgEqnWg0qkWg8qWXcP5b6Qpc5z87Ofli3Tt6tv01q/A9B1WrHuOfpOa/375p9Mm7++N/5cnfPaWkme1mm/Oknz++bLje7fCWmdvl1/Yymw7MbSeiPliaX13sgTS+vtjieWI7kobZYjeTRllstIDlCbpfVuyBNL6w2OJ5bknn4sBZbdWJJ7fsxyLQ+WdWtdf/3GmbQQkpTAk6iUwBO/lMCT1XTAF4KdEnhSoBJ4IqMSePKlEngBvA54kqsSeJKrEniSqxJ4kqsSeJKrDviV5KoEnuSqBJ7kqgSe5KoEXgCvA57kqgSe5KoEnuSqBJ7kqgSe5KoDvpJclcCTXJXAk1yVwJNclcAL4HXAk1yVwJNclcAToJTAE6B0wG8EKCXwBCgl8AQoJfAEKCXwAngd8AQoJfD4+J+Cz0+/Gc6Sv13/i2WeMCo/Zrk9WM7Tv3f9jT1eRY89dkWPvcBejT2mRY89xa8ee55a0mOPX9djT/Wuxj7RvuuxJ9fqsSfXvon9Kvs7EdaS/y7GciLUKoEXwOuAJ86+CXxd9jnrWp7Bv7h429+PkqepHFUi+HpQiYjsQSXCtAeViN0OVMoEdA8qEeU9qETo96ASDYEHlQSVHKhEXjKgUs33j65ZDhqZfwl4jL+k61fiZvMvAUelXyrh8DyohMPzoJKgkgOVuLvkQSXuLnlQibTkQSXuLllQKU37ZyfZjipxd8mBSkL34EElugcPKtE9eFCJ7sGDSoJKDlSie/CgEt2DB5XoHj6u0g08dcKbwDeeTRAaAh3wC6FfCTw5Xgk80VwJPGlbCbwAXgc8mVgJPDFXCTzJVQk8yVUJPMlVB3zBxxuoMq9/zlCw/AY02uqyf/T0QiTMkgORMFYORMKEORAJw2ZfpJXbEg5E4haGA5GISQ5EIic5EEkQSV+k1i+CVu65eFCJzsGDSpQOHlSidfCgErWDA5UqvYMHlSgePKhE8+BBJaoHDyoJKllQSR6fvcxHlegePKhE9+BBJboHDyrRPXhQie7BgUob3YM1J/5KJboHB3lpo3vwoBLdgweVBJUcqET34EElugcPKtE9eFCJ7sGDSnQP9lWaJ7oHDyrRPXhQie7Bg0p0Dx5UElRyoBLdgweV6B48qESq9aASqdaBSolU60ElUq0HlQSVfqpS2Rc+5Sfuv66/scQv92OJq+3Hkvte/Vji4/uxxG13Y5nxxP1Y4lz7seSuST+W3Nvox1Jg2Y0luacfS3JPP5bknn4syT0/Zrk8GrdcSuv6Mu2Xl/R0da5/yJOSlMjPZCot8iQwLfLkNS3ypDst8gJ5JfIkRy3y5Ewt8qRSLfJkWC3yZFgl8kKG1SJPhtUiT4bVIk+G1SIvkFciT4bVIk+G1SJPhn0T+a+PvF+e5+c5/4AnwiqBJ8HqgF8IsErgya/vAi9lB1+2I3gB/HvAS90RSn3xXzxOXgk8Rv5tRn7/ji+/rvgbPD5eCTw+Xgk8Pl4HfMHHK4HHxyuB5zaUEnjuQimBF8DrgCe5KoEnuSqBJ7kqgSe5vgv84/KyzkfwJFcd8CvJVQk8yVUJPMlVCTzJVQm8AF4HPMlVCTzJVQk8AepN4Odtv1zSt6cMXly87RfnaSpHlUhbDlSqRDMPKpHjPKhE6POgEgnRg0qCSg5UInt6UImg6kEl7sc6UGkjLxlQqeb7SmqWo0Y4PAt/SY33Zm2CSg5UwuF5UAmH50ElHJ4Hlbi75EEl7i7ZV0km0pIHlbi7ZEGlNO3vME6yHVXi7pIHlegePKgkqORAJboHDyrRPXhQie7Bg0p0Dx5UontwoFKie3iTSpLrrpKkI3jqBCXwNARK4An9SuAF8DrgieZK4EnbSuAJ0ErgycTvAn95prQkYq4O+ExyVQJPclUCT3JVAk9yVQIvgNcBT3JVAk9yVQJPgHoT+OtziiQToHTAzwQoJfAEKCXwBCgl8AQoJfACeB3wBCgl8AQoJfDc+lMCT3JVAk9y1QEvJFcl8CRXJfAkVyXwJFcl8AJ4HfAkVyXwJNce4G8sCaP9WJIv+7EkMnZjueCJ37RRdTtkVhbsswGNtrrsHz29EAnj4UAkHI0DkbBKDkTCg9kXqVDxOxCJ2wEORCImORCJnORAJEEkfZFa5zQX7l94UInOwYNKlA4eVKJ18KAStYMDlVZ6Bw8qUTx4UInmwYNKVA8eVBJUsqCS7KdpT8vxEb6V7sGDSnQPHlSie/CgEt2DB5XoHhyoVOkerDnxVyrRPTjIS5XuwYNKdA8eVBJUcqAS3YMHlegePKhE9+BBJboHDyrRPThQaaN78KAS3YMHlegePKhE9+BBJUElByrRPXhQie7Bg0qkWg8qkWrtq7RMpFoPKpFqPagkA6mUyiL7Z6/p29W3aUe6A5Bq3aXdZGtdvU2Pq9el+d9kmh9PNaV1+nb9jeVIjkab5Ui+Q5llGskdaLMcaQ/XZjlSf6zNcqSWV5ulwLIby5EaU22WI/Wa2izJPf1Yknv6sST3/JjlWh4s69a6/vqtJEsmJCmBJ1EpgSd+KYEnqymBF8DrgCcFKoEnMiqBJ18qgSeMKoEnueqAn0muSuBJrkrgSa5K4EmuSuAF8DrgSa5K4EmuSuBJrkrgSa5K4EmuOuCF5KoEnuSqBJ7kqgSe5KoEXgCvA57kqgSe5KoEnuSqBJ7kqgSe5KoDfiG5KoEnQCmBJ0ApgRfA64AnQCmBJ0ApgSdAKYEnQCmBJ0DpgC/4+J+Cz0+/Gc6Sv11/Y4lR+THL7cFynuTfuv7GHq+ixx67oscex6LHHtOixn6l+NVjz1NLeuzx63rsqd712Avs1diTa/XYk2vfxH6V/UT2teRDMbYSapXAk2iVwBNn3wS+LvucdS3P4F8tZX+HRp6mclCpEnw9qERE9qASYdqDSsRuDyoJKjlQiSjvQSVCvweVaAg8qESd4ECljbxkQKWa7x9dsxw1EjQy8JfUeG3qhsPzoBIOz4NKODwPKuHwPKjE3SX7KpWJu0seVCIteVCJu0sWVErT/tnpaeG7Stxd8qCSoJIDlegePKhE9+BBJboHDyrRPXhQie7BgUqJ7sGDSnQPH1fpBp464U3gr59NKImGQAm8AF4HPDleCTzRXAk8aVsJPAFaCTyZWAd8JuYqgSe5KoEnuSqBJ7kqgZeRwG/lMew8Na7O03onmXNqn4CTnk7VTev07foby6HCqDLLofKlMsuhIqMyy6FSoDLLoYKdLst5qKymzHKo+KXMcqhEpcxyqJCkzFJg2Y0luacfS3LPj1n2fL1QmQlJSuBJVErgiV864IWspgSeYKcEnhSoBJ7IqAReAK8DnjCqBJ7kqgSe5KoEnuSqBJ7kqgN+IbkqgSe5KoEnuSqBJ7kqgRfA64AnuSqBJ7kqgSe5KoEnuSqBJ7nqgC8kVyXwJFcl8CRXJfAkVyXwAngd8CRXJfAkVyXwJFcl8AQoHfArAUoJPAFKCTwBSgk8AUoJvABeBzwBSgk8AUoJPD7+p+Dz02+Gs+Rv1/9mWTEqP2b5zw5Pu7z+xh6vosdeYK/GHseixx7Tosee4lePPU8t6bHHr6ux36je9djTvuuxJ9fqsSfXvon9KnK/fC35UIxtAngd8CRaJfDE2TeB/0dvU228KGIj+HpQiYjsQSXCtH2V1onY7UElAroHlYjyHlQi9HtQSVDJgUrUCR5UIi8ZUKnm+0fXLAeNEg7Pwl/SlOfHZx//khIOz4NKODwPKgkqOVAJh+dBJe4ueVCJu0seVCIteVCJu0sWVErT/tlJtoNKmbtLHlSie/CgEt2DB5XoHjyoJKjkQCW6Bw8q0T14UInuwYNKdA8fV+kGnjrhTeAbzybMNARK4An9SuDJ8UrgieZK4AXwOuAJ0ErgycRK4Im5SuBJrkrgSa464IXkqgQeH2+gyrz+OYMIGulrtNVl/+jphUiYJQciYawciIQJsy/SgmFzIBK3JRyIxC0MByIRkxyIJIhkXyRuoxgQqfWLoIV7Lh5UonPwoBKlgweVaB0cqFSoHTyoRO/gQSWKBw8q0Tx4UElQyYFKdA8mVJLHZy/zUSW6Bw8q0T14UInuwYNKdA8OVFrpHjyoRPdgzYm/UonuwUFeWukePKgkqORAJboHDyrRPXhQie7Bg0p0Dx5UontwoFKle/CgEt2DB5XoHjyoRPfgQSVBJQcq0T14UInuwYNKdA8eVCLVOlBpI9V6UIlU60ElUq0HlXDiP1ap7Auf8hP3X9ffWOKX+7HE1fZjyX2vfizx8b1Y1gm33Y8lnrgfS5xrP5bcNenHUmDZjSW5px9Lck8/luSefizJPf1Yknt+zHJ5NG65lNb1ZdovL+np6lxv5BMpSYs8mUqLPAlMizx5TYu8QF6JPFlQizzJUYs8OVOLPKlUizwZVol8JsNqkSfDapEnw2qRJ8NqkRfIK5Enw2qRJ8NqkSfDapEnw76J/NdH3i/P8/Ocf8ATYXXAzyRYJfAEWCXw5Nd3gZeygy/bETxW/k3gpe4Ipb74Lx4nrwQeI/82I79/x5dfV/wNHh+vBB4frwNe8PFK4PHxSuDx8UrguQ2lBF4ArwOe5KoEnuSqBJ7kqgSe5KoEnuT6LvCPy8t6eENZXUiuSuBJrkrgSa5K4EmuSuAF8DrgSa5K4EmuSuBJrkrgCVBvAj9v++WSvj1l8Grh22PhUzmoVEhbHlQimnlQiRznQSVCnweVBJUcqESc9KAS2dODSgRVDypxP9aBSit5yYBKNd9XUrMcNRI0MvCXdP3erLri8DyohMPzoBIOz4NKODwPKnF3yYFKlbtLHlQiLXlQibtLFlRK0/4O4yTHQy0qd5c8qCSo5EAlugcPKtE9eFCJ7sGDSnQPHlSie3Cg0kb34EEluoc3qSS57irJ8ffNG3WCEngaAiXwAngd8OR4JfBEcyXwpG0l8ARoJfBk4neBvzxTepuIuUrgSa5K4EmuSuBJrkrgBfA64EmuSuBJrkrgSa5K4AlQbwJ/fU7RlghQSuAJUErgCVBK4AlQSuAF8DrgCVBK4AlQSuAJUErgufWnBJ7kqgM+k1yVwJNclcCTXJXAk1yVwAvgdcCTXJXAk1yVwJNce4C/sSSM9mNJvuzGciYy9mOJJ37TRtXtkNltFjTS12iry/7R0wuRMB4ORMLROBAJq2RfJMGDORCJit+BSNwOcCASMcmBSIJI9kXiloQBkRrnNG/C/QsPKtE5eFCJ0sGDSrQODlRaqB08qETv4EEligcPKtE8eFBJUMmBSnQPJlSS/TTtaTk+wrfQPXhQie7Bg0p0Dx5UontwoFKhe/CgEt2DNSf+SiW6Bwd5qdA9eFBJUMmBSnQPHlSie/CgEt2DB5XoHjyoRPfgQKWV7sGDSnQPHlSie/CgEt2DB5UElRyoRPfgQSW6Bw8q0T14UIlU60ClSqr1oBKp1oNKpFoPKg3lxGvdh91ka2o6Pa5el7ZK2+M5n3lqqlqXfc66lmuVro9bq0P5cK8aNY4RqEMZvEFF2obyd6OKNJS9G1WkodzdqCINdctiVJEEkeyLRExyIBI5yYFIQ92u8CpSqxbahnpUcliV6BzMq5SnidLBg0q0Dh5UonbwoBK9gweVBJUcqETz4EElqgcPKtE9mFDp6sCUL5XoHjyoRPfgQKVE9+BBJboHDyrRPXhQie7BmhN/pZKgkjGVXuSlRPfgQSW6Bw8q0T14UInuwYNKdA8OVMp0Dx5UonvwoBLdgweV6B48qCSo5EAlugcPKtE9eFCJ7sGDSnQPHlSie3Cg0kyq9aASqdaDSqRaDyoJKjlQCSf+Y5XKvvCvAFO+XX9jiV/uxxJX242lcN+rH0t8fD+WuO1+LPHE/VgKLLux5K5JP5bc2+jHktzTjyW5px9Lck83lgu5px9Lcs+PWf6zlyeUx6eX9HR1rn/Ik5K0yJOptMgL5JXIk9e0yJPutMiTBbXIkxy1yJMzlcgXUqkWeTKsFnkyrBZ5MqwWeYG8EnkyrBZ5MqwWeTKsFnkyrBZ5MqwS+ZUM+ybyOcn98jw/z/kHPBFWCTwJVgk8AVYJvAD+TeCl7ODLdgSPlX8TeKk7Qqkv/ovHySuBx8i/zcjv3/Hl1xV/ga/4eCXw+Hgl8Ph4JfD4eCXwAngd8NyGUgLPXSgl8CRXJfAkVyXwJFcd8BvJVQk8yfVd4B+Xl/X4hrKN5KoEnuSqBF4ArwOe5KoEnuSqBJ7kqgSe5KoEnuSqAj5NBKg3gZ+3/XJJ354yeLWU/eI8TeWoEmnLg0pEMw8qCSo5UInQ50ElEqIHlYiTHlQie3pQiaDqQKXE/VgPKpGXDKhU8/11TzXLUSMcnoW/pOv3ZqWEw/OgEg7Pg0o4PAcqZRyeB5W4u+RBJe4ueVCJtORBJUElAyqlaX+HcZLtqBJ3lzyoRPfgQSW6Bw8q0T14UInuwYFKM92DB5XoHjyoRPfgQSW6hzepJLnuKkk6ghfA64CnIVACT+hXAk+OVwJPNFcCT9rWAS8EaCXwZOJ3gb88U/pLF8DrgCe5KoEXwOuAJ7kqgSe5KoEnuSqBJ7kqgSe56oBfCFBvAt84p2ghQCmBJ0ApgRfA64AnQCmBJ0ApgSdAKYEnQCmBJ0DpgC/c+lMCT3JVAk9yVQJPclUCL4DXAU9yVQJPclUCT3JVAk9yVQJPcu0B/jfLlTDajyX5sh9LImM/lnjiN21U/Q6ZXbHPBjTa6rJ/9PRCJIyHfZEqjsaBSFglByLhwRyIRMXvQCRBJPsiEZMciEROciAStyQMiNQ6p7ly/8KDSnQODlTaKB08qETr4EElagcPKtE7eFBJUMmBSjQPHlSievCgEt2DCZVkP017Wo6P8G10Dx5Uonuwr1Ke6B48qET34EElugcPKtE9WHPir1QSVDKm0jEv5YnuwYNKdA8eVKJ78KAS3YMHlegeHKiU6B48qET34EElugcPKtE9eFBJUMmBSnQPHlSie/CgEt2DB5XoHjyoRPfgQKVMqvWgEqnWg0qkWg8qCSrZV2n++L60TvvPsdd5bqj0tebH8mt9fPY6vVpJvS9klccn11fLkOW+iq9Rny+9UclQeUFlhsoLKgKVF1QWqLygUqDygsoak8qS7n5lWer1pSktcl9DKo/PzWX9w7DC8N9m+PEm5Wu8+0fXeW0yTPPjSePf5J584u8JZHI/QXI/QXY/wex+AnE/weJ+guJ+gtX9BNX9BO735MX9nryY35PX8pigbt8meNUTXr6xJS/mN/C+45rf7fuOK7HGNe8j+o5r3nT0Hde8Q+k7rnk703dc896n67jFvFHqO24sV1ViuaoSy1V9/hXCuuPGclUllqsqsVxVieWqSixXtcZyVWssV7XGclVrLFe1SqxxY7mqNZarWmO5qjWWq1pjuaoay1XVWK6qxnJVn3/ho+64sWxGjWUzaiybUWPZjBrLZmyxbMYWy2Z8/n1H/3Dc/PRkWJb8bdzbBNa/bL/+gvYJ5qeXv57+EvPi+tvE1r9v+09s/Su398TzZP1bt//E1r94+09sPeL1n9h6d95/YvP7a/eJrUfb/hNbT7f9J47mueZpMM+1yv471LXkv2PBPA1muBrjpsHcVmvcwaxWXfZDd+r67XyZFxdv+8k1eZrKkc1gpqwrm8HsW1c2AptTNoNZwq5sBjOPXdkMZjO7shnMkHZlM5h77ckmD2Z1u7IJ7G9qvn90zXIkE3mXuj6+cs6Rd6kWm8i7VItN5F2qwWaOvEu12ERub1psIrc3LTaR25sWGwnMJk37Z6enc8V3NpHbmxabyL64xSayL26xieyLW2wi++IGG/OH62qyieyLW2wi++IWmzC++DaujDVuo9M1f4hx53EHM6StcQfzmK1xB7ONrXEHc4KNcc2f0tx53MH8WmvcwSxYa9zBXFVrXIk1bixXZf6YHLUHA8yfqPNGMlvd3z41TUc05s9nUUQTuKppoQnc1LTQBL6B2UIjoDlDE/j2ZQtNYFvTQoOvOUXDM31/PvsYFMyfDaTIxvxBQppseKbvnA3P9J2z4Zm+czYCm1M2kZ/pa7Hhty7nbPityzmb0L5YHp+9zEc2oX3xJRsZ7ai3rmxC++IGm9C+uMEmtC9usBH28FM2+OIzfyOjHXPXlQ2++JwNffE5G/riUzajHcrXlQ198Tkb+uJzNvTF52wENqds8MXnbPDF52zwxeds8MXnbPDFp2xCn+DXYoP3O2eD9ztnI7A5ZYP3O2djfg8v+7BTfpr2/mILsX8KYWsC+2cFNicw3+Y0JzC/7zYnML87Nicwv4c1JzC/0zQnMN8FNCcwn9ibE7jfk+2fgNaawP45Zc0J3O/J9s/8erya+Gua7xO8uL5M++UlPV2d6595ze/gnec1v993nte8O+g8r3kv0Xle886j87zmfUrnec27mr7z2j/Oq/O85h1T53mD+Sv7J3p1nleCzRvMXy3B/NUSzF8twfzVEsxflWD+qgzmr3LaX1Ke58NLyqUMZq9a4w7mrlrjSqxxB/NWXxPt45btOO5gW6/UfeFSX6g72M7bGHcdbuPd/3bLryv+Hne4XuN63OFqjetxh2s1rscdbN9tjTtcp3E97nCVxvW4wzUa1+MOV2hcjztcn3E5rv3j4vuOG8tV2T/W/R+O+7i8rMdzVOwf1d53XIk17miuqjHuaK6qMe5orqox7miuqjHuaK7qelz7h473HXcwmzHv7+VKkr41kS8uvn6Jl9g/K1uRjcDmlM1gbqcrm8GsUVc2g/mormwGM11d2Qzm0DqyWeyfla3IZrBGrSsbicvm8gWui/2Ta9/4X8316R6L/ZNrFdlE3qUabOyfXKvIJvIu1WITub1psYnc3rTYCGxO2URub9K0n4yWZDuyidzetNhE9sUtNpF9cYtNZF/cYGP/5FpFNpF9cYtNZF/cYhPZF7fYyGC/y8l1ZyPpOO5gVrc17mDutTXuYIa0Ne5oPyFsjDvaTwivx7V/ZnPfcQczd61xB/Nr17+HXewfHd13XIk17miuqjHuaK6qMe5orqoxbqiDGRb7B2l3Hdf+qdt9xw31m7pluPOtG+NKrHFD/aZuGe5w68a4oX5Ttwx3tHVj3FC/qVuGO9i6Me5oJxU0xo3lqoY71boxrsQaN5arGu5I68a4sVzVcAdaN8aN5apcH2d9m8CzUbpN4Nn73CbwbGduEwR+KPn6p3ol8CPJW132j56OaEY7krgnmsAPlrbQBH6utIUm8GOlLTQCmjM0gX9s1UIT2Na00OBrTtFwAsHts1/8snO086F7shntMOmubDiB4JwNJxCcs+EEgnM2AptTNpFPIGixiXwCQYsNJ3Odswnti2X/1eu0HG8kjXbCd082ox0H3pVNaF/cYBPaFzfYhPbFDTbCHn7KBl986m9Cn6veYoMvPmdDX3zOhr74jE0Jfa56iw198Tkb+uJzNvTF52wENqds8MXnbPDF52zwxeds8MXnbPDFp2x4k8MFG7zfORu83zkbgc0pG7zfOZuP7+FF1sdH5wabZU33RzmXdVlanz1tj6OL89S4OudyP3DxC3RqrESmfSUyLfWh0fri4rXcr13r9iTnqwlnuQ84Pyv/R54NeXTlWfYBy3KQ5/Nn7yPPP5EnIY9leTLyWJZnRh7L8gjyWJZnQR4r8qxylKcgj2V5VuRRlmePpfWFPLQGyvLsOF7KQ2tgWZ6Z1sC0PLQGuvKUnXRJ61EeWgPT8tAamJZHkMeyPLQGyvJM8y5PPcpDa2BaHloD0/LQGpiWh9bAsjxCa2BaHloDM/Lko7EWWgPT8tAaaMuT7/DmF/II8vxLtbHe5EoeWgPT8tAamJaH1kB579lxfHE8ykNrYFoeWgPL8iy0BqbloTUwLQ+tgWl5Iueefd05y6RlrC9/vLhEzj0m5Ln8hcISOfc4kCdy7nEgT+TcY1+eEjn3OJAncu5xIE/k3GNMnhe/jiuR75Y6kEeQR1meqx8vFloDZXkuf35VaA1My0NrYFoeWgNdea5/31NoDSzLs9IamJaH1sC0PLQGyvJc/kJhpTUwLY8gj2V5aA1My0NrYFoeWgPT8tAamJHnxa/jVloDy/JUWgNtea5+vFhpDZQb68ufX1VaA9Py0BqYlkeQR3fvufyFQqU1MC0PrYFpeWgNTMtDa2BaHloDy/JsgXNPmvfflqY1K8lz/ePFLXDusSHP5S8UNkEey/IEzj0e5AmcezzIEzj3eJAncO7xIE/g3GNNnuOv49Yp8N1SD/IEvltqRJ6LHy+uE62BsjxXP79aJ1oD0/II8liWh9ZAV57L3/esE62BaXloDUzLQ2tgWh5aA2V5rn6hsCZaA9Py0BqYlofWwLQ8tAam5RHksSwPrYEZeY6/jlsTrYFpeWgNtOW5+PHimmgNlBvrq59frYnWwLI8mdbAtDy0Bsp7z9UvFNZMa2BaHloD0/II8liWh9bAtDy0BqblCZx7ppJ2eSbRMtZXP15c58C5x4Y8V79QWOfAuceDPIFzjwd5AuceD/II8liWJ3Du8SBP4NxjTZ4Xv46bA98t9SBP4LulRuS5+vHiTGugLM/lz6+E1sC0PLQGpuWhNdCV5/r3PUJrYFoeQR7L8tAamJaH1kBZnstfKAitgWl5aA1My0NrYFmehdbAtDy0BqbloTUwI8+LX8cttAam5RHkUZbn6seLC62BcmN9+fOrhdbAtDy0BqbloTVQ3nsuf6Gw0BpYlqfQGpiWh9bAtDy0BqbloTUwLU+H3CPr7g0XKU0o6x1hzun50aH0Enh+EJ/mqXl9XXbx61qekL+4uOb7R9f8rM4fMmtcMltd9o+ejmjWCTRnaBJoztBk0JyhmUFzhkZAc4ZmAc0ZmsC2poUGX3OKpsZF8/Xh8+Ozy5HNBpszNjWwH26yCWyIm2wCO+Imm8CWuMlGYHPKJrApbrIJ7IqbbALb4iab0L5YHp+9zEc2oX3xNZsttC9usAntixtsQvviBpvQvrjBRtjDT9ngi0/9zYYvPmeDLz5nQ198zoa++IxNneiLz9nQF5+zoS8+Z0NffM5GYHPKBl98zgZffM4GX3zOBl98zgZffMom4YvP2eD9ztng/c7ZCGxO2eD9ztmY38PLPuyUn6b9df1tAvM7bWuCbH4/bE5gvs1pTmB+321OYH53bE5gfg9rTmB+p2lOYL4LaE5gPrE3J3C/J2f3e/Lsfk+e3e/Js/k9eXl461xK6/rHwX6ppKerc/0zr/kdvPO85vf7zvOadwed5zXvJTrPa955dJ7XvE/pPK95V9N3XjHvgTrPa94xdZ43mL+SYP6qxwumXM0bzF9JMH8lwfyVBPNXEsxfLcH81TKYv/r6yPvleX4+gfLPuIPZq9a4g7mr1rgSa9zBvFWWso9btuO4g229UveFS32h7mA7b2PcMtzGu//tll9X/D3ucL3G9bjD1RrX4w7XalyPO9i+2xp3uE7jetzhKo3rcYdrNK7HHa7QuB53uD7jclz7x8X3HTeWq7J/rPs/HPdxeVnn47ijuarGuBJr3NFcVWPc0VxVY9zRXFVj3NFcVWPc0VzV9bj2Dx3vO+5gNmPe9sslfWsiX1y87RfnaSpHNoN5kq5sBDanbAZzO13ZDGaNurIZzEd1ZTOY6erKZjCH1pON/bOyFdkM1qh1ZSNx2Vy+wLXaP7n2jf/VNE73sH9yrSKbyLvUNZvN/sm1imwi71ItNpHbmxabyO1Ni43A5pRN5PYmTfvJaEm2I5vI7U2LTWRf3GIT2Re32ET2xQ029k+uVWQT2Re32ET2xS02kX1xi40M9rucXHc2ko7jDmZ1W+MO5l5b4w5mSFvjjvYTwsa4o/2E8Hpc+2c29x13MHPXGncwv3b9e9jN/tHRfceVWOOO5qoa447mqhrjjuaqGuOGOphhs3+Qdtdx7Z+63XfcUL+p24Y737oxrsQaN9Rv6rbhDrdujBvqN3XbcEdbN8YN9Zu6bbiDrRvjjnZSQWPcWK5quFOtG+NKrHFjuarhjrRujBvLVQ13oHVj3FiuyvVx1rcJPBul2wSevc9tAs925jZB4IeSL3+qty2BH0ne6rJ/9HREM9qRxD3RBH6wtIUm8HOlLTSBHyttoRHQnKEJ/GOrFprAtqaFBl9zioYTCG6f/eKXnaOdD92TzWiHSXdlwwkE52w4geCcDScQnLMR2JyyiXwCQYtN5BMIWmw4meucTWhfLPuvXqfleCNptBO+e7IZ7TjwrmxC++IGm9C+uMEmtC9usBH28FM2+OJTfxP6XPUWG3zxORv64nM29MWnbEKfq95iQ198zoa++JwNffE5G4HNKRt88TkbfPE5G3zxORt88TkbfPEJm3niTQ4XbPB+52zwfudsBDanbPB+52w67OHzdr+4iCwNNmmb9gVt69Jmsz3uBcxTk2Vd1vvldS3XbK5+GPRFZotL5vIB2nnqcXT4qGhm0JyhEdCcoVlAc4amgOYMzQqaMzSBbU0LDb7mDE2PA9S9omkFhR6nrQ/LJrAfbrIJbIibbAQ2p2wCW+Imm8CeuMkmsClusgnsiptsAtviFps5tC++ehj9i01oX9xgE9oXN9iE9sUNNgKbUzahfXGDDb74nA2++Nzf4IvP2eCLT9kIffE5G/riczb0xeds6IvP2QhsTtnQF5+zwRefs8EXn7PBF5+zwRefslnwxeds8MXnbPDF52wENqds8H7nbPB+52zwfqdsivk9vOzDTnn9/qOp2wTmd9rmBOb3w+YE5tuc5gTm993mBOZ3x+YE5vew5gTmd5rmBOa7gOYE5hN7a4LV/Z68ut+TV/d78up+T+7xYoT3TvAPX2L7+PSSnq7O9c+85nfwzvOa3+87z2veHXSe17yX6DyveefRd95q3qd0nte8q+k8r3kP1Hle846p87wSbN5g/qoG81c1mL+qwfxVDeavtmD+agvmr7Zg/mobzF/ldD8sMuX52wGNt3El1riDuavWuIOZq9a4g3mrLGUft2x/j5umwbZeqfvCpebjuIPtvK1xh9t497/d8uuKv8cdrte4Hnewfbc17nCtxvW4w5Ua1+MO12lcjztcpXE97nCNxuW4abhC43rc4fqM63FjuSr7R8D3HVcGG/dxeVnn47ijuarGuKO5qsa4o7mqxrijuarGuKO5qutx7R9n3nfc0VxVY9zRXFVjXBlr3H/0Eq9tvzhPUzmyGcyTdGUzmIHpymYwt9OVzWDWqCubwXxUTzb2z8pWZDOYQ+vKZjA715XNYI1aVzaB/c3lC1yT/ZNr1V77m+yfXKvIJvIu1WITeZdqsYm8S7XYCGxO2URub1psIrc3LTaR25s07SejJTk+pmv/5FpFNpF9cYON/ZNrFdlE9sUtNpF9cYtNZF/cYiOwOWUT2Re32AzmiyXXnY0cnzG0f1Bv33EHc6+tcQczpI1x7Z+s3Hfc0X5C2Bh3MCfYGncwc9caV0L9Htb+0dF9xx3NVTXGHc1VNcYdzVU1xh3NVV2Pa/9s7L7jxjqYwf6p233HlVDP9g93vnVj3Fi/qRvudOvGuLF+Uzfc2dbX4w53tHVj3Fi/qRvuYOvGuKOdVNAYV2KNG8tVDXeodWPcWK5quCOtG+PGclXDHWjdGDeWq3J9nPVtAs9G6TaBuJ/As525TRD4oeTrn+ptgR9J3uqyf/R0QJNHO5K4J5rAD5a20Hj+un8zmsCPlbbQBP61VQtN4B9btdAEtjUtNPiaMzSjHfnc8ZedebTzobuy4QSCczacQHDORmBzyoYTCM7ZcALBOZvIJxC02EQ+gaDFhpO5TtmMdmj3P2Mj+69ep2U+sgntixtsQvviBpvQvrjBRmBzyia0L26wwRefs8EXn/sbfPE5G3zxKZvQ56q32NAXn7OhLz5nQ198zkZgc8qGvvicDb74nA2++JwNvvicDb74lA1vcrhggy8+Z4MvPmcjsDllg/c7Z4P3O2eD9ztl0+XU+f3gwjIvtcHmq72/X/01Xnpa0PbiapnS/VFOmZ4+O68vLl7L/dq1bk8QX1y6zPLn0mV+5v0HSooJZblfupTlCCUD5QhlBsoRigDlCGUByhFKAcoRyhodyipHKBUoRyhbUCi7eatHKCWoo5X1CkpQR3sNJaijvYYS09GWfb6S1iMUAcoRSkxH24AS09E2oMR0tGVvAUuqRygxHW0DSkxHew1ljeloG1BiOtoGlJiOtgElqKN9QMnHLbnLax6GgxLU0U55X/ILKEE72k2uoATtaK+hBO1or6EEdbR7yVTKdIBSgzraayhBHe01lKCO9hpKUEd7DUWAcoTyeZ8ylTuULJPWlnz5eFetMaFcPnVQN6AcoGwTUI5QElCOUDJQjlBmoByhSHQoL55k2hagHKGUoFCuHu/agjray4d2tqCO9hpKUEd7BWWeYjray+dT5immo21AieloG1BiOtoGFIkJ5eqpg3mK6WgbUGI62gaUmI62ASWmo21Aielor6GkoI726kmmOQV1tNdQgjraq8e75hS0o716aGfu8sae4aAE7WivoQR1tFdPHcwpqKO9hhLU0V5DCepoL6HkoI72GkpQR3sNRT4NJc37M29pzVpb8tXjXXNeYkK5eupgzgUoRygrUI5QKlCOUDagHKDME1COUFJ0KMcnmeY5A+UIZQ4K5eLxrrnLu08cQrl8aGcO6mivoQR1tNdQYjra6+dT5piOtgElpqO9hiIxHW0DSkxHe/3UgcR0tA0oMR1tA4oA5QglpqNtQInpaBtQgjrayyeZJKijvYYS1NFePt61BO1oLx/aWYJ2tNdQgna011CCOtrLpw4+/34fD1CCOtprKEEd7TWUoI72GkpQR3sJ5fNvbZlK2qFMorUlXz7e9fm3ttiAcvnUweff2uIBigDlCGUByhFKAcoRygqUI5QaHcqLJ5k+/9YWB1A+/9YWI1CuHu9agzray4d21qCO9hpKUEd7DUVCQrl+PmWN6WgbUGI62gaUmI62ASWmo71+6mCN6WivodSYjrYBJaajbUCJ6WgbUGI62gYUiQ7lxZNMNaijvYYS1NFePt5Vg3a0lw/t1KAd7TWUoB3tJZQtqKO9fOpgC+por6EEdbTXUII62msoApQjlKCO9hpKB5/ydfWerra5AWVZHzcXnla+r2cztR7p8a6SrutJxtaTP7yeMm17QJMX65mNrUeMrWcxtp5ibD2rsfXUj69nul88lRfr2WytJ03G1pOMrScbW89sbD1ibD2LsfUUY+tZja3H2PdzMvb9nI19P2dj38/Z2PdzNvb9nI19P2dj38/Z2PdzNvb9fHI+bN5v86WvrrnnetIs2/7Ry/pc49wWlKwtKFtb0GxtQWJtQYu1BRVrC1qtLahaW9BmbEFi7ZtarH1Ti7VvarH2TS3Wvqnl099Djbp++fQfWcOeLcnYerKx9czG1tPjD2x+Wo+0/sCWbdmTQ3qs/utG7J8VLeZWVD69oiLTvqKnO8ePFa3mVlTfuqLbv7G9/98o0wf+jfSBfyN/4N+YP/BvyAf+jeUD/0b5wL+xfuDf+MDfefnA3/n6gb/z9QN/5+sH/s7XD/ydrx/4O18/8He+dvg7zw/LltPybwaWdbW2oGptQZuxBdXJ2oKStQV1+Nb7R09+przf7limo/uts7H1iLH1LMbWUz68niz31/7O0/JtPcdr3/XcsKT7gr/uWV1fOk/rvK/3+XPl5efuRxZJWufni2+wV2B/DnYF9udgb8D+GOxtAvbnYCdgPy69IckRkew/ePpqFI9IZpD8jURA8jeSBSR/IwmZP7Z7AyDbi6/XkCnhGklIL3+NJKTjvkKyTBF98bJ/7JLKEUlE99pAEtG9NpBEdK8NJBF9yeWbYZYp4o5zecTEkiLuOA0kpnecJOlR9mzPSG6LN703fN0AvFy86W/xlNZ98XU6Ll48L950rm8t/tM73dfdgvt61tJY/LLeBy3yWER6+RWWHk+kpFSX46BrlEFrlEG3IIPmKcqgKcqgOcqgc5RBJcqgS5RBozijHMUZ5SjOKEdxRnMUZzSP44wePzL8Wv1x0HGcUWPQcZzR86D1OKiMMmhO+5JzTsdBh3FGrUGHcUbfBi3HQcdxRvubGr4GPfyOZJFh9tF5LvuSRY6DDrOPtgYdZh+9/gnUIsPso41Bl08rukz7nb4pNwadH7fW5vR0Dl7OfxY/e168eF784nnxxfPiV8+Lr54XvzlefJk8Lz55XrznHbZ43mF7nG6jt3jPO2zxvMMWzzts8bzDFs877Op5h10977Cr5x129bzD9jhXSm/xnnfY1fMOu3reYVfTO2zeH8yd8/PP7O+LN73DNhZfTe+wea/O5/x0KtK+eNM7bGvxpnfYvP/OZM7Pv2G4L970DttavOkd9nnxL74qq+kdtrV40ztsa/Gf3mFL2u9J/XUk3It7UtN+cZrk2+KPF4vM+c/FIq/+QGqYSbcok378MCq9SVOYSXOYSedxJt3ua5av3ek4qYSZtIeT2fbDrUWaZ/Ruj4/e1qdHd3/lolezzvsbJKa0Tt+uv01Q3E+wup+gup9gcz5B6XKgj+4Eyf0E2f0Es/sJxP0E3vfkMnnfk8tkfk9eHyYwfTuF5uX1Zdk/vazPLyv7M675DbzvuOZ3+67jJvPWoO+45n1E33HNm46+45p3KH3HlVjjmvc+fcc1b5T6jhvLVaVYrirFclU5lqvKsVxVjuWqcixX1eX8KUfjxnJVOZaryrFcVY7lqnIsVzXHclVzLFc1x3JVcyxX1eXsKkfjxnJVcyxXNcdyVXMsVyWxbIbEshkSy2ZILJshEmvcWDZDYtkMiWUzFuv7bn56MixL/nb9bQLrX7Z5e0wwT/JvXX+b2Pr3bf+JrX/l9p/Y+rdu/4mtf/H2n9h6xOs/sfXuvPvExfz+2n1i69G2/8TW023/icN5ri5HPBqaeJX9RP215EMsKIMZrta4g7mt1riDWa263A80SfXbofYvl7L/ADtPUzmyGcyUdWUzmH3ryWYdzOh1ZTOYJezKZjDz2JXNYDazKxuBzSmbwdxrVzaDWd2ubAL7m5rvH12zHMjUyLvU1z2ox2cf/6upkXepFpvIu1SLTeRdqsUm8i7VYhO5vWmxidzetNhEbm8abLbI7U2a9s9Osh3ZRG5vWmwi++IWm8i+uMVGYHPKJrIvbrGJ7ItbbCL74habyL64xSaML/417mr+XOJ/OO51p7uaP8S487iDGdLWuIN5zNa4EmvcwZxga9zBzF1r3MH8WmvcwSxYa9zBXFVjXPNHOnceN5ar6nGks6z3Z3LLIqUxbp7W+/pzTu3n11vn5689TmlWnkDcT7C4n6C4n2B1P0F1P8HmfYIeRw0rT5DcT+B+T87u9+Qex/a+d4Keh2Ws2fwG3ndc87t933HNW4O+45r3EX3HNW86uo47m3cofcc1b2f6jmve+/Qd17xR6juuxBo3lquaY7mqOZarmmO5qjmWq5JYrkpiuSqJ5aoklqvqcUqxp3FjuSqJ5aoklquSWK5KYrmqJZarWmK5qiWWq1piuaoeZ5F7GjeWq1pi2Ywlls1YYtmMEstmlFg2o8SyGSWWzehx/Lanca3vu6238qyr9S/b3ifEr6v179v+E1v/yu0/sfVv3f4TW//i7T+x9YjXf2Lr3Xn/ic3vr90nth5t+09sPd12n7iG81x1MM91/d6WtQ5muFrjDua2WuPKWON2PJl9rYOZsq5sBrNvXdkMZvS6shnMEnZlM5h57MlmG8xmdmUzmCHtymYw99qVzWBWtyubwP7m8q086xZ5l7o+0b9OkXepFpvIu1SLTeRdqsUm8i7VYiOwOWUTub1psYnc3rTYRG5vrk+tr1Pk9qbFJrIvbrBJkX1xi01kX9xiE9kXt9hE9sUtNgKbUzaRfXGLTRhffBt3MKt73elW84cYdx53MEPaGNf88cidxx3MNrbGHcwJtsYdzNy1xpVY4w5mwVrjDuaqWuPGclXmj3TuO+6bj4W9/RvygX9j+cC/UT7wb6wf+DfqB/6NDm69TPffA5ci0vozKuv9VVh5/fYf+qvPXta0/Ll6WZfmi7Omx9/c1witq/N9IWmZvq3jN5ke518OSiZB5oRMhswJmTksmSz3Zc/T0liHTPs6ZFrqwzSsLy5ey/3a9dspDK8+N9X7x87p+tJ5Wud9vc+fKy8/d9nXm54Od/i6+Ca7IHtE2Rdkjyh7QfaIsq/IHlH2iuwWZb+JEzfXmxCn3GFIyQdxlrjVggNx4rYbDsSJW7A4EIeOR1WcfcGyHQ1Bj8PLEedd4tCXGBaHVsOwOHQPmuIsj/FSOYpDQ2BYHBoCu+IUGgLD4pBzVMWZ7480LfMLcXBrmuIUWXd001Ec3JphcXBrPxInyV6CpXV7FueGEV/1M4zzcoVxxQH9DGNad4x1OmLkbkYXjNx36IIxrnOeZb9dv7bXsY8oDxzp5faf0rw/eJvqckQuIP808rhtvhryuKlPDXncLKeGPG5CU0MeN81pIa9xk58a8rgpUQ153ESphpz0+XHkAvJPIyd9fhw56fPjyEmfH0dO+uyPfLuv+RfHI3LS56eRb6TP9yKvR+Skz+7Ic9rh5ZyOyEmfH0dO+nwv8nJELiDv/10uD+TrETm+vDvyeS47vCceO3J8+ceR48v7I5dth7ccvli2CV/+ceRx/ytfpv1J6Sk31jE/HgieU33CeDu6d0tx/8vtijFuSuyKMW7y64oxbprrilHA2ANj3Ht+XTHGvY/XFWPcDqArxri5vitGUkwPjJkU0wUjKaYLRlJMF4ykmC4YBYw9MJJiumAkxXTBSIrpgpEU0wUjKaYHxpkU0wUjKaYLRlJMF4ykmC4YBYw9MJJifoQx70cFzfn5BTZ3jKSYLhhJMT/DuD/wN+en95fuGEkxXTCSYn6GcT/Tc87PZyP+wRj41dRdMZJi/jHGF4Yn8Euvu2IkxXTBKGExlrQv+69XsL/65P3iNMk3jMeLReb852KRV1+kcSOPHvO4+UiPedwwpcc8bvLSYx43pqkxD/xO4Dcy3+705MtjHpnHDYB6zIdKi3nemWfJ366+TTtUqGtOK6GmHcoN5rqf6zA/HaVxcvX2GHJbn44K+3UH4tX3xwPllNbp2/U3lkO5PGWWQ7k3XZZjvYdRmeVQbkuZ5VguSpflWB5Nl6XAshvLoVp1ZZZDteXKLMk9/ViSe/qxJPf8mOX6KPTSt7cGv7y+LPunl3V+mvMGfqxXtXoCT6JSAk/8UgJPVlMCL4DXAU8KVAJPZFQCT75UAk8YVQJPctUBP9arZj2BJ7kqgSe5KoEnuSqBF8DrgCe5KoEnuSqBJ7kqgSe5KoEnueqAH+s1tZ7Ak1yVwJNclcCTXJXAC+B1wJNclcCTXJXAk1yVwJNclcCTXDXAyzTWi5w9gSdAKYEnQCmBF8DrgCdAKYEnQCmBJ0ApgSdAKYEnQOmAT/j4n4J/OsJrej7D689vhr9YYlR+zPJxvOA0T/JvXX9jj1fRY49d0WOPY9Fjj2lRY58pfvXY89SSHnv8uh57qnc99gJ7NfbkWj325No3sV9lX8ta8qEYy4RaJfAkWiXwxNk3ga/L/ZWEqa7Pc75cyv7Kkzx9g3JTaSb4elCJiOxBJcK0B5WI3R5UElRyoBJR3oNKhH4PKtEQeFCJOsGBSkJeMqBSzfePrlmOGgkaGfhL+roN+fjsF39JODwPKuHwPKiEw/OgEg7Pg0rcXXKg0sLdJQ8qkZY8qMTdJQsqpWn/7CTbUSXuLnlQSVDJgUp0Dx5UonvwoBLdgweV6B48qET34EClQvfgQSW6h4+rdANPnfAm8I1nEwoNgRJ4AbwOeHK8EniiuRJ40rYSeAK0EngysQ74lZirBJ7kqgSe5KoEnuSqBB4fb6DKvP45w4rlN6DRVpf9o6ejSBWz5EAkjJUDkTBhDkTCsDkQSRDJvkjcwnAgEjHJgUjkJAcicRvFgEitXwRV7rk4UGmjc/CgEqWDB5VoHTyoRO3gQSVBJQcqUTx4UInmwYNKVA8eVKJ7MKGSPD57Ob7oeaN7sK/SV7eHSg5UonvwoBLdgweV6B48qCSoZMyJv1KJ7sF+XkoT3YMHlegePKhE9+BBJboHByolugcPKtE9eFCJ7sGDSnQPHlQSVHKgEt2DB5XoHjyoRPfgQSW6Bw8q0T04UCnTPXhQiVTrQSVSrQeVBJUcqESq9aASTvzHKpUd+5SfuP+6/sYSv9yN5Yyr7ceS+179WOLj+7HEbfdjKbDsxhLn2o8ld036seTeRj+W5J5+LMk93VgKuacfS3JPP5bknh+zXB6NWy6ldX15fHpJT1d/zXkjT0rSIi+QVyJPAtMiT17TIk+60yJPFtQiT3JUIr+QM7XIk0q1yJNhtciTYbXIC+SVyJNhtciTYbXIk2G1yJNhtciTYZXIFzKsFnky7JvI57SvJf96oH+f8w94IqwSeBKsEngBvA548uu7wEvZwZftCB4r/ybwUu9zfv2fL/6Lx8nrgF8x8m8z8vtaypyO4PHxSuDx8Urg8fFK4AXwOuDx8UrguQ2lBJ67UErgSa5K4EmuOuAryVUJPMlVCTzJ9V3gH5eX9fiGskpyVQIvgNcBT3JVAk9yVQJPclUCT3JVAk9y1QG/kVyVwBOg3gR+3vbLJX17yuDVUvaL8/QNyh+VSFseVBJUcqASOc6DSoQ+DyqRED2oRJz0oBLZ075KX//fUMmBStyP9aCSoJK+SjXfX/dUsxw1wuFZ+Eu6fm9WnnB4HlTC4TlQKeHwPKiEw/OgEneXPKjE3SUPKgkqOVCJu0sWVErT/g7jJNtRJe4ueVCJ7sGDSnQPHlSie3CgUqZ78KAS3YMHlegePKhE9+BBJUGl96gkue4qSTqCp05QAk9DoASe0K8EnhyvBJ5orgN+Jm0rgSdAK4EnE78L/OWZ0nkm5iqBF8DrgCe5KoEnuSqBJ7kqgSe5KoEnueqAF5KrEngC1JvAX59TlIUApQReAK8DngClBJ4ApQSeAKUEngClBJ4ApQN+IUApgefWnxJ4kqsSeJKrEngBvA54kqsSeJKrEniSqxJ4kqsSeJKrDvhCcu0B/saSMNqPJfmyH0siYz+WeOI3bVT9Dpkt2GcDGm112T96Ooq0YjwciISjcSASVsmBSHgwByIJItkXidsBDkQiJjkQiZzkQCRuSRgQqXVO88r9CwcqVToHDypROnhQidbBg0rUDh5UElRyoBLFgweVaB48qET14EElugcTKsl+mva0HB/hq3QPDlTa6B48qET34EElugcPKtE9eFBJUMmYE3+lEt2Dg7y00T14UInuwYNKdA8eVKJ7sK/SPNE9eFCJ7sGDSnQPHlSie/CgkqCSA5XoHjyoRPfgQSW6Bw8q0T14UInuwYFKie7Bg0qkWg8qkWo9qCSo5EAlUq0DlbJ191DuVy91nlvcS9rfBldk+nb1bVrrdwD6Tmvdc/Sd1vr3zT+ZNn99b9w/O6/NlUzrtF+dpPl9k+bHE2tpnb5df2NpvevyxNJ6I+WJpfXeyBNL6+2OI5bzSC5Km+VIHk2b5UgOUJul9W7IE0uBZTeW5J5+LMk9/ViSe37Mci0PlnVrXX/9xpl5JiQpgSdR6YAX4pcSeLKaEniCnRJ4UqASeAG8DnjypRJ4wqgSeJKrEniSqxJ4kqsO+IXkqgSe5KoEnuSqBJ7kqgReAK8DnuSqBJ7kqgSe5KoEnuSqBJ7kqgO+kFyVwJNclcCTXJXAk1yVwAvgdcCTXJXAk1yVwJNclcCTXHXArwQoJfAEKCXwBCgl8AQoJfACeB3wBCgl8AQoJfAEKB3wFR//U/D56TfDWfK3628sMSo/Zrk9WM7Tv3f9jb3AXo09dkWPPY5Fjz2mRY89xa8ee55aUmO/4df12FO967GnfddjT67VYy+wfw/7VfZ3IqwlH4qxjVCrBJ5EqwSeOPsm8HW5ryXV9XnOVxdv+/tR8vQNyh+VCL4eVCIi21dJJsK0B5WI3R5UIqB7UIko70ElQSUHKtEQeFCJOsGDSuQlAyrVfP/omuWgkfmXgMf4S7p+Ja6Yfwk4Kv1SSVDJgUo4PA8q4fA8qMTdJQ8qcXfJg0qkJQcqZe4uWVApTftnJ9mOKnF3yYNKdA8eVKJ78KCSoJIDlegePKhE9+BBJboHDyrRPXhQie7h4yr9Bj9TJ7wJfOPZhJmGQAk8oV8JPDleCbwAXgc8aVsJPAFaCTyZWAk8MVcJPMlVB7yQXJXAk1yVwAvg/6VeZV7/nEGw/AY02uqyf/T0QiTMkgORMFb2RVowYQ5EwrA5EInbEg5E4haGA5EEkeyLRE5yIBK3UQyI1PpF0MI9Fw8q0Tl4UInSwYFKhdbBg0rUDh5UonfwoBLFgweVBJUcqET14EElugcTKsnjs5f5qBLdgweV6B48qET34EClle7Bg0p0Dx5Uonuw5sRfqUT34CAvrYJKDlSie/CgEt2DB5XoHjyoRPfgQSW6BwcqVboHDyrRPXhQie7Bg0p0Dx5UElRyoBLdgweV6B48qET34EElugcHKm2kWg8qkWo9qESq9aASqdaDSjjxH6tUduxTfuL+6/obS/xyP5a42n4sue/Vi+Uy4eP7scRt92OJJ+7HEufaj6XAshtL7m30Y0nu6ceS3NOPJbmnH0tyTzeWidzzY5bLo3HLpbSuLw+EJT1d/TXnjTwpSYs8mUqLPAlMi7xAXok86U6LPFlQizzJUYs8OVOLPKlUiXwmw2qRJ8NqkSfDapEnw2qRF8grkSfDapEnw2qRJ8NqkSfDapEnw76J/NdH3i/Pvx7o3+e8gZ+JsErgSbBK4AmwSuDJr+8CL2UHX7YjeKz8m8BLva/86/988V88Tl4JPEb+bUZ+/44vczqCx8frgBd8vBJ4fLwSeHy8Enh8vBJ4AbwOeO5CKYEnuSqBJ7kqgSe5KoEnueqAX0iu7wL/uLys8xE8yVUJPMlVCTzJVQm8AF4HPMlVCTzJVQk8yVUJPMlVB3whQL0J/Lztl0v69pTBi4u3/eI8fYPyRyXSlgeViGYeVCLHeVBJUMmBSiREDyoRJz2oRPb0oBJB1YNK3I91oNJKXjKgUs33ldQsR41weBb+kq7fm/VFAZUcqITD86ASDs+DSjg8BypV7i55UIm7Sx5UIi15UIm7SxZUStP+DuMkx0MtqqCSA5XoHjyoRPfgQSW6Bw8q0T14UInuwYFKG92DB5XoHjyoRPfwJpUk110lOf6+eaNOUAIvgNcBT+hXAk+OVwJPNFcCT9pWAk+AVgFfJjLxu8BfnildJmKuEniSqxJ4kqsSeAG8DniSqxJ4kqsSeJKrEniSqw74RIB6E/jrc4pKIkApgSdAKYEnQCmBF8DrgCdAKYEnQCmBJ0ApgSdAKYHn1p8O+ExyVQJPclUCT3JVAk9yVQIvgNcBT3JVAk9yVQJPclUCT3LtAf7GkjDajeVMvuzHksjYj6XA8j0bVbdDZsuMfTag0VaX/aOnFyJhPByIhKOxL5JglRyIhAdzIBIVvwORuB3gQCRBJPsikZMciMQtCQMiNc5pLsL9Cw8q0Tl4UInSwYFKC62DB5WoHTyoRO/gQSWKBw8qCSo5UInqwYNKdA8mVJL9NO1pOT7Ct9A9eFCJ7sGDSnQPDlQqdA8eVKJ78KAS3YM1J/5KJboHB3mpCCo5UInuwYNKdA8eVKJ78KAS3YMHlegeHKi00j14UInuwYNKdA8eVKJ78KCSoJIDlegePKhE9+BBJboHDyrRPThQqZJqPahEqvWgEqnWg0qkWg8qjeTEU1nkvuyvf+bb1bdpR7oDkGrdl73J1rp6ewy5rUvzv8k0P55qSuv07frfLLeRHI02y5F8hzbLkdyBNsuR9nBtlgLLbixHanm1WQ7lAJVZjtSYarMcqdfUZknu6cVyncg9/ViSe37Mci0PlnVrXX/9VpJ1IiQpgSdRKYEXwOuAJ6spgSfYKYEnBSqBJzIqgSdf6oBPhFEl8CRXJfAkVyXwJFcl8AJ4HfAkVyXwJFcl8CRXJfAkVyXwJFcd8JnkqgSe5KoEnuSqBJ7kqgReAK8DnuSqBJ7kqgSe5KoEnuSqBJ7kqgN+JrkqgSe5KoEnuSqBF8DrgCdAKYEnQCmBJ0ApgSdAKYEnQOmAFwKUEngClBJ4AfwPween3wxnyd+uv7HEqPyY5fZgOU/yb11/Y49X0WOPXVFjv+BY9NhjWvTYU/zqseepJT32Ans19lTveuxp3/XYk2v12JNr38T+q/q6X76WfCjGFkKtDvhColUCT5x9E/i63F/Rker6POfLpezv0MjTNyh/VCL4elCJiOxBJUElByoRuz2oRED3oBJR3oNKhH4PKtEQOFBppU7woBJ5yYBKNd8/umY5aoTDs/CXdP3a1HXF4XlQCYfnQSUcngOVKg7Pg0rcXfKgEneXPKhEWvKgkqCSAZXStH92elr4rhJ3lzyoRPfgQSW6Bw8q0T14UInuwYFKG92DB5XoHjyoRPfgQSW6h4+rdAMvgH8P+MazCRsNgRJ4Qr8SeHK8EniiuRJ40rYK+DoRoJXAk4mVwBNzlcCTXJXAC+B1wJNclcAPlVy38hh2nlormdY7yZxT+wSc9HSqblqnb9ffWA4VRpVZDpUvlVkOFRl1WaahUqAyy6GCnTLLobKaMsuh4pcyS4FlN5ZDhSRlluSefizJPf1Yknt+zLLn64VqIiTpgM8kKiXwxC8l8GQ1JfAEOyXwAngd8ERGJfDkSyXwhFEl8CRXJfAkVx3wM8lVCTzJVQk8yVUJPMlVCbwAXgc8yVUJPMlVCTzJVQk8yVUJPMlVB7yQXJXAk1yVwJNclcCTXJXAC+B1wJNclcCTXJXAk1yVwJNclcCTXHXALwQoJfAEKCXwBCgl8AJ4HfAEKCXwBCgl8AQoJfAEKB3wBR//U/D56TfDWfK3628sBZY/ZfnPDk+7vP7GHq+ixx67oscex6LHHtOix57iV439ylNLeuzx63rsqd712NO+67EX2KuxJ9e+if0qcr98LflQjK2EWiXwJFol8MTZN4H/R29TbbwoYiX4OlCpEpE9qESY9qASsduDSgR0DyoJKjlQidDvQSUaAg8qUSc4UGkjLxlQqeb7R9csR41weBb+kqY8Pz77xV+SoJIDlXB4HlTC4XlQCYfnQSXuLnlQibtL9lXaJtKSB5W4u2RBpTTtn51kO6rE3SUPKtE9eFBJUMmBSnQPHlSie/CgEt2DB5XoHjyoRPfgQKVE9/BxlW7gqRPeBP762YQt0RAogSf0K4EXwOuAJ5orgSdtK4EnQCuBJxMrgSfm6oDPJFcl8CRXJfAkVyXw+HgDVeblzxm2jOU3oNFWl/2jpxciYZbsizRjrByIhAlzIBKGzYFI3JZwIJIgkn2RiEkORCInORCJ2ygGRGr9ImjmnosHlegcHKgklA4eVKJ18KAStYMHlegdPKgkqORAJZoHDypRPXhQie7BhEry+OxlPqpE9+BBJboHByotdA8eVKJ78KAS3YMHlegerDnxVyoJKtnPSwvdgweV6B48qET34EElugcPKtE9OFCp0D14UInuwYNKdA8eVKJ78KCSoJIDlegePKhE9+BBJboHDyrRPXhQie7BgUorqdaDSqRaDyqRaj2oJKjkQCWc+I9VKjv2KT9x/3X9jSV+uR9LXG03lpX7Xv1Y4uP7scRt92OJJ+7HUmDZjSV3Tfqx5N5GP5bknn4syT39WJJ7urHcyD39WJJ7fsxyeTRuuZTW9eWBsKSnq7/mvJEnJWmRJ1NpkRfIK5Enr2mRJ91pkScLapEnOWqRJ2eqkF+miVSqRZ4Mq0WeDKtFngyrRV4gr0SeDKtFngyrRZ4Mq0WeDKtFngyrRD6RYd9E/usj75fnXw/073P+AU+EVQJPglUCT4BVAi+AfxN4KTv4sh3BY+XfBF7qfeVf/+eL/+Jx8krgMfJvM/L7d3yZ0wF8xscrgcfHK4HHxyuBx8crgRfA64DnNpQSeO5CKYEnuSqBJ7kqgSe56oCfSa5K4Emu7wL/uLys8xE8yVUJPMlVCbwAXgc8yVUJPMlVCTzJVQk8yVUJPMlVB7wQoN4Eft72yyV9e8rg1cK3x8K/QfmjEmnLg0pEMw8qCSo5UInQ50ElEqIHlYiTHlQie3pQiaDqQKWF+7EeVCIvGVCp5vtKapajRjg8C39Jl+/N+lIJh+dBJRyeB5VweA5UKjg8Dypxd8mDStxd8qASacmDSoJKBlRK0/4O4yTHQy0Kd5c8qET34EElugcPKtE9eFCJ7sGBSivdgweV6B48qET34EEluoc3qSS57irJ8ffNqwBeBzwNgRJ4Qr8SeHK8EniiuRJ40rYO+EqAVgJPJn4X+OszpSsxVwk8yVUJvABeBzzJVQk8yVUJPMlVCTzJVQk8yVUH/EaAehP4xjlFGwFKCTwBSgm8AF4HPAFKCTwBSgk8AUoJPAFKCTwBSgV8mrj1pwSe5KoEnuSqBJ7kqgReAK8DnuSqBJ7kqgSe5KoEnuSqBJ7k2gP8b5aJMNqPJfmyH0siYz+WeOI3bVTdDplNCftsQKOtLvtHTy9EwnjYFynjaByIhFVyIBIezIFIVPwORBJEsi8SMcmBSOQkByJxS8KASI1zmlPm/oUHlegcHKg0Uzp4UInWwYNK1A4eVKJ38KCSoJIDlWgePKhE9eBBJboHEyrJfpr2tBwf4ZvpHjyoRPfgQCWhe/CgEt2DB5XoHjyoRPdgzYm/UklQyX5eEroHDyrRPXhQie7Bg0p0Dx5UontwoNJC9+BBJboHDyrRPXhQie7Bg0qCSg5UonvwoBLdgweV6B48qET34EElugcHKhVSrQeVSLUeVCLVelBJUMmBSkM58Vr3ZW+yNTV9DLmtS1ul7fGczzw1Va3Ler+8ruVapevj1spQPtyrRo1jBNahDN6oIg3l70YVaSh7N6pIgkj2RRrqlsWoIg11x2JUkYhJDkQiJzkQaajbFV5FatVCdahHJYdVic7Bg0qUDh5UonXwoJKgkgOV6B08qETx4EElmgcPKlE9eFCJ7sGEStcHpmx0Dx5UonvwoBLdgweV6B48qCSo5EAlugdrTvyVSnQPDvLSRvfgQSW6Bw8q0T3YVylPdA8eVKJ78KAS3YMHlegePKgkqORAJboHDyrRPXhQie7Bg0p0Dx5UontwoFKie/CgEt2DB5VItR5UElRyoBKp1oNKpFoPKuHEf6xS2bFP+Yn7r+t/s8z45X4scbX9WHLfqx9LfHw/lgLLbizxxP1Y4lz7seSuST+W3Nvox5Lc043lTO7px5Lc048luacfS3LPj1n+s5cnlMenl/R09decN/ICeSXyZCot8iQwLfLkNS3ypDst8mRBJfJCctQiT87UIk8q1SJPhtUiL5BXIk+G1SJPhtUiT4bVIk+G1SJPhlUiv5BhtciTYbXIk2HfRD4nuV+e52+vUr+BJ8IqgRfA64AnwCqBJ7++C7yUHXzZjuCx8m8CL/W+8q//8/hffMHJK4HHyL/NyO/f8WVOR/D4eCXw+Hgl8AJ4HfD4eCXw+Hgl8NyGUgLPXSgl8CRXHfAryVUJPMlVCTzJVQk8yfVd4B+Xl3U+ghfA64AnuSqBJ7kqgSe5KoEnuSqBJ7nqgK8kVyXwJFcl8ASoN4Gft/1ySd+eMni1lP3iPH2D8kclQSUHKhHNPKhEjvOgEqHPg0okRA8qEScdqLSRPT2oRFD1oBL3Yz2oRF4yoFLN99c91SxHjXB4Fv6SGu/N2nB49lWaJxyeB5VweB5UwuF5UIm7Sx5UElRyoBJpyYNK3F2yoFKa9ncYJ9mOKnF3yYNKdA8eVKJ7cKBSonvwoBLdgweV6B48qET34EElQSUHKtE9vEklyXVXSdIRPHWCEngaAiXwhH4l8OR4HfCZaK4EnrStBJ4ArQSeTPwu8JdnSs9ZAK8DnuSqBJ7kqgSe5KoEnuSqBJ7kqgN+JrkqgSe5KoEnQL0J/PU5RfMsgNcBT4BSAk+AUgJPgFICT4BSAk+A0gEvBCgl8AQoJfDc+lMCT3JVAi+A1wFPclUCT3JVAk9yVQJPclUCT3LVAb+QXJXAk1x7gL+xJIz2Y0m+7MdSYNmNJZ74TRtVt0Nm5wX7bECjrS77R09HkQrGw4FIOBoHImGVHIgkiGRfJCp+ByJxO8CBSMQkByKRkxyIxC0JAyK1zmleuX/hQSU6Bw8qUTp4UInWwYNKgkoOVKJ38KASxYMHlWgePKhE9eBBJboHEyrJfpr2tBwf4at0Dx5UonvwoBLdgweV6B48qCSo5EAlugdrTvyVSnQPDvJSpXvwoBLdgweV6B4cqLTRPXhQie7Bg0p0Dx5UonvwoJKgkgOV6B48qET34EElugcPKtE9eFCJ7sG+SjLRPXhQie7Bg0qkWg8qCSo5UIlU60ElUq0DldLH96U13a/OdVkbKqUpzY+na9I6fWNzm0DcT7C4n6C4n2B1P0F1P8HmfYI8uZ8guZ8gu5/A/Z6c3e/J2fyevJbHBHVrecbrU8olm9/A+45rfrfvO655a9B3XPM+ouu4s3nT0Xdc8w6l77jm7Uzfcc17n77jSqxxY7mqOZarmmO5qjmWq5pjuSqJ5aoklquSWK5KYrmqz7/CV3fcWK5KYrkqieWqJJarkliuaonlqpZYrmqJ5aqWWK7q82+51B03lqtaYrmqJZarWmLZjBLLZpRYNqPEshklls34/IscdceNZTNKLJtRrO+7+elBuCz527i/J1itf9nm7THB/PR+t9MfW1xcf5vY+vdt/4mtf+X2n9j6t27/ia1/8faf2HrE6z+x9e68/8Tm99feE1fr0bb/xNbTbf+Jw3muOpjnWkXul68lH2LB50/u1x13MLfVGncwq/X1kffL6/rtJ+QvLt72H6fnaTr+3rwOZsq6shnMvnVlM5jR68lmG8wSdmUzmHnsymYwm9mVzWCGtCsbgc0pm8Gsblc2gf1NzfePrln+JrNMkXep6xOqlinyLtViE3mXarGJvEu12ETepVpsIrc3LTaR25sWm8jtTYtN5PYmTftnp6ejQ+9sUuT2psUmsi9usYnsi1tsIvviFhuBzSmbyL64xSayL26xieyLW2zC+OLbuINZ3etOdzF/4nHncQczpK1xB/OYrXEHs42tcSXWuIOZu9a4g/m11riDWbDWuIO5qta4sVyV+SOd+45r/pgctQcDzJ+o80YyW132j55eoAnc1bTQBK5qWmgCNzUtNIFvYLbQBL5/2UBj/qgdRTSBbU0LDb7mFA3P9P357GNQMH82kCYbnuk7Z8MzfedseKbvnA3P9J2zifxMX4PNGvmZvhYbfutyzobfupyzCe2L5fHZy3xkI7A5ZRPaFzfYhPbFDTahfXGDTWhf3GCDLz5lM9rhdT39zWjH3HVlgy8+Z0NffM5GYHPKhr74nA198Tkb+uJzNvTF52zwxadsQp/g12KDLz5ngy8+Z4MvPmcjsDllgy8+Z4P3O2eD9ztng/c7Y1MmvN85G/N7eNmHnfLTtPcXW5TJ/E7bnMD8fticwHyb05zA/L7bnMD87ticwPwe1prA/klzzQnMdwHNCcwn9uYE7vdk+yegNScwvyc/Xov7NU1pecbyWHhJT1d/ffptXvM7eOd5ze/3nec17w46z2veS/Sd1/4pYZ3nNe9TOs9r3tV0nte8B+o8rwSbN5i/sn9WWOd5g/kr+6eFdZ43mL+yf15Y53mD+as5mL+ag/mrWcaaN6f9Bdl5Prwgu8yD2avWuIO5q9a4g5mr1riDeassZR+3HI7zLzLY1is13S+XelRXBtt5W+MOt/Huf7tlTsdxB9t3W+MOV2tcjztcq3E97nClxvW4w3Ua1+MOV2lcjrsM12hcjztcoXE97nB9xvW4sVzVIrHGHc1VPS4v63wcdzRX1Rh3NFfVGHc0V9UYdzRXdT2u/cPa+447mqtqjDuaq2qMO5qraow7mM2Y93dCJUnfmsgXF1+/QKrYP99bkc1gBqYrm8HcTlc2g1mjnmzsn++tyGYw09WVzWAOrSubwexcVzYCm1M2gf3N5ctDi/3Tdt/4X03jZAn7p+0qsom8S7XYRN6lWmwi71ItNpHbmxabyO1Ni03k9qbFJnJ7k6b9VK4kx8d07Z+2q8fG/mm7imwi++IWm8i+uMUmsi9usRHYnLKJ7ItbbCL74habwXyx5LqzkeMzhvYPF+477mDu9Xrc1f4RwH3HHe0nhI1xR/sJYWPcwZxga1yJNe5gfu3697Cr/aOj+447mqtqjDuaq2qMO5qruh7X/nHXfccNdTDDav8g7b7jjuaqGuOG+k3dOtz51o1xQ/2mbh3udOvGuKF+U7cOd7Z1Y9xQv6lbhzvZujFuqN/UrcOda90YN5arGu5U68a4sVzVcGdaN8aN5aqGO9G6MW4sVzXcedaNcT27qtsE4n4Cz97nNoFnO3ObIPBDyZc/1Vsl8CPJW132j55eoAn8ZGkLjedv5TejCfxcaQtN4MdKW2gC/9qqhSbwj61aaALbmgaa0Y5x7omGEwhun338Zec62vnQXdlwAsE5G4HNKRtOIDhnwwkE52w4geCcTeQTCFpsIp9A0GAz2jncXdmE9sWy/+p1Wo43kkY74bsrm9C+uMFGYHPKJrQvbrAJ7YsbbPDF52zwxef+Bl98yib0ueotNvTF52zoi8/Z0BefsxHYnLKhLz5nQ198zgZffM4GX3zOBl98yoY3OVywwRefs8EXn7PBF5+zwfuds8H7nbPB+52zwfudsvn8qfNlvZ8/lNdvLxV79dm/ziP6c/Wv56gan52m7XF0cZ5aK5H7sudpaaxDpn0dMi31odD64uKvG1t/rl3r9iTmq/lmuY83P+v+R5yMOJriLPt4ZTmKMyOOXXEEceyKsyCOXXEK4tgVZ0Ucu+JUxLEhzipHcTbEsSpO/fxbOBDnmzh7CK0vxKEhUBVH1itxaAgMi0NDYFgcQRxFcUq6wyhpPYpDQ2BYHBoCw+LQEBgWh4ZAVZydc0n1KA4NgV1xEg2BYXFoCAyLQ0NgWBwaAsPiCOLYECcfrXSiITAsDg2Brjj5jm5+IQ4NgWorvcmVODQEhsWhIbArTqYhUN1z9pttXxSP4tAQGBaHhsCwODQEhsURxLErDg2BYXE65BxZdz+4SGkhmdY7wJzT8+NAL39iOeUH72memtfX5T5tquuz9C8uvnwfWe3xtlGvZK7f21F7vLtyVDQzaM7QCGjO0CygOUNTQHOGZgXNGZrAtqaFBl9zhqbHK2i9ommcT1IlweaUTWA/3GQT2BA32QhsTtkEtsRNNoE9cZNNYFPcZBPYFTfZBLbFLTZLaF98+Q6cuoT2xQ02oX1xg01oX9xgI7A5ZRPaFzfY4IvP2eCLz/0NvvicDb74lE2hLz5nQ198zoa++JwNffE5G4HNKRv64nM2+OJzNvjiczb44nM2+OJTNiu++JwNvvicDb74nI3A5pQN3u+cDd7vnA3e75RNNb+Hl33YKT9N++v62wTmd9rmBOb3w+YE5tuc5gTm993mBOZ3x+YE5vew5gTmd5rmBOa7gOYE5hN7a4LN/Z68ud+TN/d78uZ+T+7xUsn3TvDP3iP8OMQvlfR0da5/5jW/g3ee1/x+33le8+6g87zmvUTnec07j67zbpN5n9J5XvOupvO85j1Q53nNO6bO80qweWP5q22K5a+2KZa/2qZY/mqbgvmrFMxfpWD+KgXzV2kwf/X1kffL86+br3+u/nNrdevxPhNP4w7mrlrjDmauWuMO5q0eR7amXLbDuHmwrVfq/ajcr//zqG4ebOdtjTvcxrv/7ZY5Hccdrte4Hnewfbc17nCtxvW4w5Ua1+MO12lcjztcpXE97nCNxuW483CFxvW4w/UZ1+PGclX2j4DvO64MNu7j8rLOx3FHc1WNcUdzVY1xR3NVjXFHc1WNcUdzVdfj2j/OvO+4o7mqxrijuarGuDLWuPO2Xy7pWxP54uJtvzhP315o9ofNYJ6kK5vBDExXNoO5na5sBrNGXdkM5qN6srF/VrYim8EcWlc2g9m5rmwGa9S6sgnsby5f4LrZP7n2jf/VXJ/usdk/uVaRTeRdqsUm8i7VYhN5l2qxEdicsonc3rTYRG5vWmwitzdp2k9GS3J8TNf+ybWKbCL74gYb+yfXKrKJ7ItbbCL74habyL64xUZgc8omsi9usRnMF0uuOxs5PmNo/6DevuMO5l5b4w5mSBvj2j9Zue+4o/2EsDHuYE6wNe5g5q41roT6Paz9o6P7jjuaq2qMO5qraow7mqtqjDuaq7oe1/7Z2H3HjXUwg/1Tt/uOK6Ge7R/ufOvGuLF+Uzfc6daNcWP9pm64s62vxi3TcEdbN8aN9Ju6r3Ej/abua9zRTipojCuxxo3kqr7GjeSqvsaN5Kq+xo3kqr7GjeWqhjvQujFuLFfl+jjr2wSejdJtAnE/gWc7c5sg8EPJVz/V+yIT+JHkr5us+0dPRzSjHUncE03gB0tbaDx/3b8ZTeDHSltoAv/aqoUm8I+tWmgC25oWGnzNGZrRjnzu98vOLzacQHDOhhMIztlwAsE5G4HNKRtOIDhnwwkE52win0DQYhP5BIIWG07mOmUz2qHd/4yN7L96nZbjjaTRTvjuyia0L26wCe2LG2wENqdsQvviBht88TkbfPG5v8EXn7PBF5+yCX2ueosNffE5G/riczb0xedsBDanbOiLz9ngi8/Z4IvP2eCLz9ngi0/Z8CaHCzb44nM2+OJzNgKbUzZ4v3M2eL9zNni/UzY9Tp3/uuLORmRpsEnb46O3dWmz2R73AuapybIu6/3yupZrNtc/DOpx5rxXMo0HaHscHT4qmgU0Z2gKaM7QrKA5Q1NBc4ZmA80JmhrY1rTQ4GtO0eS4aFpBocdp68OyEdicsglsiJtsAjviJpvAlrjJJrAnbrIJbIpbbLbArrjJJrAtbrIJ7YuvH0bfQvviBhuBzSmb0L64wSa0L26wCe2LG2zwxeds8MVn/iZN+OJzNvjiczb0xeds6IvP2QhsTtnQF5+zoS8+Z0NffM4GX3zOBl98yibhi8/Z4IvP2eCLz9ngi8/ZCGxO2eD9ztng/c7Z4P3O2eD9Ttlk83t42Yed8vr9R1O3CczvtM0JzO+HzQnMtznNCczvu80JzO+OzQnM72HNCczvNK0JZvNdQHMC84m9OYH7PXl2vyf3eJmD8gTu9+TZ/J78D19i+/j0kp6uzvXPvOZ38M7zmt/vO89r3h30nVfMe4nO85p3Hp3nNe9TOs9r3tV0nleCzWveMXWeN5i/kmD+SoL5Kwnmr5Zg/moJ5q+WYP5qCeavehwA72rewfxVTvfDIr9uQn47oPE27mD2qjXuYO6qNe5g5qo17mDeKkvZxy3bYdwy2NYr9b6Wr//zqG4ZbOdtjTvcxrv/7ZY5Hccdrte4Hne4WuN63OFajetxhys1rscdrtO4HNf+OeV9xx2u0bged7hC43rc4fqM63El1rixXJX9Y93/4biPy8s6H8cdzVU1xh3NVTXGHc1VXY9r/5j0vuOO5qoa447mqhrjjuaqGuNKrHEHsxn/6CVe235xnqZyZDOYJ+nKZjAD05XNYG6nJxv7Z2UrshnMR3VlM5jp6spmMIfWlY3A5pTNYI1aVzaB/c3lC1yz/ZNr1V77m+2fXKvIJvIu1WITeZdqsYm8S7XYRG5vWmwitzctNpHbmxabyO1NmvaT0ZIcHtPN9k+uVWQT2Re32ET2xS02kX1xi43A5pRNZF/cYhPZF7fYRPbFLTaD+WLJdWcj6TjuYFa3MW4ezL22xh3MkLbGHe0nhI1xR/sJYWNciTXuYOauNe5gfu3697DZ/tHRfccdzVU1xh3NVV2Pa/8E677jjuaqGuOGOpgh2z9Iu++4EmvcUL+py8Odb90YN9Rv6vJwp1tfjzvc4daNcUP9pi4Pd7R1Y9xQv6nLwx1s3Rh3tJMKGuPGclXDnWrdGDeWqxruTOvrcYc70roxbixXNdyB1o1xY7kq18dZ3ybwbJRuE3j2PrcJPNuZ3xOUwA8lX/9UrwR+JHmry/7R0ws0nr8834wm8IOlLTSBnyttoQn8WGkLTeBfW7XQBP6xVQPNaEcz90SDrzlFwwkEt89+8cvO0c6H7spGYHPKhhMIztlwAsE5G04gOGfDCQTnbCKfQNBgM9rR2l3ZcDLXOZvQvlj2X71Oy/FG0mgnfHdlI7A5ZRPaFzfYhPbFDTahfXGDDb74nA2++NTfhD5XvcUGX3zOhr74nA198Tkbgc0pG/riczb0xeds6IvP2eCLz9ngi8/YzBO++JwNvvicDb74nA2++JyNwOaUDd7vnA3e75wN3u+cDd7vlE2XU+f3gwvLvNQGmyzlz8XztDwt59Uny5TuD3LK9PTJeX1x8Vru1651e0L44tJllj+XLvMz7T9I5ohIlvulS1mOSAQkfyNZQPI3kgKSv5GsIPkbSQXJ30i22EhWOSDpcg79YEhSSCS7VasvkIR0r7JeIQnpXq+RCEj+RhLRvZa0Z/i0HpFEdK8NJBHdawNJRPfaQBLRvZZ9upLqAckc0b02kER0rw0kEd1rA0lE99pAIiD5G0lI9/pAko+b8BzSvV4jCelep7wv+AWSkN3rJldIQnavl0gkZPd6jSSke90rpFKmI5KQ7vUaSUj3eo1EQPI3kpDu9RpJSPd6jaSDL0nLo7fb5gaSZX3cMHha+X09Pd6C0HU9ydh6srH1zB9eT5m2PYzJi/WIsfUsxtZTjK1nNbaeamw928fXcz8Uo0zluJ4yGVtPMraebGw9s7H1iLH1LMbWU4ytZzW2nmpsPca+n1dj38+rse/n1dj382rs+3k19v28Gvt+Xo19P6/Gvp9XY9/Prw9irfVuutO0dl1O+mpU9kmX9bnFua0nG1vPbGw9Ymw9i7H1FGPrWY2tpxpbz2ZrPa8PJ1Rcj7Hv583Y9/Nm7Pt5M/b9vBn7ft6MfT9vxr6fN2Pfz5ut72eZbH0/y2Tr+1kmW9/PX3dqP7ue69txMhVby/nwX9d1GJQ02VpOsrWcbGs5s63lyL+/nPlpOdL64tnWp8N9nt8uWP4saLG2oGJtQau1BVVrC9qMLShP1haUrC0oW1vQbG1B1r6ps7Vv6mztmzpb+6bO1r6ps7Vv6tnaN/Vs7Zt6tvZNPVv7pp6tfVPP1r6p5w9/U+cp3X/Y9/V/zi8WtFpbULW2oM3YgmSytqBkbUHZ2oJmawsSawtarC3I2je1WPumFmvf1GLtm3qx9k29WPumXqx9Uy/WvqkXa9/Ui7Vv6sXaN/Xy8W/q/b5Insr2YkHV2oI2xQXV9G1Bx6vnbb9HPG/P5y7Li4u/It3+M9+5zs8X/x61THFGTXFGzXFGneOMKnFGXeKMWuKMutoZ9feC1k/vfmm6A/r6P9cXC0rWFvTp75yUd/eacnmxoMXagoq1Ba3WFvRpf5/WaV9QrS8WtBlbUJ30FpSn6ZN7QE1xRs1xRp3jjCpxRl3ijFrijLrGGVXReeRvLzG9b/SbsQVtH3ce5WEWy4vAsSVrC8rWFjRbW5BYW9BibUHF2oJWawuq1ha02VrQMhn7pl4mY9/Uy/Tpb+ose3mWy/xiQbO1BYnigtblg9ZvmZY4o5Y4o65xRq1xRt3CjJqmOKOmOKNmO6PeFvTx3W+7f3Sep/RiQZ/+NptT2ReUpxcL2owt6NO/RW4vKFlb0Kf/yuYi+4JqfrGg2dqCRHFBm3zyK/fTv3LWHLXEGXWNM2qNM+oWZtR5ijNqijOqovOQ6fhI1TLP1hYkn17Q8jCL5UXgmBdrCyrWFrRaW1C1tqDN2II+/tv65oKStQVlawuarS3I2je1WPumFmvf1GLtm1qsfVOLtW/qxdo39WLtm3qx9k29WPumXqx9Uy/WvqkXa9/Ui7Vv6sXaN/Vi7Zu6WPumLta+qT/+a3J5LEheHFO3fPw3380FvfWb+vZPLO//J8r7/4n1/f9Eff8/sb39n3jvL5Nv/0R6/z+R3/9PzO//J97/172+/697ff9f9/r+v+71/X/d6/v/uuv7/7rr+/+66/v/uuv7/7rr+/+66/v/uuv7/7o7/G4wP156ktPScF2NdyEtHX7c13c9m631dPhpX9/1JGPrycbWMxtbjxhbz2JsPcXYeox9P2/Gvp83W9/PZbL1/VwmW9/PZbL1/VwmW9/PZfr3v5/nXO/rmZfaWk++PwKUluNvC0uHH9x1XU6xtZzV1nLqZ5eTHw/jTfXbco7XypT2h/Gmp0/++u/+ePG6P7i3Pr8RdH71uem+YJnT9aXztL8o5Wu9T5/78uHBtOzrTevh4cHS4ddtsP4h6w4/r4P1T1knWH+MdYb1x1jPsN4vvRGRgETKvQ2Vko9EFoj8RaRA5C8iK0T+IhIxdWz3yC/bi2/WiNngkkiO6OCviUT02ddEArrhZf/YJZUjkYCetUFEIPIXkYCetUEkoB9Z5nsxvMxHInPAvabIel9wmY5EAu41DSKW95ok6dHtbM9Ebmu3vCt83eW7XLvl7++U1n3tdTqu3XI70Fq75RzfWvuHd7i5yv6FVBprT/O+9q//8/ukt8Vvjhcvk+fFJ8+Lz5YXL4/Fy6vFz54XL54Xv3hefLG8+PXxHFOdXix+9bx40ztsa/Gmd9jG4hfL3/My3W9If/2fy4vFW/6eby7e8rfNl/O6L6Msr/6zsfxt01y85W+bb4vfXize8rdNqfeXi6T1xQHWpVj2883FW/bzzcV/+nt+f2m0rFtj8ct6PxjgKzM9PvdlAZceP7BLqS6HrF7mIHNKkDmXIHOWIHOuQeasQebcYsy5TkHmTEHmDOKH1iB+qMPxMj7mDOKH1iB+aA3ih9YgfmgN4odqED9Ug/ihGsQP1WH80HZ/zinlaT7OKUHmHMYPPc9Zj3OO4ody2m+L5ZyOc47ih1pzjuKHvs1ZjnMO44c2ecx5PEdmG2X/nOf7xWkWOc45yv7ZmnOU/bNx/tE2yv55Pec6fVjPJe2HVE3Nt2g/nrefU31ae/6z9sXx2ovjta+O114dr33zu/ZPn53Ude3J8dqz47XPjtfueF9NjvfV5HhfTY731eR4X02O99XseF/NjvfV7HhfzY731U+fvNF17Y731ex4X82O99XseF/NjvfV2fK+mvcfKc/5+UTN+9ot76uttVveV/Pejc/56QdU+9ot76uttVveV/N+usycn88uua/d8r7aWrvlffV57a++Iy3vq621W95XW2v/8L5a0v2Ty1+ve3hxv2lK+/3DSb6t/XixyHz/dZ7Iiz+OTx9zojdoijJojjLoHGVQiTLoMsyg2/3RJFmm4/by6eNe9Abt4F+2/bWmIs13bm2Poy+29ekZ3F856NWo837kwZTW6dv1twGq9wE25wMsk/cBkvcBsvcBZu8DiPcBFu8DFO8DeN+JF+878WJ9J14fvi99O2L65fVfTvJ+eVmfTeVt2mJ92+47rfU9vu+01g1B32mtu4e+00qoaa37kr7TWjcxfae17nj6TmvdHvWdNpSXWkN5qTWUl1pDeak1lJfqcTKUo2lDeak1lJdaQ3mpNZSXWkN5qRrKS9VQXqqG8lI1lJfqcaqUo2lDeakaykvVUF6qhvJSNZSX2kJ5qS2Uu9hCuYseZ245mjaUu9hCuYstlLvYQrmLLZK7qJPx/TY/PfCVJX+7/jaA8a/ZvD0GmCf5t66/DWz8m7b/wMa/bPsPbPz7tv/Axr9yuw+cjGe6/gMbr8j7D2x9X+0+sPEo239giTZwNKeVxnJaq+wn3K8lH5JAGstmtaYdy2O1ph3LYNXlfvZSqmt5nvbVUvYfT+fp23u2b2jyWFasK5qxTFtXNGPZu65oxjKCXdEIaM7QjGUuu6IZy4Z2RTOWZ+2KZiyD2xPNHNfXfNndP9d+bUZHMIH3p687TY/PfvHfTOD9qYUm8P7UQhN4f2qhCbw/tdAEbmsaaCRwW9NCE7itaaEJ3Nakaf/sJNsRTeC2poVGQHOGJrAbbqEJ7IZbaAK74RaawG64hSawG26gsX5qryaaKG74Nu1YBrfR31o/abjztBJq2rGcZWvascxia9qx/F9r2rEsXWvasVxaY1rr5y53nnYsL9WaNpSXsn7ucudp5d+eVtb7k7ZlkdKYNk/rffk5p/Yj6a3j7WuHo5SVByjeB1i9D1C9D7A5H6DDScPKAyTvA2TvA8zeB/C+E6/ed+LV+k7c9ZyL1fq23Xda63t832mtG4Ku01br7qHvtNatRt9prfuSvtNaNzF9p5VQ01q3R32nDeWlaigvVUN5qRrKS22hvNQWykttobzUFspLdThJ2NO0obzUFspLbaG81BbKS22RvNQ2RfJS2xTJS21TJC+1TZG81DZJqGkjealtiuSltimSl9qmUO4ihXIXKZS7SKHcRQrlLjqcku1p2lDuIoVyF8n4ftt6U86WjX/N9j6/fcvGv2n7D2z8y7b/wMa/b/sPbPwrt//AxjNd/4GNV+T9B7a+r/YeeDYeZfsPbDzN9h84mtOax3Ja129T2Tock+xp2rE8VmvasQxWx2PTt3ksK9YVzVimrSuasexdTzQylhHsimYsy9gVzVjmsiuasWxoVzQCmjM0Yxncrmji+prLN+VsS+D96fqw/W0JvD+10ATen1poAu9PLTSB96cWmsBtTQtN4LamhSZwW9NCE7ituT5RfiuB25oWmsBuuIUmsBtuoQnshltoBDRnaAK74RaawG64hSawG26hieKGb9OOZXAb/a31k4Y7TzuWDW1NO5azbE07lllsTSuhph3L0rWmHcultaYdy3i1ph3LS7WmDeWlrJ+73Hnat34n3/6J8v5/Yn3/P1Hf/09sb/8n3nsQ5u2fSO//J/L7/4n5/f+EvP+feP9f9/b+v+7t/X/dHQ6sK9P9V+iliLS+9Dep96/lrT7/CP3V1cualj9XL+vSfPXa9NghUp5aV+f9dxLL93XcwGyAeQFmnTocgzcomASY12ByVDBZ7jPOU22sQ6Z9HTItj6vz+uLitdyvXb+d+/Hqc9Mdhszp+tJ5WufHep8+V15+7rKvNz0dJ/J18U31GdUDqi6oHlD1BdUDql5QPaDqK6obVP2mTdg0b0Kbcn9PvJR81CZsoWBfmxS203CgTdhaxYE2NDua2uwLlu3oBRL9i11tBG3MakOXYVcbGgdFbZbHeKkctaEXsKsNvYBdbegFzGqTyTea2sz3xwqW+YU2+DRFbYqsO7rpqA0+za42+LSfaJNkL77Suj1rc6OIo/oRxXm5pIj3+RHFtO4U63SgOHP3ogdF7jP0oBjWMc9V9s28NNaR5p3i1//5nfkNY9jyvi9GAWMPjGGjVl+MYVPRP8MoD4zyCmPYANMXY9gE0xdj2AjTFaOEzTD/DOO6A5mf3PcDY9gQ0xcjKaYLRlJMF4z4xp9glGk/+fmrTn+BkZ36JxiL7J9clhf/NS7s1F0wslP/Y4zbC4zs1D/CWPOOccsvMLJTd8EoYPxnGNcpvcBI39gFI76xC8a4feOyPwOxbs117CPKA0d6+SxL+urH91XUx5rvNxGXuNWkFvG42UiJeIkbo7SIx01cWsTjhjMt4nFznBZxgfiHicdNh1rE4wZJLeJkzk8TJ3N+mjiZ88PEVzLnp4mTOT9NnMz5aeJkzk8TF4h/mDiZ89PEyZyfJk7m/DRxMmd34tt9zV+LmI/EyZwfJl7JnG8lXo/EyZy9iee0P1qeczoSJ3N+mjiZ863Ey5G4QLz797g8iK9H4vjx3sTn+X5xmp947MTx458mjh/vTlwevyZcjt8qG37808TD/je+pPvF5a8fZL5Q53Hg3pzqE8Xf72tfU9zXznalGDYbdqUYNu91pRg2w3WlKFDsQDHs/b2uFMPes+tKMWzu70oxbJbvSpHs0oFi3NdLdqVIdulBkezSgyLZpQdFgWIHimSXHhTJLj0okl16UCS79KBIdulAMZNdelAku/SgSHbpQZHs0oOiQLEDRbLLTyjm/c0yc57TkSLZpQdFssuPKO5P9M356WDrnSLZpQdFssuPKO4vxZ3z8+tF/1CM+2LMrhTJLv+U4gunE/fFmF0pkl16UJSoFEu6z1iW1jrSlPbfLkzyjeLxYpH5foq4yKsv0bBBRw952FSkhzxshNJDHjZv6SEPG87UkMd9PegbkW/3H3zLMh1NYtxXieohHykj5nlHniV/u/o27EhRrjmsRBp2JBeY91dJpfnpWIyTq7fHO0i39enAr1+3G159dzxITmmdvl1/QzmSu1NGOZJr00U51CtglVGO5LKUUQ7lnnRRDuXNdFEKKHuhHKlDV0Y5UjeujJK00w0laacbStLOT1GujwIv1a11/VcleL+8rM9z3rgP9VpXT9zJUTrcCV063EloOtwF7ircyX463AmKOtxJlTrciaA63MmrKtyHeiWsJ+7kVR3u5FUd7uRVHe4CdxXu5FUd7uRVHe7kVR3u5FUd7uRVFe5DvU7WE3fyqg538qoOd/KqDneBuwp38qoOd/KqDnfyqg538qoOd/KqCvehXrfsiTu5SYc7uUmHu8BdhTu5SYc7uUmHO7lJhzu5SYc7uUmDe57w7z/k/nQa1/R8HNf9p8B5qHfbvxfl45TAaZ7k37r+hh6XooYeo6KGHq+ihh67ooU+0fSqoefhJDX0+HQ19FTtaugF9FroSbNq6Emz70G/yr6WteRDF5aIsjrcybE63Amx7+Fel/sLkFNdyzP3V0vZ31WSp6kcRMrEXQciEYwdiESEdiASYduBSIJI9kUiwDsQiajvQCR6AQciUSLYF2kmJ+mLVPP9o2uWo0SCRPp/R1OeH5/94u8Ib+dAJLydA5Hwdg5Ewts5EIm7SfZFEu4mORCJlORAJO4mGRApTftnJ9mOInE3yYFIgkj2RaJxcCASjYMDkWgcHIhE4+BAJBoH+yItNA4ORKJx+LRIN+6UCO/h3ngOYaEX0OEucFfhTnrX4U4g1+FOxtbhTmzW4U4SVuFeCLc63MmrOtzJqzrcyas63PHv7+He7/cKBauvL9FWl/2jp6NGKzbJvkZYKvsaYb/sa4RVs6+RoJF5jbhlYV8j4pF9jchH9jXitom+Rq0f/KzcY7EvUqVpcCASVYMDkegaHIhE2eBAJEEk+yJRNzgQib7BgUgUDg5EonGwIJI8Pns5vpu50jjYF2mjcXAgEo2DA5FoHByIROPgQCRBJFsW/JVINA72c9JG4+BAJBoHByLRODgQicbBvEjzROPgQCQaBwci0Tg4EInGwYFIgkj2RaJxcCASjYMDkWgcHIhE4+BAJBoH+yIlGgcHIhFmHYhEmHUgkiCSfZEIsw5EwoL/VKSyU5/yE/Zf199QYpR7oczY2W4ouc3VDSX+vRtKXHY3lALKXihxrN1QcpOkG0puZXRDSdrphpK00wvlTNrphpK00w0laeenKJdHxZZLaV1fHp9e0tPVuf4BTzZSAi+A1wFP7lICT0pTAk+mUwJPAlQCT17UAS+kSyXwZFEl8CRXJfAkVyXwAngd8CRXJfAkVyXwJFcl8CRXJfAkVx3wC8lVCTzJ9T3gc9rXkn89rr/P+Yc7wVWHO7lVh7vAXYU7qfVN3KXs3Mt25I6Ffw93qel+udQX/73j4FW4Fwz8uwz8vpYypyN3/LsOd/y7Dnf8uw53gbsKd/y7DnduOulw556TDnfyqg538qoK95W8qsOdvKrDnbz6Ju6Py8s6H7mTV3W4C9xVuJNXdbiTV3W4k1d1uJNXdbiTV1W4V/KqDndy03u4z9t+uaRvzxO8Wsp+cZ6mchSJkOVAJEEk+yIR3xyIRNZzIBLB0IFIpEgHIhE57Yu0kU8diMTNVwciCSKpi1Tz/TVNNctRIrydgb+jxuuuNrydA5HwduZFkglv50AkvJ0Dkbib5EAk7iY5EEkQyb5I3E0yIFKa9lcOJ9mOInE3yYFINA4ORKJxcCASjYN9kRKNgwORaBwciETj4EAkGgcHIgkivedkuVx3kSQduVMi6HCnF9DhTtTX4U561+FOIFfhnsnYOtyJzTrcScJv4n55MrRkwq0Od4G7Cnfyqg538qoOd/KqDnfyqg538qoK95m8qsOd3PQe7tcnD8lMbtLhLnBX4U5u0uFObtLhTm7S4U5u0uFOblLhLuQmHe7c59PhTl7V4U5e1eEucFfhTl7V4U5e1eFOXtXhTl7V4U5eVeG+kFc7cL+hJIJ2Q0mq7IaSoNgNJV74PXtUt7NiZcE260u01WX/6OmoUcFy2NcIL2NfI0ySfY1wX/Y1EjQyrxH1v32NiEf2NSIf2deIWxD6GrUOWy7cr7Av0krT4EAkqgYHItE1OBCJssGBSIJI9kWibnAgEn2DA5EoHByIRONgQSTZT8SeluOTeiuNg32RKo2DA5FoHByIROPgQCQaBwciCSLZsuCvRKJxsJ+TKo2DA5FoHByIROPgQCQaB/sibTQODkSicXAgEo2DA5FoHByIJIhkXyQaBwci0Tg4EInGwYFINA4ORKJxMC/SMtE4OBCJMOtAJMKsA5EEkeyLRJi1L1IybhzK/c1sS53nFvaS9ve4FZm+XX0b1njl33dY426j77DGv2v+ybD56zvj/tl5ba5kWqf96iTN75o0Px5MS+v07fobSuP1lieUxksoTyiNV0WeUBovdByhzAO5J22UA3kzbZQDOT9tlMbbIE8oBZS9UJJ2uqEk7XRDSdr5Kcq1PFDWrXX99etilkw00uFOjlLhPhO6dLiT0HS4E+d0uJP9dLgL3FW4kyp1uBNBdbiTV3W4k1d1uJNXVbgLeVWHO3lVhzt5VYc7eVWHu8BdhTt5VYc7eVWHO3lVhzt5VYc7eVWF+0Je1eFOXtXhTl7V4U5e1eEucFfhTl7V4U5e1eFOXtXhTl5V4V7ITTrcyU063MlNOtzJTTrcBe4q3MlNOtzJTTrcyU0q3Ff8+w+556efAmfJ366/ocSi/BTl9kA5T//e9Tf0Anot9BgVNfR4FTX02BU19DS9auh5OEkLfcWnq6GnaldDT9uuhp40q4ZeQP8W9Kvs7zNYSz50YZUoq8OdHKvDnRD7Hu51ua8l1bU8c39x8ba/2CRPUzmKRNx1IBLB2L5IGxHagUiEbQciEcsdiESAdyCSIJJ9kegFHIhEieBAJHKSvkg13z+6ZvlbomL9fd0x/o6uX2BbrL+vG5F+iSSIZF8kvJ0DkfB2DkTibpIDkbib5EAkUpJ9kRJ3kwyIlKb9s5NsR5G4m+RAJBoHByLRODgQSRDJvkg0Dg5EonFwIBKNgwORaBwciETj8GmRfnPPlAjv4X79HELJ9AI63In6OtxJ7zrcBe4q3MnYOtyJzTrcScI63Am3OtzJqyrcZ/KqDnfyqg53gbvx3yvMWH19iba67B89vdAIm2RfIyyVeY0E+2VfI6yafY24DWFfI25Z2NdI0Mi8RuQj+xpx20Rfo9YPfoR7LA5EomlwIBJVg32RFroGByJRNjgQibbBgUjUDQ5EEkSyLxKFgwORaBwsiCSPz17mo0g0Dg5EonFwIBKNg32RCo2DA5FoHByIRONgzIK/EonGwX5OKoJI9kWicXAgEo2DA5FoHByIROPgQCQaB/sirTQODkSicXAgEo2DA5FoHByIJIhkXyQaBwci0Tg4EInGwYFINA72RaqEWQciEWYdiESYdSASYdaBSFjwn4pUdupTfsL+6/obSoxyN5TY2W4ouc3VC+WGf++GEpfdDSVeuBtKHGs3lALKXii5ldENJWmnG0rSTjeUpJ1uKEk7nVCuE2nnpyiXR8WWS2ldX6b98pKers71D3iykRJ4kpQSeHKXEngBvA54Mp0SeBKgEnjyohJ40qUSeLKoDvhEclUCT3JVAk9yVQJPclUCL4DXAU9yVQJPclUCT3JVAk9yVQJPcn0P+K+PvF+efz2uv895454Jrjrcya063ImtOtxJrW/iLmXnXrYjdyz8e7hLva/86/988d87Dl6HOwb+XQZ+/34vczpyx7+rcJ/x7zrc8e863PHvOtzx7zrcBe4q3LnnpMOdvKrDnbyqw528qsOdvKrCXcirb+L+uLys85E7eVWHO3lVhzt5VYe7wF2FO3lVhzt5VYc7eVWHO3lVhftCbnoP93nbL5f07XmCFxdv+8V5mspRJEKWA5FIZA5EIr45EEkQyb5IBEMHIpEiHYhE5HQgEvnUgUjcfLUvUiEn6YtU830lNctRIrydgb+j69ddrQVv50AkvJ0DkfB2DkTC29kXaeVukgORuJvkQCRSkgORuJtkQKQ07a8cTnI8qWIVRLIvEo2DA5FoHByIROPgQCQaBwci0TjYF6nSODgQicbBgUg0Du8RSXLdRZLjL5crJYIOd4G7Cneivg530rsOdwK5Dncytg53YrMK940k/Cbu1ydDb4RbHe7kVR3u5FUd7gJ3Fe7kVR3u5FUd7uRVHe7kVQ3udSI3vYf79clDdSI36XAnN+lwJzfpcBe4q3AnN+lwJzfpcCc36XAnN+lw5z6fCvdEXtXhTl7V4U5e1eFOXtXhLnBX4U5e1eFOXtXhTl7V4U5e7cD9hpII2gtlJlV2Q0lQ7IZSQGn7rNiasc36Em112T96eqERlsO+RngZ8xrNmCT7GuG+7GtEpW9fI+p/+xoJGpnXiHxkXyNuQehr1Dhsuc7cr3AgEk2DA5GoGuyLJHQNDkSibHAgEm2DA5GoGxyIJIhkXyQKBwci0ThYEEn2E7Gn5fikntA4OBCJxsGBSDQO9kVaaBwciETj4EAkGgdjFvyVSDQO9nPSIohkXyQaBwci0Tg4EInGwYFINA4ORKJxsC9SoXFwIBKNgwORaBwciETj4EAkQST7ItE4OBCJxsGBSDQODkSicbAv0kqYdSASYdaBSIRZByIRZh2INJAFT2WR+7LL07J/XX0bdqDKP9W6C7vJ1rp6mx5Xr0vzv8g0Px5fSuv07frfKOtAXkYb5UCOQxvlQL5AG+VAu7c2SgFlL5QD1braKEdyfsooB6pItVEOVGRqoyTt9EK5kXa6oSTt/BTlWh4o69a6vvFSkY1opMOdHKXDXeCuwp2EpsOdOKfDneynw52gqMOdVKnBfZuIoDrcyas63MmrOtzJqzrcBe4q3MmrOtzJqzrcyas63MmrOtzJqyrcE3lVhzt5VYc7eVWHO3lVh7vAXYU7eVWHO3lVhzt5VYc7eVWHO3lVhXsmr+pwJ6/qcCev6nAXuKtwJzfpcCc36XAnN+lwJzfpcCc3qXCfyU063MlNOtwF7j/jnp9+Cpwlf7v+hhKL8lOU2wPlPMm/df0NPS5FDT1GRQu94FXU0GNX1NDT9Kqh5+EkNfQCei30VO1q6Gnb1dCTZtXQk2bfg36V/UD1teRDFyZEWRXuCzlWhzsh9j3c63J/u0aqa3nm/mop++sv8jSVo0jEXQciEYwdiCSIZF8kwrYDkYjlDkQiwDsQiajvQCR6AfsiFUoEByKRk/RFqvn+0TXLUSK8nYG/o+vXnG4jvcR+XJHwdg5EwtvZF2nF2zkQibtJDkTibpIDkUhJDkQSRNIXKU37Z6enhe8icTfJgUg0Dg5EonFwIBKNgwORaBzsi1RpHByIROPgQCQaBwci0Th8WqQbd4H7W7g3nkOo9AI63In6OtxJ7zrcCeQ63MnYKtw3YrMOd5KwDnfCrQ538qoOd4G7Cnfyqg73kfLqVh6zzlNrJdN6B5lzah9qk55Ox03r9O36G8qRIqgyypFSpTLKkYKiJso6TSNlP2WUI8U5ZZQjJTRllCOFLmWUAspeKEeKRsooSTvdUJJ2uqEk7fwUZcc3A31xJxqpcE/kKB3uhC4d7iQ0He7EOR3uAncV7gRFHe6kSh3uRFAd7uRVHe7kVRXumbyqw528qsOdvKrDnbyqw13grsKdvKrDnbyqw528qsOdvKrDnbyqwn0mr+pwJ6/qcCev6nAnr+pwF7ircCev6nAnr+pwJ6/qcCev6nAnr6pwF3KTDndykw53cpMOd4G7Cndykw53cpMOd3KTDndykwr3Bf/+Q+756afAWfK3628oBZQ/RPnPjkG7vP6GHpeihh6jooYer6KGHruihp6mVwt94eEkNfT4dDX0VO1q6Gnb1dAL6LXQk2bfg34VuV++lnzowgpRVoc7OVaHOyH2Pdz/0ctPL1/y8CUScde+SCvB2IFIRGgHIhG2HYhELHcgkiCSfZGI+g5EohdwIBIlgn2RKjlJX6Sa7x9dsxwlwtsZ+Dua8vz47Bd/R4JI9kXC2zkQCW/nQCS8nQORuJvkQCTuJtkXaSMlORCJu0kGRErT/tlJtqNI3E1yIBKNgwORBJHsi0Tj4EAkGgcHItE4OBCJxsGBSDQO5kX6+v+LSB8W6cadEuE93K+fQ/j6OLircCfq63AXuKtwJ5DrcCdj63AnNutwJwnrcCfcqnBP5FUd7uRVHe7kVR3u+Hf98vLy9wopYfX1Jdrqsn/09EIjbJJ5jTKWyr5G2C/7GmHV7GvEbQj7GgkamdeIeGRfI/KRfY24baKvUeMHPylzj8WBSDQN9kWaqRociETX4EAkygYHItE2OBBJEMm+SPQNDkSicHAgEo2DBZHk8dnLfBSJxsGBSDQO9kUSGgcHItE4OBCJxsGBSDQOxiz4K5EEkcznJKFxcCASjYMDkWgcHIhE4+BAJBoH+yItNA4ORKJxcCASjYMDkWgcHIgkiGRfJBoHByLRODgQicbBgUg0Dg5EonGwL1IhzDoQiTDrQCTCrAORBJHsi4QF/6lIZac+5Sfsv66/ocQod0OJne2FcuU2VzeU+PduKHHZ3VDihbuhFFD2QslNkm4ouZXRDSVppxtK0k43lKSdXigraacbStLOT1Euj4otl9K6vkz75SU9XZ3rH/BkIyXwJCkl8AJ4HfCkNCXwZDol8CRAJfDkRSXwpEsd8BtZVAk8yVUJPMlVCTzJVQm8AF4HPMlVCTzJVQk8yVUJPMlVCTzJVQV8nkiu7wH/9ZH3y/Ovx/X3Of9wJ7jqcCe36nAntupwF7i/h7uUnXvZjtyx8O/hLvW+8q//88V/7zh4He4Y+HcZ+P37vczpwD3h33W44991uOPfdbjj33W4C9xVuHPTSYc795x0uJNXdbiTV3W4k1dVuGfyqg538uqbuD8uL+t85E5e1eFOXtXhLnBX4U5e1eFOXtXhTl7V4U5e1eFOXlXhPpOb3sN93vbLJX17nuDVwrfHwqdyFImQ5UAkEpkDkQSR7ItE1nMgEsHQgUikSAciETkdiEQ+tS+ScPPVgUjkJH2Rar6v5EuQo0R4OwN/R9evu8qCt3MgEt7OgUh4O/siLXg7ByJxN8mBSNxNciASKcmBSIJI+iKlaX/lcJLjSRULd5MciETj4EAkGgcHItE4OBCJxsG+SIXGwYFINA4ORKJxcCASjcN7RJJcd5Hk+MvlInBX4U4voMOdqK/DnfSuw51ArsOdjK3CfSU263AnCb+J+/XJ0CvhVoc7eVWHu8BdhTt5VYc7eVWHO3lVhzt5VYc7eVWFeyU3vYd74+ShSm7S4U5u0uEucFfhTm7S4U5u0uFObtLhTm7S4U5uUuG+cZ9Phzt5VYc7eVWHO3lVh7vAXYU7eVWHO3lVhzt5VYc7eVWHO3m1A/dfKOeJCNoNJamyG0qCYjeUeOH37FHdzoqdJ2yzvkRbXfaPnl5ohOUwr1HCy9jXCJNkXyPcl32NqPTtayRoZF4j4pF9jchH9jXiFoS+Ro3DlufE/QoHItE02BcpUzU4EImuwYFIlA0ORKJtcCCSIJJ9kegbHIhE4eBAJBoHCyLJfiL2tMxHkWgcHIhE42BfpJnGwYFINA4ORKJxcCASjYMxC/5KJEEk8zlppnFwIBKNgwORaBwciETj4EAkGgf7IgmNgwORaBwciETj4EAkGgcHIgki2ReJxsGBSDQODkSicXAgEo2DA5FoHOyLtBBmHYhEmHUgEmHWgUiCSPZFGsmC17rPusnWlHR6XL0ubZG2xxM989QUtS7r/fK6lmuRrs9PW0Yy4F4lapwPUEaydqNqNJKzG1WjkYzdqBoJGpnXaKR7FKNqNNItilE1Ih7Z14h8ZF+jke5PeNWo1QWtIz0ROaxINA0ORKJqcCASXYMDkQSR7ItE2+BAJOoGByLRNzgQicLBgUg0DhZEuj4GpdI4OBCJxsGBSDQODkSicXAgkiCSfZFoHIxZ8Fci0TjYz0mVxsGBSDQODkSicbAv0kbj4EAkGgcHItE4OBCJxsGBSIJI9kWicXAgEo2DA5FoHByIROPgQCQaB/MiyUTj4EAkGgcHIhFmHYgkiGRfJMKsA5EIsw5EwoL/VKSyU5/yE/Zf1/9GmTDK3VBiZ7uh5DZXN5T4924oBZS9UOKFu6HEsXZDyU2Sbii5ldENJWmnF8pM2umGkrTTDSVppxtK0s5PUf6z1x+Ux6eX9HR1rn/AC+B1wJOklMCTu5TAk9KUwJPplMCTAHXAz+RFJfCkSyXwZFEl8CRXJfACeB3wJFcl8CRXJfAkVyXwJFcl8CRXHfBCclUCT3JVAk9yfQ/4nOR+eZ6/vfn8xp3gqsNd4K7Cndiqw53U+ibuUnbuZTtyx8K/h7vU+8q//s/jf+8LDl6HOwb+XQZ+/34vczpyx7/rcMe/63AXuKtwx7/rcMe/63DnppMOd+456XAnr6pwL+RVHe7kVR3u5FUd7uTVN3F/XF7W+chd4K7Cnbyqw528qsOdvKrDnbyqw528qsJ9Ja/qcCev6nAnN72H+7ztl0v69jzBq6XsF+dpKkeRBJHsi0QicyAS8c2BSGQ9ByIRDB2IRIq0L1IlcjoQiXzqQCRuvjoQiZykL1LN99c01SxHifB2Bv6OGq+7qng7+yJteDsHIuHtHIiEt3MgEneTHIgkiGRfJFKSA5G4m2RApDTtrxxOcjypYuNukgORaBwciETjYF6kZaJxcCASjYMDkWgcHIhE4+BAJEEk+yLROLxHJMl1F0nSkTslgg53egEd7kR9He6kdxXuiUCuw52MrcOd2KzDnST8Ju6XJ0MvSeCuwp28qsOdvKrDnbyqw528qsOdvKrCPZNXdbiTV3W4k5vew/365KElC9xVuJObdLiTm3S4k5t0uJObdLiTm1S4z+QmHe7kJh3u3OfT4U5e1eEucFfhTl7V4U5e1eFOXtXhTl7V4U5eVeEu5FUd7uTVDtxvKImg3VCSKruhFFD2QokXfs8e1e2s2EWwzfoSbXXZP3o6arRgOexrhJexrxEmyb5GgkbmNaLSt68R9b99jYhH9jUiH9nXiFsQ+ho1DlteCvcrHIhE0+BAJKoGByLRNTgQSRDJvki0DQ5Eom5wIBJ9gwORKBwciETjYEEk2U/Enpbjk3orjYMDkWgcHIhE4+BAJBoHByIJItkXicbBmAV/JRKNg/2ctNI4OBCJxsGBSDQO9kWqNA4ORKJxcCASjYMDkWgcHIgkiGRfJBoHByLRODgQicbBgUg0Dg5EonGwL9JG4+BAJBoHByIRZh2IJIhkXyTCrAORCLPmRSrTh/ekedqvnqdZGiJ9Lfmx+lofn71Or1ZS7x+9ykPQ+uqDZbn/3HtJ6fnSGxQByhHKApQjlAKUI5QVKEcoFShHKFtIKEta71CWen1pSovc15DK43NzWW8I0wTCfxdh+jRCuS9oztPSRJjmx7PEv8E92cPbANn7ALP3AcT7AIv3AYr3AVbvA1TvA2zOB8iT9wG878TZ+06cre/Ea3kMULdvA7y4/vpNK+XTb5hXntb6Ht93WuuGoO+01t1D32mtW42+01r3JV2nna2bmL7TWnc8fae1bo/6ThvKS3367cfK04byUnMoLzWH8lJzKC81h/JSEspLSSgvJaG8lITyUp9+QajytKG8lITyUhLKS0koLyWhvNQSykstobzUEspLLaG81Kdf96k8bSh3sYRyF0sod7GEchcllLsoodxFCeUuSih3UYzvt/npga8s+du0twGMf83m7THA/PRm1tPfUl5c/3vg1fg3bf+BjX/Z9h/Y+Pdt/4GNf+X2H1iiDWy8Iu8/sPV9tfvAxqNs/4GNp9n+A0dzWnUsp7Xun/4VIfIhCdSxbFZr2rE8VmvasQxWXe4/nk51Lc/Tvrh420+bydNUjmgENGdoxjJtXdGMZe+6ohnLCHZFM5Zl7IpmLHPZE802lg3timYsz9oVzVgGtyuauL6m5vtH1yxHMIH3p8Y5k1vg/ekazToF3p9aaALvTy00gfenFprAbU0LjYDmDE3gtqaFJnBbk6b9s9PTwd87msBtTQtNYDfcQhPYDTfQpMBuuIUmsBtuoQnshltoArvhFhoBzRmaKG74Nu1YBve6v12tnzTcedqxbGhr2rGcZWNa6wced552LP/XmnYsS9eadiyX1ppWQk07lpdqTRvKS1k/d7nvtNbPt9G6879aPwrnjWC2uuwfPR3JWD9aRZFM3GKmRUYgc0Im7k3KFpm49yhbZOLeomyRiWtnWmTwMydkrB/Uo/iYiPVTfTTR8LTeKRqe1jtFI6A5Q8PTeqdoAj+t10IT+Gm9Fhp+u3KKht+unKEZ7DC1f4ZGHp+9zEc0kd1wA01kN9xAE9kNN9AIaM7QRHbDDTS44VM0uOFTX4MbPkWDGz5DM9iBd13R0A2foqEbPkVDN3yKRkBzhoZu+BQNbvgUDW74FA1u+BQNbvgMTeRz91pocMOnaHDDp2gENGdosHynaLB8p2iwfCdoqvlDCcs+65Sfhr2/fKKaPzqwOYD1jbA5gPXypjmA9f22OYD1XbE5gPW9qzmA9R2mOYD16N8cwHpAbw1g/kC05gDed2Lzh4s1B/C+E5s/qOvxkuCvYb4P8OL6Mj3eKZyers71z7jW9+3O41rf5TuPa90TdB7XuoPoPK51v9F3XPMncHUe17qX6TyudefTeVzrPqnzuBJr3Fiuyvw5XJ3HjeWqcixXlWO5qjmWq5pjuao5lquax3JVOe2vCs/z4VXhdZZQ047lqVrTjmWpWtOO5aiylH3acnjhQZWxtlyp6X651KO2MtaO25p2tA13/7stczpOO1qLcT3tWPtta9rROozraUerMK6nHa3BuJ52tALjetrR+ovLaZfR6ovraUdrL66nDeWlzJ/R3ndaGWvax+VlnY/TDualGtMO5qUa0w7mpRrTDualGtMO5qWupzV/3njfaQfzUo1pB/NSjWllqGnn/VVZSdK3zvHFxdfv1armT7NWRDOWb+mKZiyT0xXNWI6oK5qx7FNPNOZPs1ZEM5Yx64pmLBfXFc1Y9VlXNHF9zeWrVKv582Xf+N9M41AO8+fLKqIJvD+10ATen1poAu9PLTQCmjM0gduaFprAbU0LTeC2Jk37QWZJjs/emj9fVhFNYDfcQGP+fFlFNIHdcAtNYDfcQhPYDbfQCGjO0AR2wy00Y7lhyXVHI8enB82fptt32rE8a2vasWzo9bSb+cOP+0472G8BG9OO5f9a045l6VrTSqBftW7mT3fuO+1gXqox7WBeqjHtYF6qMe1gXup6WvPHV/edNtK5Cpv5g7H7TiuBntbfRjuDujFtpF/HbaOdQN2YNtKv47bRzp++nna046cb00b6ddw22uHTjWkHO2mgMa2EmjaUlxrt4OnGtKG81GjHTjemDeWlRjt0ujFtKC/l+cjp2wCO7dFtAPE+gGMTcxsg7lPGl7+42+a4zxhvddk/ejqSGezg4J5k4j4r2iLj+Iv+zWTiPinaIhP3Z1MtMnF/NdUiE9fOtMjgZ07IDHYwc8efZ26DneLcFQ0HCJyi4QCBUzQCmjM0HCBwioYDBE7RBD5AoIUm8AECLTQcp3WGZrCjtf8ZGtl/uTotx/tFg53D3RVNZDfcQBPZDTfQCGjO0ER2ww00uOFTNLjhU1+DGz5Fgxs+QxP58PMWGrrhUzR0w6do6IZP0QhoztDQDZ+iwQ2fosENn6LBDZ+iwQ2foeFVC+docMOnaHDDp2gENGdosHynaLB8p2iwfGdoPn0yfN7kfi5h3urcQLOs6f6Q5rIuS+Oz07Q9zhjOU0uketdIvr1z7OUni+wPi8qSvl19w5jA2ANjBmMPjDMYe2AUMP4E4/w4aXbJLzAuYOyBsYCxB8YVjD0wVjD2wLiB8d/GuE0TKeafYizpBUZSTBeMpJguGEkxP8JY845xkxcYBYw/wbiuD4zLC4ykmC4YSTE/wbjkHeMir74bSTFdMJJiumAkxfTAmEgxXTCSYrpgJMX8U4zL9AIjKaYLRgFjD4ykmB9hXPfXGy1/rfqGkRTzI4ylPDC+qCYSKaYLRlJMF4ykmB9h3HaM5a+rf2PMpJguGEkxXTCSYrpgJMV0wShg7IExrG/Mcp9xnmpjHTLt65BpeVyd1xcXr+V+7Vq3x6Xzq/nmu5TL0wPlX5fetAlrRk1os+zjleWoTViHa1+bOaxtdqBNWC/uQJuwBt+BNmFTgwNtBG1MaLPKUZuwd2kcaBP21o8NbfbsWV9oQy+gqY2sV9rQC9jVhl7ArDZCL6CoTUn3B0FKWo/a0AvY1YZewK429AJ2tRG0UdRmmndt6lEbegG72tAL2NWGXsCuNvQCdrWhFzCrzUIvYEObfPTQC72AXW3oBVS1uR9WUuYX2tALaPbQm1xpI2hjVht6Abva0Ato7jf7vbUvikdt6AXsakMvYFcbegGz2hR6Abva0AvY1Ub+bW1k3Y3gIqVFZFrv/HJOz8/9vHzny5QfuKd5al5fl/0gmLqWJ+IvLq75/tE1P5+L8AfMEhbMVpf9o6cXZCpkTshskHlNpsOrw0clkyBzQiZD5oTMDJkTMgKZEzL4mTMyJSyZ69ckfqFZQXOGJq4LbqKJa4NbaGpcH9xEE9cIN9HEdcJNNHGtcBONgOYMTVwz3EQT2Q3L47OX+YgmshtuoInshhtoIrvhazRbZDfcQBPZDTfQ4IZP0eCGz3xNh7faD4sGN3yKhm74FA3d8CkauuFTNHTDJ2jSRDd8ioZu+BQNbvgUDW74FI2A5gwNbvgUDW74FA1u+BQNbvgMTcLynaLB8p2iwfKdosHynaKxvnmXfdYpPw376/rbANa32OYA1jfC5gDWy5vWANn6ftscwPqu2BzA+t7VHMD6DtMcQLwPYD2gNwfwvhNn7ztx9r4TZ+878Wx9J14eZjqX0rr+cfheKunp6lz/jGt93+48rvVdvvO41j1B53El1rjW/Ubnca27k87jWvcynce17nw6j2vdJ/UdV2K5KonlqiSWq5JYrqrDG4hcjRvLVUksVyWxXJXEclUylqv6+sj75fnXrdU/V99vnC5jmarWtGN5qta0Y1mq1rRjOaosZZ+2bMdpx9pypd7fX/n1f77QdqwdtzXtaBvu/ndb5nScdrQW43LaMlqJcT3taB3G9bSjVRjX047WYFxPK6GmHa2/uJ52tPrietrR2ovraUN5KfNntHed1vy56/9w2sflZZ2P0w7mpRrTDualGtMO5qUa00qoaQfzUo1pB/NSjWkH81KNaQfzUtfTmj/N+p9NO2/75ZK+dY4vLt72i/M0lSOasaxIVzRj+ZauaMYyOV3RCGjO0Ixln7qiGctrdUUzljHrimYsF9cVzVj1WU805s8lfh+ay1epJvPny77xv5nGoRzmz5dVRBN4f2qhCbw/tdAE3p+u0WTz58sqognc1rTQBG5rWmgCtzVp2g8yS7Id0QhoztAEdsMtNIHdcAtNYDfcQhPYDbfQBHbDDTTmj95VRBPYDbfQjOWGJdcdjaTjtGMZ3Na0EmrasWxoa9rBfgvYmHaw3wI2ph3L/7WmHcvSNaY1f2Bzz1+1ZvOnO/eddjAv1Zh2MC/VmFZCTTuYl2pMG+lchWz+rOu+0w7mpa6nHe0Q6sun9fNoZ1A3po3067g82gnUjWkl1LSRfh2XRzt+ujFtpF/H5dEOn25MO9hJA9fTjnb0dGPaUF5qtIOnG9OG8lKjHTvdmDaUlxrt0OnGtKG8lOcjp28DOLZHvwfwfC70bQDHJuY2wFh7V7df3OUl7jPGW132j55ekIn7sGiLTNxnRRtkBjuQuCeZuE+KtsjE/dlUi0zcX021yAhkTsjgZ87IcIDA789+8fPMwU5x7oqGAwRO0XCAwBmawQ6T7oqGAwRO0XCAwCmawAcItNAIaM7QcJzWKZrIblj2X65Oy/F+0WDncHdFE9kNN9BEdsPXaCIfft5CE9kNN9Dghk/R4IbPfE3kw89baHDDp2johk/R0A2foqEbPkVDN3yGZqMbPkVDN3yKBjd8igY3fIpGQHOGBjd8igY3fIoGN3yKBjd8gmbmfQLnaLB8p2iwfKdosHynaP79zXve7mcBFZGlgSZt076ebV3aaLZH6z9PTZR1We+X17Vco7n8pc/c4Vx4r2Cun4ydOxzwPSqZBJkTMhkyJ2RmyJyQEcickFkgc0Imrp1pkcHPnJGpYcm00kGHM9FHRZPjuuAmmrg2uIkmrg9uoolrhJtoBDRnaOJa4SaauF64iSauGW6iieyGLx8xn3NkN3yNZo7shhtoIrvhBprIbriBJrIbbqARNu8zNLjhM18z44ZP0eCGT9HQDZ+ioRs+QyN0w6do6IZP0dANn6KhGz5FI6A5Q4MbPkWDGz5Fgxs+RYMbPkWDGz5Ds+CGT9Fg+U7RYPlO0QhoztBg+U7RWN+8yz7rlNfvP4K6DWB9i20NUKxvhM0BrJc3zQGs77fNAazvis0BrO9dzQGs7zDNAaxH/+YA1gN6cwDvO3HxvhOv3nfi1ftOvFrfif/hO2Ufn17S09W5/hnX+r7deVzru3znca17gs7jWncQnce17jc6j2vdnXQe17qX6Ttute58Oo9r3Sd1HjeWq6qxXFWHw+pdjRvLVdVYrqrGclU1lquqsVzVFstVbWO5qpzuZzumPH87T/E27VimqjXtWJ6qNa2EmnYsR5Wl7NOW7TjtWFuu1Ptavv7PF9qOteNeTyvTaBvu/ndb5nScdrQW43ra0UqM62lH6zCupx1rv21NO1qDcT3taAXG9bSj9RfX045WX1xPO1p7cTmt+fPc+04bykuZP3f9H077uLys83HawbxUY1oJNe1gXqox7WBeqjHtYF6qMe1gXqox7WBe6npa86eC9512LHfxj96rte0X52kqRzRjWZGuaAQ0Z2jGMjld0YzliLqiGcs+dUUzltfqimYsY9YTjfnTrBXRjFWfdUUjYdFcvkpVzJ8vq/b6XTF/vqwimsD7UwON+fNlFdEE3p9aaAK3NS00gduaFhoBzRmawG1NmvaDzJJsRzSB25oWmsBuuIUmsBtuoQnshhtozJ8vq4gmsBtuoQnshltoArvhFhoZ61c2ue5o5Pj0oPnTdPtOO5ZnbU07lg1tTTvYbwEb0w72W8Drac0fq9x32rEsXWvasVxa41et5k937juthJp2MC/VmHYwL9WYdjAv1Zg20rkKYv6s667Tmj8Yu++0oX4dN9oZ1I1pJdS0oX4dN9oB1I1pQ/06brTjpxvThvp13GiHTzemHeykgca0obzUaCdPN6aVUNOG8lKjHTvdmDaUlxrt0OnGtKG8lOcjp28DOLZHtwEcO57bAI5NzG2AuE8ZX//ibov7jPFWl/2jpwOZZbCDg3uSifusaItM3EdFW2TiPinaIiOQOSET91dTLTJx7UyLDH7mjAwHCPz+7OPPM5fBTnHuiWawI5+7ouEAgVM0HCBwioYDBE7RCGjO0AQ+QKCFJvABAi00HKd1iiayG5b9l6vTMh/RRHbD12gGO7S7K5rIbriBJrIbbqCJ7IYbaITN+wwNbvjM10Q+/LyFBjd8ioZu+BQN3fAZmsiHn7fQ0A2foqEbPkVDN3yKRkBzhgY3fIoGN3yKBjd8igY3fIoGN3yGhlctnKPB8p2iwfKdohHQnKHB8p2i6bB57ycNlnmpDTRzlT8Xy7c3fb3E+EV6H3RJ366+LX5zvPgep6vrLT55Xny2vPj5cW7nkl8sfva8ePG8+MXz4ovnxa+eF296h31afHn1VWl6h20svpjeYVuLN73D1rwvfpMXize9w67rY/HLi8Wb3mFbi7e8wy55X/wir/6bt7zDNhdveYdtLt7yDttcvOUdtrl4yztsa/Gr5R32efHL9GLxlnfY5uIt77DNxVveYb/+u9gXX+cXize9w5byWPwLY7aa3mFbize9w7YWb3qH3fbFl7+uvi3e9A7bWrzpHbax+Gp6h20t3vQO21q86R22tfgPf89nuX/yPNXG4mVKyz7p0yfn9cXFa7lfu9bHWyPz/OLSZb4DXP7/7Z1RkutKc5z34hUAjUID0G5khx8U4ZAdtuwIP3jv5uiSIOcfgHWu2JxKdn1vVxKEqfryEJ1ZABrT4z20K5GakMh8O/QSrX8SWSDyD0RWiPwDkQ0i34lsA0T+gcgIkX8gUlITWewnkQki/0DEMhLZHdp6QCSjZ7XlGZGMnvU5kYye9TmRhJ61jvvDmOPyk0hCz/qUSB0SelaHSELP6hBJ6Fnr/ph2HdefRBJ6VoeIQeQfiCT0rA6RhJ7VIZLQszpEMnrWO5FysPpm9KxPiYwZPetQ9oIPiGScs272jEjGOetzIhnnrM+JWMLryD4xqnX4SSSjZ31OJKNnfU4ko2d9TiSjZ31OJKNnfUqkwc7F43Qf0j28WXVCpGy3U5dp+Pl8fm2wX3DjgkytoFmtoPrLBU3TsBc0zQcFLWoFrWoFbWIFNdhp9G8WtG8ycimoHhQ0qhVU1Aqa1AoytYJmtYJ+/Uo91r2gMhwUtKgVtKoVtIkVZINaQaNaQUWtoEmtIFMraFYrSO1KbWpXalO7UpvalXpWu1LPalfq+bevQ+Nwm9tc/nM5KGhWK6iqFbSoFfTb16HL/3ov6GCHizpvYgXVQa2gUa2g33aMY9nuBZWDgia1gkytoFmtoKpW0KJW0K9fqUvZCyoH45i6iRW0DGoFjWoFFbWCJrWCTK2gWa2gqlbQolaQ2pV6UbtSr2pX6lXtSr2qXalXtSt1g/1lxvmhoMkpaF7ub4U+PLRyexSlweYuTctZtcrZpMppsKfI3yqnDrcz12IH5Yxa5RStciatckyrnFmrnPrb5dyezHnclu1ezqJVzqpVzqZUzjIMWuWMWuUUrXImrXJMq5xZqxypq/IySF2Vl0HqqrwMWlflUeuqPGpdlUetq/KodVUeta7Ko9ZV+fgNp3nbX46pU8tqbNz3x7NxuR99sfF/lbNJlVMGrXJGrXKKVjmTVjmmVc6sVU7VKmfRKkfrqly0rsqT1lV50roqT1pX5UnrqjxpXZWn373uPL8lsdjv/rAca2qjVDVFqppJqprXf1R/57bsaPuHSB/ex6/LtZhZqZj6u8WsN53Gbf1ZzKJUzPqrxZRyO7hM289iNqFi5uGNxfz1F8a3/4Xy9r8wvf0v2Nv/wvz2v1Df/heWt/+F9e1/YXv3X6hv/03Xt/+m69t/0/Xtv+n69t90fftvur79N13f/puub/9N17f/ppe3/6aXl3/T5W7cyzh7hm3aN9sap/lhV8WrMVmKVjmTVjmmVc6sVU7VKmfRKufly+Hf2lRvLHsys5/5Y9mEilkHpWJGpWLKrxZT7HbiabDHYg6Gnm/ah9HGW702jc8PnYZl2st9PK/9B4a06wTpXyJtkP4l0jOkf4l0hfQvkV4gfT30Lx5rOh71Fqitlp88Nng88tgGeHzjMcLjG498CWO7JS7bfl5Pt3w54DkPg8c3Hvk89XMe6ZzvvJ92HutPHun8qcMjnT91eKTzp095rEM6/zFPt6+azdMBj3Try9Mv76xDuvXF4aG7vow23ic32yOPvyrXXQku9+ueVq57zR7HZa98HX5UPuqmf69y3ZzuVf67K9q0Xy5smZ9XPi+3/XXrw/a64+EFa7w/tzKO6/yzyylFl5aiyzlFlzVFl0uKLtcUXW4ZuixDii7HFF2m8D4lhfd5fW+Dj+gyhfcpKbxPSeF9SgrvUzrxPnvBYxmmH11OnXgfp8tOvM9jl+vPLvvwPmWc9i7L+LPLPryP16X112X92WUn3meze5fLzy77WC+n/eNo42T2s8s+1kunS+tjvXz+pthqfayXTpfz72o5D3vpw/i8y+l+J3Ma14fKy7Xy8WMrLx9b+fSxldvHVj5/bOX1YytfPrby9WMr3z618vqxa2j92DW0fuwaWj92DX19S5+wyj92Da0fu4bWj11D68euofVj19DlY9fQ5WPX0OVj19DlY9fQ1/euCqv8Y9fQRXcNLftTzFN53FfgVrnuGupVrruGln26PZV5+Fm57hrqVL7qrqFlf/NmKo/vdtwq111Dvcp119DHyg+uiqvuGupVrruGepX/7hpa93fj6vdt7Q7uEw3jfs9vsG+V/zzYbLptxW929KOoOdpccrS55mhzS9HmL29FFNbm2Emb2+3hIZuHnwvKL28cFNbm615l2zcAN3M3Ed6G/ZGt7eFpjH8POkedTvv2scO4DN+O/6t++/D65w+vv354/cuH179+eP3bR9e/DcOH1z9+eP3lw+v/7PV3Gz57/d0G8fV3uVu98dvOOofH13k/e33YXHgq12bFF+u2zYqv7G2bFbcBbZsV9wxNmx3FDUbbZsXdSNtmxa1L22bFfU7bZi1Ts5kc1JjJQY2ZHNSYyUGNmRxUyeSgSiYHVTI5qJLJQTXYnOmDms3koEomB1UyOaiSyUGVTA5qyuSgpkwOasrkoKZMDqrBFk8f1GwmBzVlclBTJlMxZTIVlslUWCZTYZlMhWUyFWaZms1kKkx7nS0Pz3EVK9+O//f6Z+0LbNnu9T9+gek/cvxf/WpfY9v3q32Zbd+v9pW2fb/aF9v2/WqHuPb9ak/C2/crvp4271c7ujbvt2qn1/b9JvNXtSt/tdi+hfxSyw/zX7syV16zlqnZrmzVOt92RhrXpT42e1TK/uJzGYb6k0xXBqwpma6sWlMyXZm6pmS6sn8tySxdGcWmZLqylE3JdGU+m5Lpyqk2JWOQOSGT1s+s5XbqtdgPLmvelelyP+l+7p//Yta8K5NHJu/K5JHJuzJ5ZPKuTB6ZvNMZj0ze6YxHJu90xiOTdzozDvu5x4ftI3cyeaczDpktrwf2yOT1wB6ZvB7YI5PXA3tkDDInZPJ6YI9MXg/skUnigf9qtitb68xqxbcDbtns5d+4+ObBrbvtylG63XblEt1uu3J+breWqtuuHJrbbVeuy+22KyfldpvHSn11m8pLvb5Psi23R2nrbNXptgzLrfxSRv+Bc2cj+q8Gxk9voHx6A9OnN2Cf3sD86Q3UT29g+fQG1k9vYPvwBsqnr8Tl01fiIr4SN9y54qtb8WW7cbfia3zjbsUNQeNuxd1D427FrUbjbsV9SeNuxU1M224nccfTuFtxe9S421ReakrlpV7fI/ejuk3lpaZUXmpK5aWmVF5qSuWlLJWXslReylJ5KUvlpV7fGvijuk3lpSyVl7JUXspSeSlL5aXmVF5qTuWl5lReak7lpeZU7mJO5S7mVO5iTuUu5lTuoqZyFzWVu6ip3EXVXm+dj998NaB9mW28O/tXw9pX2vYNL9oX2zc0rH29fUPD2pfcNzSsnene0LBla1h8XW3fsHaUfUPD2mn2DQ1nc1pLV07r6edSLt2uXdkst9uuPJbbbVcGq90O6V9ourJibdEYaM7QdGXv2qLpygi2RdOVZWyLpitz2RZNVza0KZqtK8/aFk1XBrctGsuK5tlXcb7A5F2fnm6w/4Um7/rkosm7PjloxiHv+uSiybs+uWjyTmtcNHmnNS4aA80ZmrzTmqfbyX+hyTutcdHkdcMumrxu2EWT1w17aMT3qQ1Fk9cNu2jyumEXTV437KKxHGiu3XZlcJ357Si+03DrbruyoW63XTlLt9uuzKLXrfjuyK277crSud125dLcbrsyXm63lqrbVF5KfN/lxt2+df/W658o7/8T0/v/hL3/T8zv/xP1/X9ief+feNkS1+H2znCtZs5P9DKLmu7Rer2fejk4eF7GWxnzMrvfyRruP+eLG/SO3h9WeUz4lzKuWDawHGB5fRPJPrGMYDnCUnJiKXY79aOrOCzDhr0MG+Z7zeXo4KXu5L7tzXB03nG9nfbLzDw7dBqWaS/38bx2eN55r3d82PLhcvBV8wnN02luaJ5O8xnN02le0Tyd5guaq2l+VSZpcldQpt6+3221HCiTdHigr8ycdH7xAcokHaF8gDJMccKU2eu17cABzMxaVJUxlBFVhrmFqjJMF6KUme/djfVAGWYAqsowA1BVhhmAqDKVPBOmzHR7GmmejpTBm0UpU23ZwQ0HyuDNVJXBm7nKjLYPuMZle1TmyhAX5TOc5ucM8Ts+w3HZGa7DT4YLdydeZ8h9hNcZJnXI077U2jJ7ZewN2n2WNR4u9pf2xr2IdT7gnXSOH8bb4P2rvJPmujDeSdNaGO+kGSyMd9K8FsY7abaL4r0mzYFhvJNmxjDe5Mvf5U2+/F3eBu9f5U2+/F3e5Mvf5U2+/F3e5Mvf5U2+bMt7J3epYfrJeyNf/i5v8uX7eK8HvMmXTXmXe3+ljAe8yZe/y9vg/Tbe9YA3+bLx9dvuvJcD3vjvpryn6XbwOD3QuPPGf/8m7zLgv9vytm3nPS8HvPHfv8p7TPrve75XPYzPy5juz6RPl/nenWG5MUz6b7Ypw6Q5sCnDpNmuKUOD4csMk2awpgyT3rdryjDpvbimDJPm+6YMk2b2lgwLOeV1huSU1xmSU15nSE55naHB8GWG5JTXGZJTXmdITnmdITnldYbklJcZTuSU1xmSU15nSE55nSE55XWGBsOXGZJTXmdITnEZln2vqak8fsVoZ0hOeZ0hOcVnuD+TN5V5OGBITnmZYdavQ/8thvvOr1N53EdzZ0hOeZ0hOeVvMTzyNlm/49yUocHwZYZJc0rdT11te17G1+7LtxMP9o3hz4PNpnI92Ozw4pk01MQBT5qA4oAnjUtxwJNmqzDgWT9zGwc8aWp7H/Dt1qDNw4EtzPpR2jjg/eTBy/3026kvo4JvR197tUS99pOv/F77MX5l3bdQmB62rDg5ehv2QraHN4H//WbC0XXjDvLrozTfjr+S7MfRBZOs/Vi1aJL9eLBokv2Yq2iSHbmmYJIGyUYkO3J8wST7GZVHk+xnBh5NkozTiiQZpxHJjr5r+l6Sy31gN377LvTh8XXez16XO8HpNrLr6FOoH4Wd9BSCnagVgt3AHoGdEBeCncQXgp14GIKdLBmCneAZgb2jr65+FHZSagh2UmoIdlJqCHYDewR2UmoIdlJqCHZSagh2UmoIdlJqBPaOvt36UdhJqSHYSakh2EmpIdgN7BHYSakh2EmpIdhJqSHYSakh2EmpAdinjr5w/FHYSakh2IlLIdgN7BHYiUsh2IlLIdiJSyHYiUsh2IlLEdhH4lIIdnz7H2F/2FhreNxZa3/Dd+roy/LvJXnf6+8rv7x0/JU8/iSKPBYlijwuJYh8wahEkWe0G0WeZ5CiyOPPo8gb5IPIM12PIk+GjSJPhn0H+cX2WpZafo6/CgE2BDvpNQL7RHR9B/Z1vn2beFyX+oj9qJT9IyNlGOqBRoRcfY2Iw/oaEZz1NTI0kteIMK6vEbFdXyMCvr5GTAP0NWJ0IK+RkY+iNVrL7dRrsQOFcHXhv6KhTPdzH/2KcHX6GuHq9DXC1elrhKuT12jm7pG+Rtw90teIdKSvEXePwjUah+HOZDvQyNBIXiPmDPoaMWfQ14g5g75GzBn0NWLOIK9RZc6grxFzBn2NmDP8rkZX7IwO3oHde+agGtgjsBPwQ7CT2UOwE8NDsJOsQ7ATliOwL+TfEOxE2hDspNQQ7KTUEOwG9gjs+HbxFxIWLH60Qts676ceDiRaMUjyEmGm5CXCeMlLZEikLhG3HeQl4haFvETEInmJyEXyEnGbRP59no17KvoaMV/Q14gBg75GTBj0NTI0kteIGYO+RgwZ9DViyqCvEWMGfY2YM8RrZPdzzz8/p2wDcwZ9jZgz6GvEnEFfI+YM+hoZGslrxJxBynsfasScQT0f2cCcQV8j5gz6GjFnkNdoZM6grxFzBn2NmDPoa8ScQV8jQyN5jZgz6GvEnEFfI+YM+hoxZ9DXiDmDvEaFOYO+RswZ9DUiw+prZGgkrxEZVl8jMqy+RnjvP9Oo7tCH8kD96/i/SE445FYk8bGtSHJXqxVJfHsrkgbJRiTxwK1I4lRbkeSeSCuS3LloRZKM04ikkXFakSTjtCJJxmlFkozzZyTn+0yt1OodX+9nr+PD0WW9cTe4h3AnP8VwJ23FcCebxXAnycVwJ/eFcJ9JiTHcyZQx3EmgMdzJqzHcDe4h3MmrMdzJqzHcyasx3MmrMdzJqyHcK3k1hjt5NYY7efUd3Mu411K+Hsa/Hr0/al+JqyHYDewR2AmrIdjJqm/BbnXHXrcD7Fj3d2C3dbwdbuvBv/YF5x6CHeP+HuO+11K/jviBHd8egh3fHoLdwB6BHd8egh3fHoKdW0wh2LnDFIKdlBqBfSWlhmAnpYZgJ6WGYCelvgX7/fC6HHwPbDWwR2AnpYZgJ6WGYCelhmAnpYZgJ6VGYN9IqSHYSakh2IlL78A+bfvhNn57cuColP3gMgz1QCNDI3mNCGL6GpHa9DUi4ulrRB7U14jwqK7RPJA09TUiluprxJ1WfY3IR9EareX2eaW12IFCuLrwX5Hzlap5wNXJazTi6vQ1wtXpa4Sr09eIu0f6GhkayWtEOtLXiLtH4RqNw3Bnsh1oxN0jfY2YM+hrxJxBXqPCnEFfI+YM+hoxZ9DXiDmDvkaGRvIaMWd4yz5xZd01svEAO6ODEOxMA0KwE/BDsJPZI7BPxPAQ7CTrEOyE5RDs5N+A/Z3nycAegZ2UGoKdlBqCnZQagp2UGoKdlBqB3UipIdhJqSHYiUsBewnNZmCPwE5cCsFOXArBTlwKwU5cCsFOXIrAPhOXQrATl0Kwc1MvBDspNQS7gT0COyk1BDspNQQ7KTUEOyk1BDspNQJ7JaWGYCelvoz9SpLg2YokWbIVSYNkI5J4YPEtXyt2OVqhbZ33Uw8HEi2YDXmJcDHyEmGP5CUyJFKXiBG+vESM++UlIhbJS0QukpeIWw7yOyav3J/Q14j5gr5GDBj0NWLCoK+RoZG8RswY9DViyKCvEVMGfY0YM+hrxJwhXiPbd7Ue5oMH8jbmDPoaMWfQ14g5g75GzBn0NTI0kteIOYOU9z7UiDmDfD7amDPoa8ScQV8j5gzqGtWBOYO+RswZ9DVizqCvEXMGfY0MjeQ1Ys6grxFzBn2NmDPoa8ScQV8j5gzyGo3MGfQ1Ys6grxEZVl8jQyN5jciw+hqRYeU1KtKeod6+qTav0+Sd+uJ/bqeuNnw7+tqr9Iy/ca/SPqNxr9LXmb/Ta7lcL65Hl7J4hZRhGfajR3OvM+N0f/5sXIZvx19JSk+0Poqk9Nzpo0hKT4c+ieQkPcP5KJLduKZwkt14snCS3Ti+cJIGyUYkpac0H0WSjNOKJBmnFUkyzp+RXOqd5Lp5xzvfeqkTgSgCu5GeQrATtUKwk8tCsBPiQrAb2COwEw9DsJMlQ7ATPEOwk1JDsJNSI7DPpNQQ7KTUEOyk1BDspNQQ7Ab2COyk1BDspNQQ7KTUEOyk1BDspNQI7JWUGoKdlBqCnZQagp2UGoLdwB6BnZQagp2UGoKdlBqCnZQagp2UGoF9IS6FYCcuhWAnLoVgN7BHYCcuhWAnLoVgJy6FYCcuRWBf8e1/hL08vOFbrHw7/krSIPlHJLc7yWl47fgrefxJFHksShR5XEoUeYxKFHlGu0HkN55BiiKPP48iz2g9ijzT9SjyBvkg8mTYd5BfbP8WwVLLz/HXRoANwU56DcFOdH0H9nW+1TKuS33EfnDwtn+RpAxDPdCIkKuu0TIQh/U1Ijjra0TE1teIMK6vkaGRvEYEfH2NmAboa8ToQF4j7Q+gp9BoLbdTr8UOFMLVhf+KnM/NLtqf1kajf9cIV6evEa5OXyNcnb5G3D3S14i7R/IaFdKRvkbcPQrXaByGO5PtQCPuHulrxJxBXyNDI3mNmDPoa8ScQV8j5gz6GjFn0NeIOYO8RhNzht/V6Iqd0cE7sHvPHExMA0KwE/BDsBvYI7ATw0Owk6xDsBOWQ7CTf0OwE2kjsBspNQQ7KTUEOyk1BDu+XfyFBMPiRyu0rfN+6uFIIgySukQzZkpeIoyXvESYNHmJuO0gL5EhkbpExCJ5ichF8hJxm0T+fZ6Zeyr6GjFfkNeoMmDQ14gJg75GjBj0NWLGoK+RoZG8RkwZ9DVizKCvEXOGeI3sfu55OtCIOYO+RswZ5DVamDPoa8ScQV8j5gz6GjFnkPLehxoZGqnno4U5g75GzBn0NWLOoK8RcwZ9jZgzyGu0MmfQ14g5g75GzBn0NWLOoK+RoZG8RswZ9DVizqCvEXMGfY2YM+hrxJxBXqONDKuvERlWXyMyrL5GhkbyGuG9/0yjukMfygP1r+OvJHHIrUjiY9uQXAfuarUiiW9vRRJ33YokHrgVSYNkI5LcE2lFkjsXrUiScVqRJOO0IknGaURyJOO0IknG+TOS832mVmr1jq/DfngdH44u6407iSiGO/kphrvBPYQ72SyGO0kuhju5L4Y7KTGGO5kyhHshgcZwJ6/GcCevxnAnr8ZwN7iHcCevxnAnr8ZwJ6/GcCevxnAnr4Zwn8ir7+B+OeXt8PL1MP716Nuj9utEXA3BTloNwU5YDcFuYH8Hdqs79rodYMe6vwO7rbfKL/959K8d5x6CHeP+HuO+X9vr1xH/iN3w7SHY8e0h2PHtIdjx7SHYDewR2LnFFIKdO0wh2EmpIdhJqSHYSakR2GdSagh2UupbsN8Pr8t0gJ2UGoKdlBqC3cAegZ2UGoKdlBqCnZQagp2UGoKdlBqBvRKX3oF92vbDbfz25MDBwdt+cBmGeqAR2UpfI4KYvkaGRvIaEfH0NSIP6mtEeNTXiKSprxGxVF6jhTut+hqRj6I1WsutkrXYgUK4uvBfkfOVqnXB1elrhKvT1whXJ6/RiqvT14i7R/oacfdIXyPSkb5GhkbRGo3DcGdysP3Eyt0jfY2YM+hrxJxBXyPmDPoaMWeQ12hjzqCvEXMGfY2YM+hrxJzhLfvElXXXyA7eSd4M7BHYmQaEYCfgh2Ans4dgJ4aHYCdZB2DfBsJyCHbyb8D+zttApA3BTkoNwW5gj8BOSg3BTkoNwU5KDcFOSg3BTkqNwD4SlwL2EtpG4lIIduJSCHYDewR24lIIduJSCHbiUgh24lIIduJSBPbCTb0Q7KTUEOyk1BDspNQQ7Ab2COyk1BDspNQQ7KTUEOyk1BDspNSXsf9FciJ4tiJJlmxFknjYiiQeWHvL123CLkcrtK3zfurhSCLMhrpEhouRlwh7JC8RvkteIkb48hIZEqlLRCySl4hcJC8RtxzUd0zejPsT+hoxX5DXaGbAoK8REwZ9jRgx6GvEjEFfI0MjeY2YMuhrxJhBXyPmDPEa2b6r9TAfPJA3M2fQ14g5g7xGlTmDvkbMGfQ1Ys6grxFzBinvfaiRoZF6PqrMGfQ1Ys6grxFzBn2NmDPoa8ScQV6jhTmDvkbMGfQ1Ys6grxFzBn2NDI3kNWLOoK8RcwZ9jZgz6GvEnEFfI+YM8hqtZFh9jciw+hqRYfU1MjSS16gb7z3W2W6nrsv47ei/et26mfGP67qferPNO3ob7kcvs/vvcZzuzymNy/Dt+CvJblxMOMluvEY4yW4cQTjJbtbtcJLdTIjDSXYzxw0n2Y/jiybZzUw0nGQ3k8tYkuMwkHFakSTjtCJJxvkzkku9k1w37/jn3wS5YCcQhWA3sEdgJ2qFYCeXhWAnxIVgJ/GFYCceRmAfyZIh2AmeIdhJqSHYSakh2A3sEdhJqSHYSakh2EmpIdhJqSHYSakR2AspNQQ7KTUEOyk1BDspNQS7gT0COyk1BDspNQQ7KTUEOyk1BDspNQL7REoNwU5KDcFOSg3BTkoNwU5cCsFOXArBTlwKwU5cCsFOXIrAbsSlEOzEpRDsxKUQ7Pj2P8JeHt7wLVa+HX8liTn5M5LbneQ02EvHX8njT4LIz1iUKPK4lCjyGJUo8ox2o8gb5IPI48+jyDNajyLPdD2KPBk2ijwZ9h3kF9v3Q19q+Tn+qgTYEOyk1xDsRNd3YF/n24cxxnWpj9iPStm/XFGGoR5oRMjV18jQSF4jgrO+RkRsfY0I4/oaEdv1NSLgy2u0MA3Q14jRgb5GhkbBGq3lduq12IFCuLrwX9Hzz5JeNMLV6WuEq5PXaMXV6WuEq9PXiLtH+hpx90hfI0MjeY24exSu0TgMdybbgUbcPdLXiDmDvkbMGfQ1Ys4gr9HGnEFfI+YM+hoxZ9DXiDmDvkaGRr+q0RU7o4N3YPeeOdiYBoRgJ+CHYCezh2AnhgdgvxgdsEdgJyyHYCf/hmAn0oZgN7BHYCelhmAnpYZg7yelbvXe6jQ4R5dhuXEsZfT3qRkfdrkdl+Hb8VeS/QTPaJL9ZMlgkmM/8TCaZD+JL5pkPyEummQ/uSyapEGyEcl+0lM0yX4CUTRJMk4rkmScViTJOH9GsulHfcZCIArBTnoKwU7UCsFOLgvBbmCPwE7iC8FOPAzBTpYMwU7wDMFOSo3APpFSQ7CTUkOwk1JDsJNSQ7Ab2COwk1JDsJNSQ7CTUkOwk1JDsJNSI7AbKTUEOyk1BDspNQQ7KTUEu4E9AjspNQQ7KTUEOyk1BDspNQQ7KTUC+0xKDcFOXArBTlwKwW5gj8BOXArBTlwKwU5cCsFOXArBTlyKwF7x7X+EvTy84VusfDv+ShJz8mck/96GZk+Pv5LHn0SRx6JEkcelRJHHqASRXxjtRpHnGaQo8vjzKPKM1qPIG+SDyJNho8iTYd9BfjG7Hb7U8nP8tRBgQ7CTXkOwE13fgf1vfavU+0DDSsjV14g4rK8RwVlfIyK2vkaGRvIaEdv1NSLg62vENEBfI0YH8hpt5KNojdZyO/Va7EAhQ6HoX9FQpvu5j35FuDp9jXB1+hrh6vQ1wtXpa8TdI3WNLnYcjeQ1Ih3pa8Tdo3CNxmG4M9kONOLukb5GhkbyGjFn0NeIOYO+RswZ9DVizqCvEXMGeY1G5gz6GjFn+F2NrtgZHbwDu/PMQRmZBoRgN7BHYCezh2AnhodgJ1mHYCcsh2An/0ZgL0TaEOyk1BDspNQQ7KTUEOz4du0XEkrB4kcrtK3zfurhQKIJgyQvEWZKXiKMl7xEmDR5iQyJ1CXiFoW8RMQieYnIRfIScZtE/n2eiXsq8hoZ8wV9jRgw6GvEhEFfI0YM+hoZGslrxJBBXyOmDPoaMWbQ14g5Q7xGdj/3PB1oxJxBXqOZOYO+RswZ9DVizqCvEXMGfY0MjZS896FGzBnk89HMnEFfI+YM+hoxZ9DXiDmDvEaVOYO+RswZ9DVizqCvEXMGfY0MjeQ1Ys6grxFzBn2NmDPoa8ScQV8j5gzyGi3MGfQ1IsPqa0SG1dfI0EheIzKsvkZ47z/TqO7Qh/JA/ev4K0kcciOSKz62FUnuarUiiW9vRRJ33YqkQbIRSZxqK5LcE2lFkjsXrUiScVqRJOM0IrmRcVqRJOO0IknG+TOS832mVmr1jq/DfngdH44u6407iSiGu8E9hDtpK4Y72SyGO0kuhju5L4Y7KTGC+zSQKWO4k0BjuJNXY7iTV2O4G9xDuJNXY7iTV2O4k1djuJNXY7iTV0O4j+TVGO7k1Xdwv5zydnj5ehj/evTtUftpJK6GYCethmA3sEdgJ6u+BbvVHXvdDrBj3d+B3dZb5Zf/PPrXjnOPwF4w7u8x7vu1vX4d8QM7vj0EO749BDu+PQS7gT0CO749BDu3mEKwc4cpBDspNQQ7KTUC+0RKDcFOSg3BTkp9C/b74XWZDrCTUkOwG9gjsJNSQ7CTUkOwk1JDsJNSQ7CTUiOwGyk1BDtx6R3Yp20/3MZvTw4cFb7dCx/qgUZkK32NDI3kNSK16WtExNPXiDyorxHhUV8jkqa8RjOxVF8j7rTqa2RoFKzRWm6VrMUOFMLVhf+KnK9UTTOuTl8jXJ28RhVXp68Rrk5fI+4e6WvE3SN9jQyN5DXi7lG4RuMw3JkcbD9RuXukrxFzBn2NmDPoa8ScQV6jhTmDvkbMGfQ1Ys6grxFzBn2NDI3esU9cWXeN7OCd5IXRQQh2pgEh2An4IdjJ7CHYieER2FeSdQh2wnIIdvJvxP7OK5E2BLuBPQI7KTUEOyk1BDspNQQ7KTUEOyk1AvtGSg3BTlyK2EtoIy6FYDewR2AnLoVgJy6FYCcuhWAnLoVgJy4FYLeBuBSCnZt6IdhJqSHYSakh2A3sEdhJqSHYSakh2EmpIdhJqSHYSakR2EdS6svYryQJnq1IkiVbkSQetiKJB9be8tVG7HK0Qts676ceDiQqmA15iXAx8hJhj+QlwnfJS2RIpC4R4355iYhF8hKRi+Ql4paD+o7JVrg/Ia/RxHxBXyMGDPoaMWHQ14gRg75GhkbyGjFk0NeIKYO+RowZ9DVizhCvke27Wg/zwQN5E3MGeY2MOYO+RswZ9DVizqCvEXMGfY0MjZS896FGzBnk85ExZ9DXiDmDvkbMGfQ1Ys4gr9HMnEFfI+YM+hoxZ9DXiDmDvkaGRvIaMWfQ14g5g75GzBn0NWLOoK8RcwZ5jSpzBn2NyLD6GpFh9TUyNJLXiAyrr1E/3ntd91NvtrmKDvejl9nXaLs/uzMNrqbrvNwOX5f6XCNnQ7Taj/P+VIW8F/+XfkxdtxL14+m6lciQSF2ifhxdtxL1c1OiW4n6uSfRrUTEInmJyEXqEq393JD4VIncAdDaz4OP/WrEfEFfIwYM+hoZGslrxIhBXyNmDPoaMWTQ14gpg75GjBnkNdqYM8Rr5GxusjFn0NeIOYO+RswZ9DUyNJLXiDmDvkbMGaS896FGzBn08xFzBn2NmDOoazQPzBn0NWLOoK8RcwZ9jZgz6GtkaCSvEXMGfY2YM+hrxJxBXyPmDPoaMWeQ12hkzqCvEXMGfY2YM+hrZGgkrxEZVl8jMqy+RmRYeY0K3vvPNKo79KE8UP86/koSh9yKJD62FUnuarUiaZBsRBJ33YokHrgVSZxqK5LcE2lFkjsXjUhOZJxWJMk4rUiScVqRJOO0ImmQ/COSf+8DBvV+9jo+HF3WG3cSUQx38lMMd9JWDHeyWQx3klwIdyP3xXAnJcZwJ1PGcCeBxnA3uIdwJ6/GcCevxnAnr8ZwJ6/GcCevhnCfyasx3MmrMdzJqzHcyavv4F5Gux1epm8fKr9iN7BHYCethmAnrIZgJ6u+BbvVHXvdfmKvWPd3YLf1VvnXVwEPsOPcQ7Bj3N9j3Pdre/064gd2fHsIdgN7BHZ8ewh2fHsIdnx7CHZuMYVg5w5TBPaFlBqCnZQagp2UGoKdlBqC3cD+Duz3w+syHWAnpYZgJ6WGYCelhmAnpYZgJ6VGYF9JqSHYSakh2EmpIdgN7G/APm374TZ+e3LgqJT94DIM9UAjspW+RgQxfY1IbfoaEfH0NSIPymu0ER71NSJp6mtELNXXiDut+hqRj6I1Wsvt80prsQOFcHXhvyLnK1V1wNXpa4Sr09cIV6evEa5OXyNDI3mNuHukrxHpSF8j7h6FazQOw53JdqARd4/0NWLOIK/RyJxBXyPmDPoaMWfQ14g5g75GhkbyGjFn0NeIOcNb9okr666RjQfYGR2EYGcaEIKdgB+BvZDZQ7ATw0Owk6xDsBOWQ7Ab2H9/f+daiLQh2EmpIdhJqSHYSakh2EmpEdgnUmoIdlJqCHZSagh2A/vv7yVUJ+JSCHbiUgh24lIIduJSCHbiUgR2Iy6FYCcuhWAnLoVg56ZeCHYDewR2UmoIdlJqCHZSagh2UmoIdlJqBPaZlBqCnZQagp2U+jL2K0mCZyuSBslGJImHrUjigbW3fK0zdjlaoW2d91MPBxJVzIa8RLgYeYkMidQlwnfJS8QIX14ixv3yEhGL5CUiF6lLtHDLQX7H5IX7E/oaMV/Q14gBg75GhkbyGjFi0NeIGYO+RgwZ9DViyqCvEWMGeY1W5gzxGtm+q/UwHzyQtzJn0NeIOYO+RswZ9DUyNJLXiDmDvkbMGaS896FGzBn08xFzBn2NmDPIa7QxZ9DXiDmDvkbMGfQ1Ys6gr5GhkbxGzBn0NWLOoK8RcwZ9jZgz6GvEnEFdo2VgzqCvEXMGfY2YM+hrZGgkrxEZVl8jMqy+RmRYeY3G316Plv0zaeO2PdfoUvG9+PUu6OVf1lEh662Oxe41r0dV2Hxrbx7Hx0OvTGaY/GBSYfKDyQKTH0xWmPxgssHkH5mUISGTeVxuTOb1+aHjONte8AOLcqn4SnCE4IsEf3leUobtVtD0BeI5wXG6Py08Phy+b2a7lOnD67cPr3/+8Prrh9e/fHj964fXv312/dPw4fWPH17/h6+/04evv7/9Sfq/Wf9S7/Wv27f6D453vpCyTNqLdeNmtVf2xs1q24DGzWp7hsbNahuMts2athtp3Ky2dWncrLbPadystilq3KxlajaTg7JMDsoyOSjL5KAsk4OaMzmoOZODmjM5qDmTg/rtj4TGNpvJQc2ZHNScyUHNmRzUnMlB1UwOqmZyUDWTg6qZHNRvf0c0ttlMDqpmMhU1k6momUzFkslULJlMxZLJVCyZTMVvfzostlnpdbY8PMdVrHxr9q/6V+kLbNnu9U8Pn009fRvyyfHXfqWvsW/oV/oy+4Z+pa+0b+hX+mL7hn6lQ9wb+pWehL+hX+31tH2/0tH1Df1Kp9f2/W7J/NXWk79abH8L9DIE/2n+t57MldtsT87KbdY6anadby8+j+vybR+Xg4O3fYeYMgwHm75sPRmwtmR6smptyfRk6tqS6cn+tSXTk1FsSWYderKUbcn0ZD7bkunJqbYl05OtbUsmq59Zy+3Ua7EDLmlXJmdDyHVMuzK5ZNKuTC6ZtCuTSybtyuSSMcickEk7nXHJpJ3OuGTSTmfGYT/3+LAz951M2umMSyatB/bIlLQe2CWT1gO7ZNJ6YJdMWg/skjHInJBJ64FdMjk88LXZnmytN6vV3g64dbM9mU+vWe2Nhls325NFdJvtyfW5zfZk5NxmLVOzPdktt9meHJTbbCYHpb05cuNmtbcvibu1r73TyRu5bOu8n3o4ApM1U7tgst5WcsFkvavkgsl6U8kFk/WekgdGexOUSDBZbYwLBh9zAoZnqk6eAtHetSWUDM9UnZHhmaozMmmfqXLJpH2myiXDewUnZLrapKotGd4rOCPDewVnZPJ6YLufe54OyBhkTsjk9cAembwe2COT1wN7ZPJ6YI8MHviETFcbiTX1M11tOdaWDB74jAxz4DMyBpkTMsyBz8gwBz4jwxz4jAxz4DMyeOBjMlvenc9cMnjgMzJ44DMyeOAzMgaZEzJ44DMyOL0zMji9MzI4vRMy7CR4SkZ71a57q0N56HX/QMQmvnebX7/2CujXrz2r8evXXmf9+rVXQ79+7TXLrV98fy6/fu2k79evncf9+j98/RXfN8qv/8PXX/E9mPz6tdff++d6L71Uz5nX4f513/Hh6LLeutVerVt3q722N+5WfGel1t1q+4bW3Wq7jNbdanuS1t1aqm61/U7rbrXdUetuU3kp8R2WWnebyktZKi9lqbyUpfJSlspLmaXqNpWXsp68VBn3D3aX6ecHuzfryUq5zfbkpNxmezJSXrNzTz6qWN2brdtBsz0ttbaOt8NtPVK2p5XWbbavhXb/zdavI34029fMwmm2r5GF02xfEwun2b4GFs+brX3NK5xm+xpXOM32Na1wmu1rWOE0a5mazeSgxDdRb9xsVw7qfnhdpoNmu3JQXrNdOSinWfFNyRs325WD8prtykF5zXbloLxmLVOzXTkor9meTMW0f71qtPHbdPHgYOdTV5v4ftORZHqyK03JiO83HUmmJyPUlkxPrqktmZ4sVlsyBpkTMj2Zt7ZkepqVtSWT1c88/6jpJr4L7Bv/xXh7aYjvAhtJJu3K5JJJuzK5ZNKuTC6ZtNMZl0za6YxLJu105jmZi/dLO50Zh33fsdG2AzJppzMumbQe2CWT1gO7ZAwyJ2TSemCXTFoP7JJJ64FdMmk9sEumJw9sZd3J2PizWfEtbxs325NTdZvtyXy6zXb1Up/XrGVqtifX5zbbk5Fzm+3Jmz1/N/XSbE92y222KwflNCu+tXPjZrtyUF6zXTkor9k82yJcmrVMzXbloLxm87zndmk2z3tul2bzvOdWhr52ifaazfOe26XZPO+5XZrN857bpVnL1Gye99wuzXa1U4DXbCYH1dfu0F6zmRxUX3tDe81mclB97QztNZvJQfW1L7TX7Mc6qGv9H2uKrvV/rM+51v+x1uWv+uesjw0/fXHuwiXrQ8PbOu+nHo7AZH3+0wWT9fFPF0zWpz9dMFkf/nTBZH3/yQPT1dbFTcFktTEuGHzMCRje//+n43csu9pruS0Z3v8/I8P7/2dkeP//jAzv/5+R4f3/EzJd7Tzdlkza9/9dMuyBdUYmrwe2/e3TYT64LdTVbtltyeT1wB6ZvB7YI5PXA3tk8npgjwwe+IRM3h3KPT+Td4dylwwe+IwMc+AzMgaZEzLMgc/IMAc+I8Mc+IwMc+AzMnjgEzIbHviMDB74jAwe+IwMHviMjEHmhAwe+IwMTu+MDE7vjAxO75jMmHfHf5fML6/a47jXM9r6nMy8jLcy5mWevVNf/Px+6jI4Rxe7nXp6eLDzsAwb9jJsmO81l6ODl7qTW7cHJY/am+zW3fQo+k0ZQ5koZea9uzofKDOjjKgyFWVElVlQRlSZFWVEldlQRlOZ3/7UAsocKbPYgTIjyogqU1AmTJk9aa5HyjADCFPGlqfKGMqIKsMMQFUZZgBRytTxtqN7HZcDZZgBqCrDDEBVGWYAosoUZgBhygzTrsx6oAwzAFVlmAGoKsMMQFUZQxlRZZgBqCrDDEBAmXLkmpkBqCrDDCBOmXIDNx0pwwwgbNa82TNlJmYAqsowA1BVhhlA2Dqz3zm7MDxQhhmAqjKGMqLKMANQVYYZgKoyzABElXn9S5u27OZvtuoBGZYbvnL54w/1HL74OJQ77eER4cnx63xrdlyXb+8+/jz4+Ze8xte/yvmpYJxPYIyvf+ixWzIzZE7IVMickFkgc0JmhcwJmQ0yx2TmtHbGJYOfOSNTspJx9wqZJ9CcoTHQnKFJa4N9NGl9sI8mrRH20aR1wj6atFbYRVPTemEfTVoz7KNJ7Iaff1tmrIndsIfGQHOGJrEb9tAkdsMemsRu2EODGz5Fgxs+8zULbvgUDW74FA2z4VM0zIZP0RhoztAwGz5Fw2z4FA2z4VM0uOFTNLjhMzQrbvgUDW74FA1u+BQNbvgUjYHmDA2W7xQNlu8UDZbvFA2W7wzNJr54173XoTw0+3X8tQHxJdZvQHwh9BsQH974DYivt34D4qui34D42uU3IL7CeA2UQTz6+w2IB3S/gQ9ficvw4StxGT58JS7Dh6/EZRBfif/eB3rvG+2NdXw4uqy3dsXX7dbtiq/yrdsV9wSN2x3FHUTrdsX9Rut2xd1J63bFvUzrdi1Xu+I+qXW7uVzVmMtVjblc1ZjLVZVcrqrkclUll6squVzV619s+ax2u3JVl1PeDi9ft1avR99unJbSlalyu+3KU7nddmWp3G67clTF6t5t3X52O3W15Np6+zbl5T8PtJ26WnHdbjtbcPffbf064ke3nU0xnG47G2I43XY2w3C67WyE4XTb2QTjebfqW4k37raz+YXTbWfjC6fbzqYXTreWqttUXkp93/W/2e398LpMB9325aW8bvvyUl63fXkpp1v1fcwbd9uXl/K67ctLed325aW8bi1Vt125i2nbD7fx28zx4OBtP7gMQz1A05UVaYumK9/SFk1XJqcpGvXdrCPRdGWf2qLpymu1RdOVMWuLxkBzhqar8VlbNGl9zfNPqRb1/WXf+G/G2ZSjqO8vG4km7/rkosm7Prlo8q5PLpq80xoXTd5pjYsm77TGRZN3WjMO+0Zmox08e6u+v2wkmrxu2EWT1w27aPK6YReNgeYMTV437KLJ64ZdNHndsIumKzdsZd3R2MHTg+q76bbtduvKs7rddmVD3W77ehfQ67avdwG9bi1Vt11ZOrfbrlya91ar+u7Ojbvty0t53fblpZ53O6lvMt242768lNdtpn0VJvW9rht3a6m6zfR23NTZHtRet5nejps624Ha6bazDai9bjO9HTd1tv20122mt+Omzjaf9rrta6cBr9tUXqqznae9blN5qc72nXa67Wzbaa/bVF6qs02nvW5TeakP3nL62sDn2qNrA5/reK4NfK6J+auBKe1Txs/fuJumtM8Yb+u8n3o4IvO5l813k0n7rKhLJu2joi6ZtE+KumTSvjblkkn71pRHpq8NlJuSwc+ckWEDgf90/Hrm1Ncuzm3RGGjO0LCBwCkaNhA4RcMGAqdo2EDgFE3eDQQ8NH1tgN0WDdtpnaJJ7IZtf3N1mA/uF/W1D3dbNAaaMzSJ3bCHJrEb9tAkdsMeGtzwKRrc8JmvSbz5uYsGN3yKhtnwKRpmw6doDDRnaJgNn6JhNnyKhtnwKRrc8Cka3PAZmgU3fIoGN3yKBjd8igY3fIrGQHOGBst3igbLd4oGy3eKBst3hub1neGn7bYXUDWbHTTjNuz1bMvso9nuU/9pcFGu83I7fF3qczTOmz6v7wv/qWC8J2Nf3+C7WzILZE7IrJA5IbNB5pjM69uGd0tmhMwJmbR2xiWDnzkjY1nJuOng9T3R+0WT1gX7aNLaYB9NWh/so0lrhD00NqR1wj6atFbYR5PWC/to0pphH43lRfP8EXMbErthD01iN+yhSeyGPTSJ3bCHJrEbdtCMuOFTNLjhM18z4oZP0eCGT9EYaM7QMBs+RcNs+BQNs+FTNMyGT9EwGz5DU3DDp2hww6docMOnaHDDp2gMNGdocMOnaHDDp2iwfKdosHxnaCYs3ykaLN8pGvHFu+69DmX5/hLUtQHxJdZvQHwh9BsQH974DYivt34D4qui24CJr11+A+IrjN+AePT3GxAP6H4Dn74S26evxPbpK7F9+kps4ivx3/ym7P3sdXw4uqy3dsXX7cbtzuKrfOt2xT1B63bFHUTrdsX9Rut2LVe74l6mdbvizqd1u+I+qXW7uVzVnMtV1VyuquZyVTWXq6q5XNXrm79/Vru5XFXN5apqV66qjLe9HccyfdtP8dptV6bK7bYrT+V1u3Rlqdxuu3JUl3+re7d1O+i2qyXX1lstl/880rarFdfttrMFd//d1q8jfnTb2RTD6bazIYbTbWczjOfdrp2NMJxuO5tgON12NsBwuu1sfuF0a6m67Wx64XSbykup79HeuNu+vNT98LocbH+ivpd6227V90dv3G1fXsrrti8v5XXbl5fyurVU3fblpbxu+/JSXrdduYu/9V2tbT+4DEM9QNOVFWmJZlbfzToSTVcmpy2arhxRWzRd2ae2aAw0Z2i6MmZt0XTl4tqi6Wp81hSN+r7E70Pz/FOqs/r+snGf353V95eNRJN3fXLR5F2fXDR51ycXTd5pjYsm77TGQ6O+v2wkmrzTmnHYNzIbbTtAk3da46LJ64ZdNAaaMzR53bCLJq8bdtHkdcMumrxu2EWT1w17aNS33v2bb9mUdUdj40G3XRlct9uuPKvbbVc21O3WUnXb17uAXrdd+T+3264sndttVy7Neat1Vt/duW236ltBN+62Ly/ldduXl/K67ctLed1aqm4z7aswq2+M3bjbTG/HzZ3tQe1029kW1F63md6OmzvbgNrrNtPbcXNn20973WZ6O27ubPNpr9u+dhrwuk3lpTrbedrptrONp71uU3mpzrad9rpN5aU623Ta6zaVl/rgLaevDXyuPbo28LmO59rA55qYvxpY0j5l7Lxxt6R9xnhb5/3UwxGZtA+LumTSPivqkkn7qKhLJu2Toh6ZvjY6bkom7VtTLpm0dsYlg585I2O8nvlPx69n9rWLc1s0bCBwioYNBE7RsIHAKRo2EDhD09c21W3R5N1AwEWTdwMBFw3baZ2isbxobH9zdZgP7hf1tQ93WzSJ3bCHJrEb9tAkdsMemsRu+Dmamnjz88fF+xANbvjE19TEm5+7aHDDp2gMNGdomA2fomE2fIqG2fApGmbDp2iYDZ+hybtlvo8GN3yKBjd8igY3fIrGQHOGBjd8igY3fIoGy3eKBst3hobvCZyjwfKdonl98d53GqzTvDpoit1OPD08dFmXg0NtGG/H2vBw4nJ08FL3gtftAeDBofNk10Pn6ZH1DcicDsh8O3Su8wGQCpDvQBaAfAeyAuQ7kA0g34A02N29MyBjYiCLHQApAPkOZMoHZDdm6xEQSwfElqdA8jlVB0g+p+oASedUL3d3bvWOywGQdE7VA5LOqTpALJ1T9YCkc6p1n95dJvEHQNI5VQ9IOqfqATGAfAeSzql6QNI5VQ9IPqd6B1KOlt18TtUBks+pDmWv9wDInG+mutlTIPlmqg6QfDNVB0g+p7oPiGodDoAYQL4DyedUHSD5nKoDJJ9TdYDkc6rPgbz+mYNxvo/ktskBMi/3ewAPhd/LKVrlTFrlmFY586+WU4dtz1x2VE7VKmfRKmfVKmeTKmcZtMoZf7mc23YVdahH5RStciatckyrnFmrnKpVzqJVzqpVziZVzjpolaN1VV61rsqr1lV51boqr1pX5VXrqrxqXZVXravyqnVV3mSuyv/v8j/+n3/+n//yz//5v/3X/3X5f/n6v/7vf/0v//Yv//1fr//jv/3f//HX/+Vy8P8H","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hotp_secret","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}}],"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}}],"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_contract_instance_internal","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","notify_created_note","get_key_validation_request","unsafe_rand","emit_encrypted_note_log","notify_created_note","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]},{"name":"get_counter","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5Z3dblRHFoXfxddcnF2162fnVUajCBISWUIQARlphHj3Mcbd7dDWqQFK7m913SRxOHTWBry+7cD++tPN769f/f3nr7dv/3j34eaXf326efPut5cfb9+9vfvo0+cXN6/e3755c/vnr4//9c325S/9/vEPf718++WjDx9fvv9488v24ub129/v/n73Xf+4ffP65pfaP784e6xbPDzYczs+aiU98WxJ5eHZUk4va9v2+d8vbuJnQrTDgz3SIITnQ2D/8lr/DGHbT6QIaw8PRrZBirodfihqqmcp7GdSlMMrx+P5nk7RDy/atrOfEGtPpajtlLxl389SauqHn/Ha4vRfsCeTR64PT9uW49HjOZ54PLV8+PG++8fTqOU+fFcOH8Lh06Yc3pTDJ+XwWTm8K4cvyuGrcnhlwiZlwiZlwmZlwmZlwmZlwmZlwmZlwmZlwmZlwmZlwmZlwmZlwroyYV2ZsK5MWFcmrCsT1pUJ68qEdWXCujJhXZmwRZmwRZmwRZmwRZmwRZmwRZmwRZmwRZmwRZmwRZmwVZmwVZmwVZmwVZmwVZmwVZmwVZmwVZmwVZmwVZmwTZmwTZmwTZmwTZmwTZmwTZmwTZmwTZmwTZmwTZmwXZmwXZmwXZmwXZmwXZmwXZmwXZmwXZmwXZmwXZmwoUzYUCZsKBM2lAkbyoQNZcKGMmFDmbChTNhQJqxtyoi1TZmxtilD9u4FpNMrY9Y2Zc7apgxa26TNE5u0emKTZq1Js9akWWvSrDVp1po0a02atSbNWm3Lk7bmSdrzZNKiJ5M2PZm06smkXU8mLXsyaduTSeueTNr3ZNLCJ5M2Ppm08smknU8mLX0yaeuTSWufTNr7ZNLiJ5M2P5m0+smk3U8mLX8yafuTSeufTNr/ZNICKJM2QJm0AsqkHVAmLYEyaQuUSWugTNoDZdIiKJM2QZm0CsqkXVAmLYMyaRuUSeugTNoHZdJCKJM2Qpm0EsqknVAmLYUyaSuUSWuhTNoLZdJiKJM2Q5m0Gsqk3VAmLYcyaTuUSeuhTNoPZdKCKJM2RJm0IsqkHVEmLYkyaUuUSWuiTNoTZdKiKJM2RZm0KsqkXVEmLYsyaVuU0XVROZfDi+eW8/Hp7k+NurVD7OT1Hw/fzwon89RZ4RyfOiuc+lNn9YVmhW8UU2eF7x9TZ4VvK1Nnhe82U2eFb0ITZ010B9jUWdfZmxLdLzZ11nX2prT5QrOuszcluhdt6qzr7E2J7lybOutCexPd5zZ11oX2JrorbuqsC+1NdA/d1FkX2pvojrupsy60N9H9eVNnXWhvorv5ps660N5E9/5NnXWhvYnuFJw660J7E91XOHXWhfYmugtx6qwL7U10z+LUWRfam+gOx6mzLrQ30f2QU2ddaG+iuyenzrrQ3kT3Wk6ddaG9ie7MnDrrQnsT3cc5ddaF9ia663PqrAvtTXSP6NRZF9qb6I7SqbMutDfR/adTZ11ob6K7VafOutDeRPe2Tp11ob2J7oSdOutCexPdNzt11oX2JrrLduqsC+1NdE/u1FkX2pvoDt6psy60N9H9vlNnXWhvoruDp8660N5E9xJPnXWhvYnuPJ4660J7E92nPHXWhfYmuqt56qwL7U10D/TUWRfam+iO6amzLrQ30f3VU2ddaG+iu7GnzrrQ3kT3bk+ddaG9ie70njrrQnvTQr7wtJAvPC3kC08L+cLTQr7wtJAvPC3kC08L+cLTQr7wtJAvPC/kC88L+cLzQr7wvJAvPG8uO+t9fPoq1Eo5xq9+Fp++3Qzi0xeWx/GbncWn7yCD+PS1Yj8+3pDd0zF+z2e/9vHS60F8eu/3ko/x+3YWn977+/HphkivyR4e9+rlLD78F88oPvwXzyg+fGkYxUctDfeJnnsPsM1TOkby/ESkwEV6dsPg/xHJeJESL1LmRXJepMKLVHmRGi8Sr70zr72d197Oa2/ntbfz2tt57e289nZeezuvvZ3X3s5r78Jr78Jr78Jr78Jr78Jr78Jr78Jr78Jr78Jr78Jr78pr78pr78pr78pr78pr78pr78pr78pr78pr78pr78Zr78Zr78Zr78Zr78Zr78Zr78Zr78Zr78Zr78Zr785r785r785r785r785r785r785r785r785r785r7+C1d/DaO3jtHbz2Dl57B6+9g9fewWvv4LV34NrbN1x7+4Zrb99w7e0brr19w7W3b7j29g3X3r7h2ts3XHv7xmtv47W38drbeO1tvPY2Xnsbr72N197Ga2/jtbfx2jvx2jvx2jvx2jvx2jvx2jvx2jvx2jvx2pt3a+m8W0vn3Vo679bSebeWzru1dN6tpfNuLZ13a+m8W0vn3Vo679bSebeWzru1dN6tpfNuLZ13a+m8W0vn3Vo679bSebeWzru1dN6tpfNuLZ13a+m8W0vn3Vo679bSebeWzru1dN6tpfNuLZ13a+m8W0vn3Vo679bSebeWzru1dN6tpfNuLZ13a+m8W0vn3Vo679bSebeWzru1dN6tpfNuLZ13a+m8W0vn3Vo679bSebeWzru1dN6tpV/iirC0U6Tm55Ge/zOupFOkktt5pMBFusB93DCS8SIlXqTJ+1LPg0g51YOUPad2ClS+xnFWnMKKU587Ts6Hws65bI/inD/rVv3hWbdHr/wQvalGL5c41er99Fm7pW8/a8slTrVGkTIvkvMiFV6kyovUeJE6L1LgIl3iVGsUidfexmtv47W38dr7AkdIJT+KVJ6I1HmRAhfpAkdIw0jGi5R4kTIvkvMiFV6kyovEa+/Ea+/Ea+/Ma+/Ma+/Ma+/Ma+/Ma+/Ma+/Ma+/Ma+/Ma+/Ma2/ntbfz2tt57e289nZeezuvvZ3X3s5rb+e1t/Pau/Dau/Dau/Dau/Dau/Dau/Dau/Dau/Dau/Dau/Dau/Lau/Lau/Lau/Lau/Lau/Lau/Lau/Lau/Lau/Lau/Hau/Hau/Hau/Hau/Hau/Hau/Hau/Hau/Hau/Hau/Pau/Pau/Pau/Pau/Pau/Pau/Pau/Pau/Pau/PaO3jtHbz2Dl57B6+9g9fewWvv4LV38No7WOfI3/v8/Qis8+UfGKFurHPnHxqBdR79QyOwzql/aISsP4LDR6g910OUXr657q0XuMicGr9qx2/a8ek0HsSnk7j2fni8xhbfxDc6hQfx6QQexKfTdxCfTt5BfD51d+Pzqbsbn0/d3fh86u7G51N3N742dZM2dZM2dZM2dZM2dS9x+z0zvjZ1kzZ1kzZ1kzZ1kzZ1szZ1szZ1szZ1szZ1L3GzPzO+NnWzNnWzNnWzNnWzNnVdm7quTV3Xpq5rU/cSroWZ8bWp69rUdW3qujZ1XZu6RZu6RZu6RZu6RZu6l3BkzIyvTd2iTd2iTd2iTd2iTd2qTd2qTd2qTd2qTd1LuE1mxtembtWmbtWmbtWmbtWmbtOmbtOmbtOmbtOm7iWcNDPja1O3aVO3aVO3aVO3aVO3a1O3a1O3a1O3a1P3Ei6hmfG1qdu1qdu1qdu1qdu1qRva1A1t6oY2dUObupdwQM2Mr03d0KZuaFMX76waxJembsO7qgbxpanb8I6qQXxp6rZNmrpNwE21G1+auk3ATbUbX5q6TdtN1bTdVE3bTdW03VRN203VtN1UTdtN1bTdVE3bTdW03VRN203VtN1UTdtN1bTdVE3bTdW03VSN76aKdFTpRj6Lj6fufnw8dffj46m7Hx9P3d34fDfVfnw8dffj46m7Hx9P3f34eOrux2dh6z4SC0X3kVh4uY/EQsaXSM+u64k4vrmBbTli8JmQe/jD4zm2U/7uX+MXdny3dojvaStn8at2/KYdv2vHD+n4zy6MmRzftOPDe38UP9PjF9uL79rx8dTdj4+n7n58OnVTPsUv21l8OnUH8enU3Y9f6dQdxKdTdxCfTt1BfDp1UxySeLbz+HTqDuLTqTuIT6fuID6eur2f4ttZfDx19+Pjqbsbv+Gpux8fT939+Hjq7sfHU/dx/H4WH0/d/fh46u7Hp1PXez7E9ziPT6fuID6duoP4dOrux+906npJp/jxOP4Tv5WX7PCl2d0/puPDKX/9TeFOZ/TUYelEnzosnf9Th/WVhqXvFlOHxW8iM4fF7y0zh8VvOTOHxe9EE4eNlTaoWGmDipU2qFhpg3p2adFFh11pg4qVNqi4Js6WdvhTuKWfHk0pfxm1b9fUxXXbDqm3ej7qNTXxYNRr6uHBqNfUwoNRdTv4Pj7969JyfHEvbRsgxA+jWj09WtvXSelflM6blE7K75q0Hz777NH/0H+Y1Ohfjs6blP616PdMmtJh00uPbtkOk9KXn3mT0nef0o9/5L6co+PZBUGT49N3lEF8+t4xiE/fO+rxM9erl7P49GViEJ++IezHT3TsD+LTWT6ITwf0ID6duoP4dOoO4tOpO4hPp+4gvjZ1kzZ1kzZ1szZ1szZ1szZ1szZ1n10QNDm+NnWzNnWzNnWzNnWzNnVdm7quTV26DWsUX5u6rk1dvItsEF+bungX2SC+NnXxLrL9+HgX2SC+NnXxLrJBfG3q4l1kg/ja1MW7yAbxtamLd5EN4mtTF+8iG8TXpi7eRTaIr01dvItsEF+bungX2SC+NnXxLrJBfG3q4l1kg/ja1MW7yAbxtamLd5EN4mtTF+8iG8TXpi7eRTaIr01dvItsEF+bunhf2CC+NnXxTq9BfG3q4r1bg/ja1MW7sQbxtamL91cN4mtTF++YGsTXpi7eAzWIr01dvKtpEF+buqFNXbz7ajd+bNLUjU2auoG3iQ3iS1M3NmnqBt7kNYgvTd3A27kG8aWpG3iP1n58vBxrEF+buniN1SC+NnXxbqpBfG3q4t1Ug/ja1NV2U4W2myq03VSh7aYKbTdVaLupQttNFdpuqtB2U4W2myq03VSh7aYKbTdVaLupQttNFdpuqtB2U4W2myq03VSh7aYKbTdVaLupQttNFdpuqtB2U4W2myq03VSh7aYKbTdVaLupQttNFdpuqtB2U4W2myq03VShLXcKbblTaMudQlvuFHi90LR3kA28imjiqNf0ZrmDUa/pzXIHo9I59V3vIGv5kPpuvLNRr+rNcvdHvaY3LB+MSmflxFHpXw5+37s9x3FUPx/1mt6Efn9UvBZq4qjXtC0NRr2mbWkw6jVtS4NR/apGPbwPdt3q+ahXtS3tj3pV29L+qFe1Le2Pel3b0u6o17Ut7Y2K13lNHPW6tqXdUa9rW9od9bq2pd1RfZ1R19mW8FqziaOusy3hdWkTR11nW8Jr2CaOus62hNe7TRx1kW3p892H/3n5/vblqzevP9x9ly/f+vfb3z7evnv78OHH//719VvuHv4f","brillig_names":["get_counter"]},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}}],"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}}],"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_note_internal","get_key_validation_request","notify_nullified_note","notify_created_note","get_auth_witness","get_public_data_witness","lt_32_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","unsafe_rand","emit_encrypted_note_log","enqueue_public_function_call_internal","call_private_function_internal","debug_log_format","notify_set_min_revertible_side_effect_counter","directive_invert","directive_integer_quotient"]},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(noinitcheck)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}}],"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}}],"kind":"struct","path":"types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_note_internal","get_key_validation_request","notify_nullified_note","notify_created_note","get_auth_witness","get_public_data_witness","lt_32_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","unsafe_rand","emit_encrypted_note_log","pack_returns","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b2f36494"},{"kind":"string","value":"HotpSecretNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"public_key","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"hotp_secret","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaKCustomAccount::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaKCustomAccount::verify_private_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"hotp_secret","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"EcdsaKCustomAccount::constructor_parameters"}}],"kind":"struct","path":"EcdsaKCustomAccount::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}},{"name":"cancellable","type":{"kind":"boolean"}}],"kind":"struct","path":"EcdsaKCustomAccount::entrypoint_parameters"}}],"kind":"struct","path":"EcdsaKCustomAccount::entrypoint_abi"}]}},"file_map":{"100":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"102":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"107":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"108":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"118":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field\n}\n// docs:end:struct\n\nmod test;\n\nimpl<T, Context> Storage<T> for PrivateMutable<T, Context> {}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note, N, M> PrivateMutable<Note, &mut PrivateContext> where Note: NoteInterface<N, M> {\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note) -> NoteEmission<Note> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) -> NoteEmission<Note> {\n        let (prev_note, note_hash_for_read_request): (Note, Field) = get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(self.context, prev_note, note_hash_for_read_request);\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace(self, note: &mut Note) -> NoteEmission<Note> {\n        let is_initialized = unsafe {\n            check_nullifier_exists(self.compute_initialization_nullifier())\n        };\n\n        // check_nullifier_exists() is an unconstrained function - we can constrain a true value by providing an\n        // inclusion proof of the nullifier, but cannot constrain a false value since a non-inclusion proof would only\n        // be valid if done in public.\n        // Ultimately, this is not an issue ginen that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able to produce\n        //    an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious oracle\n        // (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce a proof.\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note(self) -> NoteEmission<Note> {\n        let mut (note, note_hash_for_read_request) = get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, &mut note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note, N, M> PrivateMutable<Note, UnconstrainedContext> where Note: NoteInterface<N, M> {\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"125":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n\n"},"127":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    point::Point, traits::Hash, hash::{sha256_to_field, poseidon2_hash_with_separator}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        poseidon2_hash_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x1cce4dbf69f14c44865919991ee1057922e34d7310ba237d71759aa422621ca9);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"128":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"136":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"137":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"139":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N, M> {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32, let M: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"141":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"148":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"152":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::{raw_storage_read, storage_read}\n};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"162":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"165":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"166":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/stored_keys.nr","source":"use crate::keys::public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH};\nuse dep::protocol_types::traits::{Serialize, Deserialize};\n\n// This struct represents how public keys are stored in the key registry. We store not just the keys themselves but also\n// their hash, so that when reading in private we can perform a historical read for the hash and then show that it\n// corresponds to a preimage obtained from an unconstrained hint. We do store the keys keys regardless as they might be\n// needed during public execution, and since we need to broadcast and produce hints in some standardized way.\n// While it might seem odd to create a struct for what is effectively some data and a pure function called on it, state\n// variables rely on serializable structs in order to persist data to storage, so we must use this abstraction.\nstruct StoredKeys {\n    public_keys: PublicKeys,\n    hash: Field,\n}\n\nimpl StoredKeys {\n    // Instances of StoredKeys are expected to only be created by calling this function so that we guarantee that the\n    // hash field does indeed correspond to the hash of the keys. Ideally we'd forbid direct access to the struct, but \n    // Noir doesn't yet support private members.\n    fn new(public_keys: PublicKeys) -> Self {\n        Self { public_keys, hash: public_keys.hash().inner }\n    }\n}\n\n// Our serialization is the concatenation of the public keys serialization plush the hash, so we need one extra field.\nglobal STORED_KEYS_LENGTH: u32 =  PUBLIC_KEYS_LENGTH + 1;\n\nimpl Serialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn serialize(self) -> [Field; STORED_KEYS_LENGTH] {\n        // The code below is equivalent to:\n        // [ ...self.public_keys.serialize(), self.hash ]\n\n        let mut array = [0; STORED_KEYS_LENGTH];\n\n        let serialized_keys = self.public_keys.serialize();\n        for i in 0..serialized_keys.len() {\n            array[i] = serialized_keys[i];\n        }\n\n        array[PUBLIC_KEYS_LENGTH] = self.hash;\n\n        array\n    }\n}\n\nimpl Deserialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn deserialize(array: [Field; STORED_KEYS_LENGTH]) -> Self {\n        // The code below is equivalent to:\n        // Self { public_keys: PublicKeys::deserialize(array[0 : PUBLIC_KEYS_LENGTH]), hash: array[PUBLIC_KEYS_LENGTH] }\n\n        let mut serialized_keys = [0; PUBLIC_KEYS_LENGTH];\n        for i in 0..serialized_keys.len() {\n            serialized_keys[i] = array[i];\n        }\n\n        let hash = array[PUBLIC_KEYS_LENGTH];\n\n        Self { public_keys: PublicKeys::deserialize(serialized_keys), hash }\n    }\n}\n"},"167":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\nuse crate::keys::constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\nstruct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\ntrait ToPoint {\n    fn to_point(self) -> Point;\n}\n\nstruct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nstruct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : NpkM { inner: Point::empty() },\n            ivpk_m : IvpkM { inner: Point::empty() },\n            ovpk_m : OvpkM { inner: Point::empty() },\n            tpk_m : TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m.inner == other.npk_m.inner ) &\n        ( self.ivpk_m.inner == other.ivpk_m.inner ) &\n        ( self.ovpk_m.inner == other.ovpk_m.inner ) &\n        ( self.tpk_m.inner == other.tpk_m.inner )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x:serialized[0], y:serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x:serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x:serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x:serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"170":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}\n},\n    state_vars::{\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter,\n    public_mutable::PublicMutable, map::Map\n}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n"},"181":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\nstruct EncryptedLogIncomingBody<let M: u32> {\n    plaintext: [u8; M]\n}\n\nimpl<let M: u32> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, let N: u32>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, let MR: u32>(\n        event: T,\n        randomness: Field\n    ) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_hiding_point(_self: Self) -> Point {\n            crate::generators::Ga1\n        }\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_nullifier(_self: Self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n            1\n        }\n\n        fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        // 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        // the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        // implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        // 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime { EventSelector::from_signature(\"TestEvent(Field,Field,Field)\") }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 185, 29, 14, 152, 216, 130, 219, 151, 80, 185, 43, 223, 167, 8, 89, 189, 88, 188, 101, 137, 255, 136, 84, 252, 79, 18, 52, 3, 110, 54, 54, 206, 244, 209, 246, 226, 207, 247, 143, 253, 211, 75, 160, 224, 172, 41, 45, 7, 208, 137, 90, 56, 59, 4, 234, 48, 53, 23, 130, 230, 49, 249, 142, 243, 170, 72, 183, 242, 49, 124, 46, 52, 198, 75, 55, 102, 56, 89, 254, 67, 59, 157, 249, 120, 184, 67, 154, 16, 148, 227, 93, 37, 120, 199, 93, 166, 80, 127, 173, 52, 80, 135, 87, 1, 168, 164, 51, 48, 126, 120, 47, 102, 211, 227, 234, 170, 208, 99, 111, 198, 170, 226, 156, 244, 241, 174, 206, 30\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n"},"182":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash_with_separator\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"183":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let NB: u32, let MB: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        for i in 0..encrypted_note_log_from_typescript.len() {\n            assert_eq(log[i], encrypted_note_log_from_typescript[i]);\n        }\n        assert_eq(encrypted_note_log_from_typescript.len(), log.len());\n    }\n}\n"},"184":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"186":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_current_public_keys, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL\n};\n\nunconstrained fn compute_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    )\n}\n\nfn compute<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    inner_compute: fn(AztecAddress, Field, Field, OvpkM, IvpkM, AztecAddress, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute_unconstrained);\n    }\n}\n"},"190":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"2":{"path":"std/array.nr","source":"use crate::cmp::Ord;\nuse crate::convert::From;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = unsafe {\n            // Safety: These indices are asserted to be the sorted element indices via `find_index`\n            let sorted_index: [u32; N] = self.get_sorting_index(ordering);\n\n            for i in 0..N {\n                let pos = find_index(sorted_index, i);\n                assert(sorted_index[pos] == i);\n            }\n\n            sorted_index\n        };\n\n        // Sort the array using the indexes\n        let mut result = self;\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Convert a sequence of bytes as-is into a string.\n    /// This function performs no UTF-8 validation or similar.\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<let N: u32>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"203":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n"},"204":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"22":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"222":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"223":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"224":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"227":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"228":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"23":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"231":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"235":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"237":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"238":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"24":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"241":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"267":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"27":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"319":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n"},"32":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"326":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-contracts/contracts/ecdsa_public_key_note/src/lib.nr","source":"use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext};\n\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n// ECDSA_PUBLIC_KEY_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN: Field = 5 * 32 + 64;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    // We store the npk_m_hash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<ECDSA_PUBLIC_KEY_NOTE_LEN, ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN> for EcdsaPublicKeyNote {\n    // Cannot use the automatic serialization since x and y don't fit. Serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = npk_m_hash\n    fn serialize_content(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n\n        [x, last_x, y, last_y, self.npk_m_hash]\n    }\n\n    // Cannot use the automatic deserialization for the aforementioned reasons\n    fn deserialize_content(serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n        let mut x: [u8; 32] = [0; 32];\n        let mut y: [u8; 32] = [0; 32];\n\n        let part_x:[u8; 32] = serialized_note[0].to_be_bytes();\n        for i in 0..31 {\n            x[i] = part_x[i + 1];\n        }\n        x[31] = serialized_note[1].to_be_bytes::<32>()[31];\n\n        let part_y:[u8; 32] = serialized_note[2].to_be_bytes();\n        for i in 0..31 {\n            y[i] = part_y[i + 1];\n        }\n        y[31] = serialized_note[3].to_be_bytes::<32>()[31];\n\n        EcdsaPublicKeyNote { x, y, npk_m_hash: serialized_note[4], header: NoteHeader::empty() }\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], npk_m_hash: Field) -> Self {\n        EcdsaPublicKeyNote { x, y, npk_m_hash, header: NoteHeader::empty() }\n    }\n}\n"},"328":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_nullify},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        self.compute_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all"},"329":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    generators::{Ga1 as G_amt, Ga2 as G_npk, Ga3 as G_rnd, G_slot},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{\n    constants::GENERATOR_INDEX__NOTE_NULLIFIER, point::{Point, POINT_LENGTH}, scalar::Scalar,\n    hash::poseidon2_hash_with_separator, traits::Serialize\n},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\nuse dep::std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:TokenNote\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n\n    // docs:start:compute_note_hiding_point\n    fn compute_note_hiding_point(self) -> Point {\n        // We use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        let amount_scalar = from_field_unsafe(self.amount.to_integer());\n        let npk_m_hash_scalar = from_field_unsafe(self.npk_m_hash);\n        let randomness_scalar = from_field_unsafe(self.randomness);\n        let slot_scalar = from_field_unsafe(self.header.storage_slot);\n        // We compute the note hiding point as:\n        //     `G_amt * amount + G_npk * npk_m_hash + G_rnd * randomness + G_slot * slot`\n        // instead of using pedersen or poseidon2 because it allows us to privately add and subtract from amount\n        // in public by leveraging homomorphism.\n        multi_scalar_mul(\n            [G_amt, G_npk, G_rnd, G_slot],\n            [amount_scalar, npk_m_hash_scalar, randomness_scalar, slot_scalar]\n        )\n    }\n    // docs:end:compute_note_hiding_point\n}\n\nimpl TokenNote {\n    // TODO: Merge this func with `compute_note_hiding_point`. I (benesjan) didn't do it in the initial PR to not have\n    // to modify macros and all the related funcs in it.\n    fn to_note_hiding_point(self) -> TokenNoteHidingPoint {\n        TokenNoteHidingPoint::new(self.compute_note_hiding_point())\n    }\n}\n\nstruct TokenNoteHidingPoint {\n  inner: Point\n}\n\nimpl TokenNoteHidingPoint {\n    fn new(point: Point) -> Self {\n        Self { inner: point }\n    }\n\n    fn add_amount(&mut self, amount: U128) {\n        self.inner = multi_scalar_mul([G_amt], [from_field_unsafe(amount.to_integer())]) + self.inner;\n    }\n\n    fn add_npk_m_hash(&mut self, npk_m_hash: Field) {\n        self.inner = multi_scalar_mul([G_npk], [from_field_unsafe(npk_m_hash)]) + self.inner;\n    }\n\n    fn add_randomness(&mut self, randomness: Field) {\n        self.inner = multi_scalar_mul([G_rnd], [from_field_unsafe(randomness)]) + self.inner;\n    }\n\n    fn add_slot(&mut self, slot: Field) {\n        self.inner = multi_scalar_mul([G_slot], [from_field_unsafe(slot)]) + self.inner;\n    }\n\n    fn finalize(self) -> Field {\n        self.inner.x\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TokenNoteHidingPoint {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) &\n        (self.npk_m_hash == other.npk_m_hash) &\n        (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"5":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiller can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"55":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"65":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            \n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7-i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7-i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"67":{"path":"/home/john-play/Documents/joaolago1113/aztec/aztec-wallet-ui-starter/aztec_wallet/src/contracts/src/hotp_note.nr","source":"use dep::aztec::prelude::{AztecAddress, PrivateContext, NoteHeader, NoteInterface};\nuse dep::aztec::{\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app\n};\n\nglobal HOTP_SECRET_NOTE_LEN: Field = 3; \n// Fields: 1 for Hotp_secret + 1 for npk_m_hash\nglobal HOTP_SECRET_NOTE_BYTES_LEN: Field = 3 * 32 + 64; \n// 32 bytes for Hotp_secret + 32 bytes for npk_m_hash\n\n#[aztec(note)]\nstruct HotpSecretNote {\n    value: Field,\n    counter: Field,\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<HOTP_SECRET_NOTE_LEN, HOTP_SECRET_NOTE_BYTES_LEN> for HotpSecretNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl HotpSecretNote {\n    pub fn new(value: Field, counter: Field, npk_m_hash: Field) -> Self {\n\n        HotpSecretNote {\n            value,  \n            counter,\n            npk_m_hash, \n            header: NoteHeader::empty() \n        }\n    }\n}\n"},"68":{"path":"/home/john-play/Documents/joaolago1113/aztec/aztec-wallet-ui-starter/aztec_wallet/src/contracts/src/main.nr","source":"mod hotp_note;\n\ncontract EcdsaKCustomAccount {\n\n    use crate::hotp_note::HotpSecretNote;\n\n    use dep::aztec::prelude::{PrivateContext, PrivateImmutable, PrivateMutable };\n    use dep::aztec::{\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note_with_keys,\n        keys::getters::get_current_public_keys\n    };\n\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness\n    };\n\n    use dep::ecdsa_public_key_note::EcdsaPublicKeyNote;\n\n    #[aztec(storage)]\n    struct Storage {\n        public_key: PrivateImmutable<EcdsaPublicKeyNote>,\n        hotp_secret: PrivateMutable<HotpSecretNote>,\n    }\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(signing_pub_key_x: [u8; 32], signing_pub_key_y: [u8; 32], hotp_secret: [u8; 20]) {\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(&mut context, this);\n        // Not emitting outgoing for msg_sender here to not have to register keys for the contract through which we\n        // deploy this (typically MultiCallEntrypoint). I think it's ok here as I feel the outgoing here is not that\n        // important.\n\n        let hotp_secret: Field = bytes_le_to_field(hotp_secret);\n\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this_keys.npk_m.hash());\n        storage.public_key.initialize(&mut pub_key_note).emit(encode_and_encrypt_note_with_keys(&mut context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n\n        let mut hotp_note = HotpSecretNote::new(hotp_secret, 0, this_keys.npk_m.hash());\n        storage.hotp_secret.initialize(&mut hotp_note).emit(encode_and_encrypt_note_with_keys(&mut context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update account_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload, cancellable);\n    }\n\n    #[aztec(private)]\n    #[aztec(noinitcheck)]\n    #[aztec(view)]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[aztec(noinitcheck)]\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // Load public key from storage\n        let storage = Storage::init(context);\n        let public_key = storage.public_key.get_note();\n        let mut hotp_secret = storage.hotp_secret.get_note().note;\n\n        // Load auth witness\n        let witness: [Field; 68] = unsafe {\n            get_auth_witness(outer_hash)\n        };\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify payload signature using Ethereum's signing scheme\n        // Note that noir expects the hash of the message/challenge as input to the ECDSA verification.\n        let outer_hash_bytes: [u8; 32] = outer_hash.to_be_bytes();\n        let hashed_message: [u8; 32] = std::hash::sha256(outer_hash_bytes);\n        let verification = std::ecdsa_secp256k1::verify_signature(public_key.x, public_key.y, signature, hashed_message);\n\n        assert(verification == true, \"Invalid ECDSA signature\");\n\n        // Extract HOTP code from the witness\n        let hotp_code = (witness[67] as u32) | ((witness[66] as u32) << 8) | ((witness[65] as u32) << 16) | ((witness[64] as u32) << 24);\n\n        let hotp_secret_bytes: [u8; 20] = hotp_secret.value.to_be_bytes();\n\n        let valid_code = generate_hotp_code(hotp_secret_bytes, hotp_secret.counter as u64);\n\n        assert(hotp_code == valid_code, \"Invalid HOTP code\");\n\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(context, this);\n\n        hotp_secret.counter += 1;\n        storage.hotp_secret.replace(&mut hotp_secret).emit(encode_and_encrypt_note_with_keys( context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n\n        true\n    }\n\n    #[contract_library_method]\n    fn generate_hotp_code(key: [u8; 20], counter: u64) -> u32 {\n\n        let mut counter_bytes: [u8; 8] = [0; 8];\n\n        for i in 0..8 {\n            counter_bytes[i] = ((counter >> (56 - i * 8)) & 0xff) as u8;\n        }\n\n        let hmac_result = hmac_sha256(key, counter_bytes);\n        let offset = (hmac_result[31] & 0x0f) as u32;\n        let binary = ((hmac_result[offset] & 0x7f) as u32) << 24\n            | (hmac_result[offset + 1] as u32) << 16\n            | (hmac_result[offset + 2] as u32) << 8\n            | (hmac_result[offset + 3] as u32);\n\n        let mut result = binary % 1000000; \n        \n        result\n    }\n\n    #[contract_library_method]\n    fn hmac_sha256(mut key: [u8; 20], data: [u8; 8]) -> [u8; 32] {\n\n        let mut key_copy: [u8; 64] = [0; 64];\n\n        for i in 0..key.len() {\n            key_copy[i] = key[i];\n        }   \n\n        // Inner and outer padding constants for HMAC\n        let ipad: [u8; 64] = [0x36; 64];\n        let opad: [u8; 64] = [0x5c; 64];\n\n        // XOR key with ipad and opad\n        let mut i_key_pad: [u8; 64] = [0; 64];\n        let mut o_key_pad: [u8; 64] = [0; 64];\n\n        for i in 0..64 {\n            i_key_pad[i] = key_copy[i] ^ ipad[i];\n            o_key_pad[i] = key_copy[i] ^ opad[i];\n        }\n\n        // Perform inner hash (SHA-256)\n        let mut inner_data: [u8; 72] = [0; 72];\n        for i in 0..64 {\n            inner_data[i] = i_key_pad[i];\n        }\n        for i in 0..8 {\n            inner_data[i + 64] = data[i];\n        }\n        let inner_hash = std::hash::sha256(inner_data);\n\n        // Perform outer hash (SHA-256)\n        let mut outer_data: [u8; 96] = [0; 96];\n        for i in 0..64 {\n            outer_data[i] = o_key_pad[i];\n        }\n        for i in 0..32 {\n            outer_data[i + 64] = inner_hash[i];\n        }\n        let final_hash = std::hash::sha256(outer_data);\n\n        final_hash\n    }\n\n    #[contract_library_method]\n    fn bytes_le_to_field(bytes: [u8; 20]) -> Field {\n        let mut field_value: Field = 0;\n        let mut base: Field = 1;\n\n        for i in 0..20 {\n            field_value += bytes[19 - i] as Field * base;\n            base *= 256;\n        }\n\n        field_value\n    }\n\n    unconstrained fn get_counter() -> pub Field {\n        let storage = Storage::init(context);\n        let hotp_secret_note = storage.hotp_secret.view_note();\n        hotp_secret_note.counter\n}\n\n\n}"},"69":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n * \n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\nunconstrained pub fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n"},"72":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: Field = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.push(self.is_fee_payer as Field);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n"},"73":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n"},"76":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::{\n    context::PrivateContext,\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash};\n\nstruct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n        if cancellable {\n            let tx_nullifier = poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\n            self.context.push_nullifier(tx_nullifier);\n        }\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n"},"77":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::poseidon2_hash_with_separator\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `keccak256(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        comptime {\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\")\n    },\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field\n) {\n    let result: Field = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"consume((Field),Field)\")\n    },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field\n) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\")\n    },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_reject_all(bool)\")\n    },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n"},"82":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"83":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"84":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let NB: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"86":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"87":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"89":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"92":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"93":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"94":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"95":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"99":{"path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.54.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"}}}